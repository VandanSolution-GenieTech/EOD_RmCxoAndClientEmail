using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal;

namespace DataService.Models;

public partial class NeoNexusBrsContext : DbContext
{
    public NeoNexusBrsContext()
    {
    }

    public NeoNexusBrsContext(DbContextOptions<NeoNexusBrsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Amlscreeningdetail> Amlscreeningdetails { get; set; }

    public virtual DbSet<Amlscreenningrequestresponse> Amlscreenningrequestresponses { get; set; }

    public virtual DbSet<Apivendor> Apivendors { get; set; }

    public virtual DbSet<Apivendormaster> Apivendormasters { get; set; }

    public virtual DbSet<Appconfig> Appconfigs { get; set; }

    public virtual DbSet<Bankbranchmaster> Bankbranchmasters { get; set; }

    public virtual DbSet<Bankermaster> Bankermasters { get; set; }

    public virtual DbSet<Bankerpartnerentitymapping> Bankerpartnerentitymappings { get; set; }

    public virtual DbSet<Bankmaster> Bankmasters { get; set; }

    public virtual DbSet<Benchmark> Benchmarks { get; set; }

    public virtual DbSet<Bseclassmastersmapping> Bseclassmastersmappings { get; set; }

    public virtual DbSet<Bsestarmastersmapping> Bsestarmastersmappings { get; set; }

    public virtual DbSet<Bseuccmastersmapping> Bseuccmastersmappings { get; set; }

    public virtual DbSet<CapitalTransaction> CapitalTransactions { get; set; }

    public virtual DbSet<Cdsladditionaldetailsanswermapping> Cdsladditionaldetailsanswermappings { get; set; }

    public virtual DbSet<Cdslmastersmapping> Cdslmastersmappings { get; set; }

    public virtual DbSet<Cdsluploadstatuslog> Cdsluploadstatuslogs { get; set; }

    public virtual DbSet<Citymaster> Citymasters { get; set; }

    public virtual DbSet<CkycApplicantDetail> CkycApplicantDetails { get; set; }

    public virtual DbSet<Ckyccodesmaster> Ckyccodesmasters { get; set; }

    public virtual DbSet<Ckycdownloadresponse> Ckycdownloadresponses { get; set; }

    public virtual DbSet<Ckycsearchdatarequestdataresponse> Ckycsearchdatarequestdataresponses { get; set; }

    public virtual DbSet<Classdpmastermapping> Classdpmastermappings { get; set; }

    public virtual DbSet<ClientConsent> ClientConsents { get; set; }

    public virtual DbSet<Clientjourneybankdetailsmapping> Clientjourneybankdetailsmappings { get; set; }

    public virtual DbSet<Clientmaster> Clientmasters { get; set; }

    public virtual DbSet<Clientmasteraumdatum> Clientmasteraumdata { get; set; }

    public virtual DbSet<Clientmasterdatum> Clientmasterdata { get; set; }

    public virtual DbSet<Clientuploadstatusbseclass> Clientuploadstatusbseclasses { get; set; }

    public virtual DbSet<Clientuploadstatusbsestar> Clientuploadstatusbsestars { get; set; }

    public virtual DbSet<Clientuploadstatusbseucc> Clientuploadstatusbseuccs { get; set; }

    public virtual DbSet<Clientuploadstatusnse> Clientuploadstatusnses { get; set; }

    public virtual DbSet<Clientuploadstatuswealthspectrum> Clientuploadstatuswealthspectrums { get; set; }

    public virtual DbSet<Clientwiseaum> Clientwiseaums { get; set; }

    public virtual DbSet<Configurationdetailsmaster> Configurationdetailsmasters { get; set; }

    public virtual DbSet<Countrymaster> Countrymasters { get; set; }

    public virtual DbSet<Credentialsbsestar> Credentialsbsestars { get; set; }

    public virtual DbSet<Credentialsdigio> Credentialsdigios { get; set; }

    public virtual DbSet<Credentialssignzy> Credentialssignzies { get; set; }

    public virtual DbSet<Credentialssignzyesign> Credentialssignzyesigns { get; set; }

    public virtual DbSet<Credentialssmtpmailer> Credentialssmtpmailers { get; set; }

    public virtual DbSet<Credentialstrackwizz> Credentialstrackwizzs { get; set; }

    public virtual DbSet<Cvkrapanenquiryrequestresponse> Cvkrapanenquiryrequestresponses { get; set; }

    public virtual DbSet<CvlKraLastCheckedStatus> CvlKraLastCheckedStatuses { get; set; }

    public virtual DbSet<Cvlkramastermapping> Cvlkramastermappings { get; set; }

    public virtual DbSet<Digioesigncordiante> Digioesigncordiantes { get; set; }

    public virtual DbSet<Digioestamppaper> Digioestamppapers { get; set; }

    public virtual DbSet<Digiorequestresponse> Digiorequestresponses { get; set; }

    public virtual DbSet<Digiowebhookresponse> Digiowebhookresponses { get; set; }

    public virtual DbSet<DigiowebhookresponseUpdate> DigiowebhookresponseUpdates { get; set; }

    public virtual DbSet<Distributormaster> Distributormasters { get; set; }

    public virtual DbSet<Districtmaster> Districtmasters { get; set; }

    public virtual DbSet<Documentgenerationpathmaster> Documentgenerationpathmasters { get; set; }

    public virtual DbSet<Documenttypemaster> Documenttypemasters { get; set; }

    public virtual DbSet<DpClientMaster> DpClientMasters { get; set; }

    public virtual DbSet<EmailRequestDataModel> EmailRequestDataModels { get; set; }

    public virtual DbSet<EmployeeDistributorbankermapping> EmployeeDistributorbankermappings { get; set; }

    public virtual DbSet<Employeebankermapping> Employeebankermappings { get; set; }

    public virtual DbSet<Employeedistributormapping> Employeedistributormappings { get; set; }

    public virtual DbSet<Employeeentitymapping> Employeeentitymappings { get; set; }

    public virtual DbSet<Employeemaster> Employeemasters { get; set; }

    public virtual DbSet<Employeemasterbackup> Employeemasterbackups { get; set; }

    public virtual DbSet<Employeerolemapping> Employeerolemappings { get; set; }

    public virtual DbSet<Entitymaster> Entitymasters { get; set; }

    public virtual DbSet<Entityplatformurl> Entityplatformurls { get; set; }

    public virtual DbSet<Entityuccprefixmapping> Entityuccprefixmappings { get; set; }

    public virtual DbSet<Enummaster> Enummasters { get; set; }

    public virtual DbSet<Errorlog> Errorlogs { get; set; }

    public virtual DbSet<EsignPdfType> EsignPdfTypes { get; set; }

    public virtual DbSet<Esignadditionaldetail> Esignadditionaldetails { get; set; }

    public virtual DbSet<Esignattachmentcoordinate> Esignattachmentcoordinates { get; set; }

    public virtual DbSet<Esigncordinatemaster> Esigncordinatemasters { get; set; }

    public virtual DbSet<EsigncordinatemasterUpdate> EsigncordinatemasterUpdates { get; set; }

    public virtual DbSet<Esignpdfdetail> Esignpdfdetails { get; set; }

    public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }

    public virtual DbSet<Familyheadmapping> Familyheadmappings { get; set; }

    public virtual DbSet<Familyheadmappinglog> Familyheadmappinglogs { get; set; }

    public virtual DbSet<Familymaster> Familymasters { get; set; }

    public virtual DbSet<Familymembersmapping> Familymembersmappings { get; set; }

    public virtual DbSet<Familymembersmappinglog> Familymembersmappinglogs { get; set; }

    public virtual DbSet<Fundmaster> Fundmasters { get; set; }

    public virtual DbSet<Geofencingrequestresponse> Geofencingrequestresponses { get; set; }

    public virtual DbSet<GetPanAadharUrl> GetPanAadharUrls { get; set; }

    public virtual DbSet<IbeatsDocumentTypeMaster> IbeatsDocumentTypeMasters { get; set; }

    public virtual DbSet<IbeatsMasterMapping> IbeatsMasterMappings { get; set; }

    public virtual DbSet<IbeatsPoaGpaBpaFlagsMapping> IbeatsPoaGpaBpaFlagsMappings { get; set; }

    public virtual DbSet<IbeatsProdctMapping> IbeatsProdctMappings { get; set; }

    public virtual DbSet<IbeatsResposeMassage> IbeatsResposeMassages { get; set; }

    public virtual DbSet<Incrementalnumber> Incrementalnumbers { get; set; }

    public virtual DbSet<Kracountrycodemaster> Kracountrycodemasters { get; set; }

    public virtual DbSet<Kraoccupationmaster> Kraoccupationmasters { get; set; }

    public virtual DbSet<Krastatemaster> Krastatemasters { get; set; }

    public virtual DbSet<Krastatusmaster> Krastatusmasters { get; set; }

    public virtual DbSet<KycDetailsKra> KycDetailsKras { get; set; }

    public virtual DbSet<Kycdetailkramaster> Kycdetailkramasters { get; set; }

    public virtual DbSet<LobMaster> LobMasters { get; set; }

    public virtual DbSet<Loginattempthistory> Loginattempthistories { get; set; }

    public virtual DbSet<ManagementFee> ManagementFees { get; set; }

    public virtual DbSet<Messageoutbox> Messageoutboxes { get; set; }

    public virtual DbSet<MfTransactionPurchaseRedemption> MfTransactionPurchaseRedemptions { get; set; }

    public virtual DbSet<ModificationRejectionRemarksLog> ModificationRejectionRemarksLogs { get; set; }

    public virtual DbSet<Modificationaddressdetail> Modificationaddressdetails { get; set; }

    public virtual DbSet<Modificationbankdetail> Modificationbankdetails { get; set; }

    public virtual DbSet<Modificationdetail> Modificationdetails { get; set; }

    public virtual DbSet<Modificationdocumentdetail> Modificationdocumentdetails { get; set; }

    public virtual DbSet<Modificationemaildetail> Modificationemaildetails { get; set; }

    public virtual DbSet<Modificationmobiledetail> Modificationmobiledetails { get; set; }

    public virtual DbSet<Modificationstatuslog> Modificationstatuslogs { get; set; }

    public virtual DbSet<Neomipmsresponse> Neomipmsresponses { get; set; }

    public virtual DbSet<Nomineedocumenttypemaster> Nomineedocumenttypemasters { get; set; }

    public virtual DbSet<NotificationMaster> NotificationMasters { get; set; }

    public virtual DbSet<NotificationMessage> NotificationMessages { get; set; }

    public virtual DbSet<Nsemastersmapping> Nsemastersmappings { get; set; }

    public virtual DbSet<Nsetokenrequestresponse> Nsetokenrequestresponses { get; set; }

    public virtual DbSet<OmsAmcCodeDetailsUpload> OmsAmcCodeDetailsUploads { get; set; }

    public virtual DbSet<OmsNonBusinessDayHolidayMaster> OmsNonBusinessDayHolidayMasters { get; set; }

    public virtual DbSet<Omsactiveordermaster> Omsactiveordermasters { get; set; }

    public virtual DbSet<Omsaiffundetail> Omsaiffundetails { get; set; }

    public virtual DbSet<OmsaifpaymentapprovalequestDetail> OmsaifpaymentapprovalequestDetails { get; set; }

    public virtual DbSet<Omsaifpaymentapprovallog> Omsaifpaymentapprovallogs { get; set; }

    public virtual DbSet<Omsaifpaymentapprovalrequest> Omsaifpaymentapprovalrequests { get; set; }

    public virtual DbSet<Omsaifpaymenttransferrequest> Omsaifpaymenttransferrequests { get; set; }

    public virtual DbSet<OmsaifpaymenttransferrequestDetail> OmsaifpaymenttransferrequestDetails { get; set; }

    public virtual DbSet<Omsaifstatusdetail> Omsaifstatusdetails { get; set; }

    public virtual DbSet<Omsaifviewcartdetail> Omsaifviewcartdetails { get; set; }

    public virtual DbSet<Omsaiholdinghistory> Omsaiholdinghistories { get; set; }

    public virtual DbSet<Omsbonddashboardetail> Omsbonddashboardetails { get; set; }

    public virtual DbSet<Omsbonddatalog> Omsbonddatalogs { get; set; }

    public virtual DbSet<Omsbondinsertionlogdetail> Omsbondinsertionlogdetails { get; set; }

    public virtual DbSet<Omsbsetradeorder> Omsbsetradeorders { get; set; }

    public virtual DbSet<Omsbuysellorderdashboardatum> Omsbuysellorderdashboardata { get; set; }

    public virtual DbSet<Omscbricstraderecord> Omscbricstraderecords { get; set; }

    public virtual DbSet<Omsclientconsentdetail> Omsclientconsentdetails { get; set; }

    public virtual DbSet<Omsclientconsentresponsedetail> Omsclientconsentresponsedetails { get; set; }

    public virtual DbSet<Omsdashboard> Omsdashboards { get; set; }

    public virtual DbSet<Omsdashboardvisibility> Omsdashboardvisibilities { get; set; }

    public virtual DbSet<Omsdealerdashboardatainsertion> Omsdealerdashboardatainsertions { get; set; }

    public virtual DbSet<Omsdealsheetuploaddetail> Omsdealsheetuploaddetails { get; set; }

    public virtual DbSet<Omsdocumentapproverejectdetail> Omsdocumentapproverejectdetails { get; set; }

    public virtual DbSet<Omsdocumentdetail> Omsdocumentdetails { get; set; }

    public virtual DbSet<Omsdocumenttypemaster> Omsdocumenttypemasters { get; set; }

    public virtual DbSet<Omsdownloadreportshistory> Omsdownloadreportshistories { get; set; }

    public virtual DbSet<Omsemailsendername> Omsemailsendernames { get; set; }

    public virtual DbSet<Omsenummaster> Omsenummasters { get; set; }

    public virtual DbSet<Omsfixedincomedetail> Omsfixedincomedetails { get; set; }

    public virtual DbSet<Omsfixedincomeentityname> Omsfixedincomeentitynames { get; set; }

    public virtual DbSet<Omsfmapprovaldatarequesterdetail> Omsfmapprovaldatarequesterdetails { get; set; }

    public virtual DbSet<Omsfmapproverejectlogdetail> Omsfmapproverejectlogdetails { get; set; }

    public virtual DbSet<Omsholdingbuysellorderhistory> Omsholdingbuysellorderhistories { get; set; }

    public virtual DbSet<Omsholdingmaster> Omsholdingmasters { get; set; }

    public virtual DbSet<Omsinstrumentmaster> Omsinstrumentmasters { get; set; }

    public virtual DbSet<Omslistedeqdetail> Omslistedeqdetails { get; set; }

    public virtual DbSet<Omslistedequityapproverejectlog> Omslistedequityapproverejectlogs { get; set; }

    public virtual DbSet<Omsmfholdingdatahistory> Omsmfholdingdatahistories { get; set; }

    public virtual DbSet<Omsmfstatusdetail> Omsmfstatusdetails { get; set; }

    public virtual DbSet<Omsmutualfunddatahistory> Omsmutualfunddatahistories { get; set; }

    public virtual DbSet<Omsmutualfundetail> Omsmutualfundetails { get; set; }

    public virtual DbSet<Omsmutualfundincomedetail> Omsmutualfundincomedetails { get; set; }

    public virtual DbSet<Omsnotificationmaster> Omsnotificationmasters { get; set; }

    public virtual DbSet<Omsnsefundetail> Omsnsefundetails { get; set; }

    public virtual DbSet<Omsnseholdinghistory> Omsnseholdinghistories { get; set; }

    public virtual DbSet<Omsnsesecuritymapping> Omsnsesecuritymappings { get; set; }

    public virtual DbSet<Omsnsestatusdetail> Omsnsestatusdetails { get; set; }

    public virtual DbSet<Omsnseviewcartdetail> Omsnseviewcartdetails { get; set; }

    public virtual DbSet<Omsorderdetail> Omsorderdetails { get; set; }

    public virtual DbSet<Omspaymebtbsechecklog> Omspaymebtbsechecklogs { get; set; }

    public virtual DbSet<OmspaymentapprovalequestDetail> OmspaymentapprovalequestDetails { get; set; }

    public virtual DbSet<Omspaymentapprovallog> Omspaymentapprovallogs { get; set; }

    public virtual DbSet<Omspaymentapprovalrequest> Omspaymentapprovalrequests { get; set; }

    public virtual DbSet<Omspaymentcreateapprovallog> Omspaymentcreateapprovallogs { get; set; }

    public virtual DbSet<Omspaymentcreationlogdetail> Omspaymentcreationlogdetails { get; set; }

    public virtual DbSet<Omspaymenttransferrequest> Omspaymenttransferrequests { get; set; }

    public virtual DbSet<OmspaymenttransferrequestDetail> OmspaymenttransferrequestDetails { get; set; }

    public virtual DbSet<Omspyamnetlogsdetail> Omspyamnetlogsdetails { get; set; }

    public virtual DbSet<Omsscriptmaster> Omsscriptmasters { get; set; }

    public virtual DbSet<Omssecurityavailablequantity> Omssecurityavailablequantities { get; set; }

    public virtual DbSet<Omssecuritydetail> Omssecuritydetails { get; set; }

    public virtual DbSet<Omsstatusdetail> Omsstatusdetails { get; set; }

    public virtual DbSet<OmsstockapprovalequestDetail> OmsstockapprovalequestDetails { get; set; }

    public virtual DbSet<Omsstockapprovallog> Omsstockapprovallogs { get; set; }

    public virtual DbSet<Omsstockapprovalrequest> Omsstockapprovalrequests { get; set; }

    public virtual DbSet<Omsstockcreateapprovallog> Omsstockcreateapprovallogs { get; set; }

    public virtual DbSet<Omsstockcreationlogdetail> Omsstockcreationlogdetails { get; set; }

    public virtual DbSet<Omsstocklog> Omsstocklogs { get; set; }

    public virtual DbSet<Omsstocklogsdetail> Omsstocklogsdetails { get; set; }

    public virtual DbSet<Omsstocktransferrequest> Omsstocktransferrequests { get; set; }

    public virtual DbSet<OmsstocktransferrequestDetail> OmsstocktransferrequestDetails { get; set; }

    public virtual DbSet<Omstaxmaster> Omstaxmasters { get; set; }

    public virtual DbSet<Omstradestatusdetail> Omstradestatusdetails { get; set; }

    public virtual DbSet<Omsunlistedeqdetail> Omsunlistedeqdetails { get; set; }

    public virtual DbSet<Omsviewcartdetail> Omsviewcartdetails { get; set; }

    public virtual DbSet<Onbaddressdetail> Onbaddressdetails { get; set; }

    public virtual DbSet<Onbclientjourneydpclientid> Onbclientjourneydpclientids { get; set; }

    public virtual DbSet<Onbcurrentstatus> Onbcurrentstatuses { get; set; }

    public virtual DbSet<Onbdematdetail> Onbdematdetails { get; set; }

    public virtual DbSet<Onbfatcadetail> Onbfatcadetails { get; set; }

    public virtual DbSet<Onbformlog> Onbformlogs { get; set; }

    public virtual DbSet<Onbholderdetail> Onbholderdetails { get; set; }

    public virtual DbSet<Onbholidaymaster> Onbholidaymasters { get; set; }

    public virtual DbSet<OnbinvAmlandPepdocumentdetail> OnbinvAmlandPepdocumentdetails { get; set; }

    public virtual DbSet<Onbinvbarcodedetail> Onbinvbarcodedetails { get; set; }

    public virtual DbSet<Onbinvdocumentdetail> Onbinvdocumentdetails { get; set; }

    public virtual DbSet<Onbinvdpnumberdetail> Onbinvdpnumberdetails { get; set; }

    public virtual DbSet<Onbinvemailattachmentconsent> Onbinvemailattachmentconsents { get; set; }

    public virtual DbSet<Onbinvestorbankdetail> Onbinvestorbankdetails { get; set; }

    public virtual DbSet<Onbinvestorbankdetailsapprovallog> Onbinvestorbankdetailsapprovallogs { get; set; }

    public virtual DbSet<Onbinvestordetail> Onbinvestordetails { get; set; }

    public virtual DbSet<Onbinvestordocumentapprovallog> Onbinvestordocumentapprovallogs { get; set; }

    public virtual DbSet<Onbinvestoronholddetail> Onbinvestoronholddetails { get; set; }

    public virtual DbSet<Onbinvfamilymapping> Onbinvfamilymappings { get; set; }

    public virtual DbSet<Onbinvhufcoparcener> Onbinvhufcoparceners { get; set; }

    public virtual DbSet<Onbinvinvestmentdetail> Onbinvinvestmentdetails { get; set; }

    public virtual DbSet<Onbinvriskprofileanswerdetail> Onbinvriskprofileanswerdetails { get; set; }

    public virtual DbSet<Onbinvsecuritiesinvestmentlimit> Onbinvsecuritiesinvestmentlimits { get; set; }

    public virtual DbSet<Onbinvsecuritiesrestriction> Onbinvsecuritiesrestrictions { get; set; }

    public virtual DbSet<Onbinvtradingdetail> Onbinvtradingdetails { get; set; }

    public virtual DbSet<Onbinvtradingsegmentselection> Onbinvtradingsegmentselections { get; set; }

    public virtual DbSet<Onbnomineedetail> Onbnomineedetails { get; set; }

    public virtual DbSet<OnbnoninvIpsdetail> OnbnoninvIpsdetails { get; set; }

    public virtual DbSet<Onbnoninvcontactdetail> Onbnoninvcontactdetails { get; set; }

    public virtual DbSet<Onbnoninvcontrollingperson> Onbnoninvcontrollingpeople { get; set; }

    public virtual DbSet<Onbnoninvfatcadetail> Onbnoninvfatcadetails { get; set; }

    public virtual DbSet<Onbnoninvinvestmentdetail> Onbnoninvinvestmentdetails { get; set; }

    public virtual DbSet<Onbnoninvotherdetail> Onbnoninvotherdetails { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<OrderEntry> OrderEntries { get; set; }

    public virtual DbSet<Panstatusmaster> Panstatusmasters { get; set; }

    public virtual DbSet<Partnerentitymaster> Partnerentitymasters { get; set; }

    public virtual DbSet<PdffixedImage> PdffixedImages { get; set; }

    public virtual DbSet<Pennydropverifydatarequestresponse> Pennydropverifydatarequestresponses { get; set; }

    public virtual DbSet<Pincodemaster> Pincodemasters { get; set; }

    public virtual DbSet<Portfolioholding> Portfolioholdings { get; set; }

    public virtual DbSet<ProductEsignPdfMapping> ProductEsignPdfMappings { get; set; }

    public virtual DbSet<ProductTatmaster> ProductTatmasters { get; set; }

    public virtual DbSet<Productapivendormapping> Productapivendormappings { get; set; }

    public virtual DbSet<Productmaster> Productmasters { get; set; }

    public virtual DbSet<Qctracker> Qctrackers { get; set; }

    public virtual DbSet<Readyfortradeattachment> Readyfortradeattachments { get; set; }

    public virtual DbSet<Readyfortradestatus> Readyfortradestatuses { get; set; }

    public virtual DbSet<Riskprofilequestionmaster> Riskprofilequestionmasters { get; set; }

    public virtual DbSet<Riskratingrequestresponse> Riskratingrequestresponses { get; set; }

    public virtual DbSet<Rolemaster> Rolemasters { get; set; }

    public virtual DbSet<RunningsequenceforKyc> RunningsequenceforKycs { get; set; }

    public virtual DbSet<SchedulerApiLog> SchedulerApiLogs { get; set; }

    public virtual DbSet<SchedulerServiceErrorLog> SchedulerServiceErrorLogs { get; set; }

    public virtual DbSet<SignzyPanVerifyDataRequest> SignzyPanVerifyDataRequests { get; set; }

    public virtual DbSet<SignzyPanVerifyDatum> SignzyPanVerifyData { get; set; }

    public virtual DbSet<Signzyesignattachmentcoordinate> Signzyesignattachmentcoordinates { get; set; }

    public virtual DbSet<Signzyesigncallbackwebhook> Signzyesigncallbackwebhooks { get; set; }

    public virtual DbSet<Signzyesigncoordinatesmaster> Signzyesigncoordinatesmasters { get; set; }

    public virtual DbSet<Signzyesignestamppaper> Signzyesignestamppapers { get; set; }

    public virtual DbSet<Signzyesignrequestresponse> Signzyesignrequestresponses { get; set; }

    public virtual DbSet<Signzyesignsignercallbackwebhook> Signzyesignsignercallbackwebhooks { get; set; }

    public virtual DbSet<Signzyidentityextractionrequestresponse> Signzyidentityextractionrequestresponses { get; set; }

    public virtual DbSet<Signzyidentityrequestresponse> Signzyidentityrequestresponses { get; set; }

    public virtual DbSet<Signzynamematchrequestresponse> Signzynamematchrequestresponses { get; set; }

    public virtual DbSet<Signzypanstatusresponse> Signzypanstatusresponses { get; set; }

    public virtual DbSet<Signzyvideokycrequestresponse> Signzyvideokycrequestresponses { get; set; }

    public virtual DbSet<Signzyvideokycresponsewebhook> Signzyvideokycresponsewebhooks { get; set; }

    public virtual DbSet<Signzyvideokycresponsewebhookresponse> Signzyvideokycresponsewebhookresponses { get; set; }

    public virtual DbSet<Slog> Slogs { get; set; }

    public virtual DbSet<SmsRequestDatum> SmsRequestData { get; set; }

    public virtual DbSet<SmsResponseDatum> SmsResponseData { get; set; }

    public virtual DbSet<Statemaster> Statemasters { get; set; }

    public virtual DbSet<Sublobfamilymapping> Sublobfamilymappings { get; set; }

    public virtual DbSet<Trackwizzmastermapping> Trackwizzmastermappings { get; set; }

    public virtual DbSet<Tradingdefaultvaluemaster> Tradingdefaultvaluemasters { get; set; }

    public virtual DbSet<Userotpdetail> Userotpdetails { get; set; }

    public virtual DbSet<Validatevideokyc> Validatevideokycs { get; set; }

    public virtual DbSet<Videokycapprovaldetail> Videokycapprovaldetails { get; set; }

    public virtual DbSet<Viewcarddataformfhistory> Viewcarddataformfhistories { get; set; }

    public virtual DbSet<VwIbeatsWboaddr> VwIbeatsWboaddrs { get; set; }

    public virtual DbSet<VwIbeatsWbocdsl> VwIbeatsWbocdsls { get; set; }

    public virtual DbSet<VwIbeatsWkycRequest> VwIbeatsWkycRequests { get; set; }

    public virtual DbSet<VwIbeatsWpartyCbe> VwIbeatsWpartyCbes { get; set; }

    public virtual DbSet<VwIbeatsWpartyContact> VwIbeatsWpartyContacts { get; set; }

    public virtual DbSet<VwIbeatsWpartyDpauthSignLob> VwIbeatsWpartyDpauthSignLobs { get; set; }

    public virtual DbSet<VwIbeatsWpartyKyc> VwIbeatsWpartyKycs { get; set; }

    public virtual DbSet<VwIbeatsWpartyKycDoc> VwIbeatsWpartyKycDocs { get; set; }

    public virtual DbSet<VwIbeatsWpartyMaster> VwIbeatsWpartyMasters { get; set; }

    public virtual DbSet<VwIbeatsWpartyPoa> VwIbeatsWpartyPoas { get; set; }

    public virtual DbSet<VwIbeatsWpartySubBank> VwIbeatsWpartySubBanks { get; set; }

    public virtual DbSet<VwIbeatsWpartyTrdNom> VwIbeatsWpartyTrdNoms { get; set; }

    public virtual DbSet<VwInvestorDetail> VwInvestorDetails { get; set; }

    public virtual DbSet<VwManagementMi> VwManagementMis { get; set; }

    public virtual DbSet<VwMonthlyMisEvaluate> VwMonthlyMisEvaluates { get; set; }

    public virtual DbSet<VwStageMi> VwStageMis { get; set; }

    public virtual DbSet<Wealthspectclientmasterdatum> Wealthspectclientmasterdata { get; set; }

    public virtual DbSet<Wealthspectrumaccountactivationlog> Wealthspectrumaccountactivationlogs { get; set; }

    public virtual DbSet<Wealthspectrumaccounttype> Wealthspectrumaccounttypes { get; set; }

    public virtual DbSet<Wealthspectrumcientdeleteapilog> Wealthspectrumcientdeleteapilogs { get; set; }

    public virtual DbSet<Wealthspectrumclientid> Wealthspectrumclientids { get; set; }

    public virtual DbSet<Wealthspectrumclientmasterdatum> Wealthspectrumclientmasterdata { get; set; }

    public virtual DbSet<Wealthspectrumgroupmapping> Wealthspectrumgroupmappings { get; set; }

    public virtual DbSet<Wealthspectrummappingmaster> Wealthspectrummappingmasters { get; set; }

    public virtual DbSet<Wealthspectrumrefcode1mapping> Wealthspectrumrefcode1mappings { get; set; }

    public virtual DbSet<Wealthspectrumschemenamemapping> Wealthspectrumschemenamemappings { get; set; }

    public virtual DbSet<Wealthspectrumupdateclientapilog> Wealthspectrumupdateclientapilogs { get; set; }

    public virtual DbSet<Wealthspectrumupdateholdersapilog> Wealthspectrumupdateholdersapilogs { get; set; }

    public virtual DbSet<Wealthspectrumupdatenomineesapilog> Wealthspectrumupdatenomineesapilogs { get; set; }

    public virtual DbSet<WhatsappResponseLog> WhatsappResponseLogs { get; set; }

    public virtual DbSet<WsApiurl> WsApiurls { get; set; }

    public virtual DbSet<WsBankdetailsdatum> WsBankdetailsdata { get; set; }

    public virtual DbSet<WsBankdpdetailsdatum> WsBankdpdetailsdata { get; set; }

    public virtual DbSet<WsBankercsomappingdatum> WsBankercsomappingdata { get; set; }

    public virtual DbSet<WsBseDataurl> WsBseDataurls { get; set; }

    public virtual DbSet<WsBseschememaster> WsBseschememasters { get; set; }

    public virtual DbSet<WsBseuccstarformat> WsBseuccstarformats { get; set; }

    public virtual DbSet<WsBseuccstarformatTest> WsBseuccstarformatTests { get; set; }

    public virtual DbSet<WsClientasset> WsClientassets { get; set; }

    public virtual DbSet<WsClientbankermappingdatum> WsClientbankermappingdata { get; set; }

    public virtual DbSet<WsClientkradetail> WsClientkradetails { get; set; }

    public virtual DbSet<WsClientmasterdatum> WsClientmasterdata { get; set; }

    public virtual DbSet<WsClientmasteruploaddatum> WsClientmasteruploaddata { get; set; }

    public virtual DbSet<WsClientrmcsomapping> WsClientrmcsomappings { get; set; }

    public virtual DbSet<WsClientuploadDatum> WsClientuploadData { get; set; }

    public virtual DbSet<WsClientuploadmasterdataTest> WsClientuploadmasterdataTests { get; set; }

    public virtual DbSet<WsClientuploadmasterdatum> WsClientuploadmasterdata { get; set; }

    public virtual DbSet<WsDpdetailsdatum> WsDpdetailsdata { get; set; }

    public virtual DbSet<WsEmployeemaster> WsEmployeemasters { get; set; }

    public virtual DbSet<WsEmployeemasterdatum> WsEmployeemasterdata { get; set; }

    public virtual DbSet<WsEntitybroker> WsEntitybrokers { get; set; }

    public virtual DbSet<WsEntitynamemappingdatum> WsEntitynamemappingdata { get; set; }

    public virtual DbSet<WsHeldawayassetdataTest> WsHeldawayassetdataTests { get; set; }

    public virtual DbSet<WsHeldawayassetdatum> WsHeldawayassetdata { get; set; }

    public virtual DbSet<WsNewclientmasterdataTest> WsNewclientmasterdataTests { get; set; }

    public virtual DbSet<WsOrderpushdatum> WsOrderpushdata { get; set; }

    public virtual DbSet<WsOrderpushdetailsdatum> WsOrderpushdetailsdata { get; set; }

    public virtual DbSet<WsPortfolioholdingdatum> WsPortfolioholdingdata { get; set; }

    public virtual DbSet<WsPricedumpdatum> WsPricedumpdata { get; set; }

    public virtual DbSet<WsSecuritydetail> WsSecuritydetails { get; set; }

    public virtual DbSet<WsSecuritydetails1> WsSecuritydetails1s { get; set; }

    public virtual DbSet<WsSecuritydetails17122024> WsSecuritydetails17122024s { get; set; }

    public virtual DbSet<WsSecuritydetailsUpdated> WsSecuritydetailsUpdateds { get; set; }

    public virtual DbSet<WsStagingBankaccountdetail> WsStagingBankaccountdetails { get; set; }

    public virtual DbSet<WsStagingBankaccounttypesdatum> WsStagingBankaccounttypesdata { get; set; }

    public virtual DbSet<WsStagingBankdetailsdatum> WsStagingBankdetailsdata { get; set; }

    public virtual DbSet<WsStagingBankercsomappingdatum> WsStagingBankercsomappingdata { get; set; }

    public virtual DbSet<WsStagingBseschememaster> WsStagingBseschememasters { get; set; }

    public virtual DbSet<WsStagingBseuccstarformat> WsStagingBseuccstarformats { get; set; }

    public virtual DbSet<WsStagingClientasset> WsStagingClientassets { get; set; }

    public virtual DbSet<WsStagingClientbankermappingdatum> WsStagingClientbankermappingdata { get; set; }

    public virtual DbSet<WsStagingClientkradetail> WsStagingClientkradetails { get; set; }

    public virtual DbSet<WsStagingClientmasterdatum> WsStagingClientmasterdata { get; set; }

    public virtual DbSet<WsStagingClientuploadmasterdatum> WsStagingClientuploadmasterdata { get; set; }

    public virtual DbSet<WsStagingCustodyaccountdetail> WsStagingCustodyaccountdetails { get; set; }

    public virtual DbSet<WsStagingDpdetailsdatum> WsStagingDpdetailsdata { get; set; }

    public virtual DbSet<WsStagingEmployeemasterdatum> WsStagingEmployeemasterdata { get; set; }

    public virtual DbSet<WsStagingHeldawayassetdatum> WsStagingHeldawayassetdata { get; set; }

    public virtual DbSet<WsStagingMffoliodetail> WsStagingMffoliodetails { get; set; }

    public virtual DbSet<WsStagingPortfolioholdingdatum> WsStagingPortfolioholdingdata { get; set; }

    public virtual DbSet<WsStagingSecuritydetail> WsStagingSecuritydetails { get; set; }

    public virtual DbSet<WsTradedetail> WsTradedetails { get; set; }

    public virtual DbSet<WserrorLog> WserrorLogs { get; set; }

    public virtual DbSet<Wsmfaccesslevelmaster> Wsmfaccesslevelmasters { get; set; }

    public virtual DbSet<Wsmfaccounttype> Wsmfaccounttypes { get; set; }

    public virtual DbSet<Wsmfclientholding> Wsmfclientholdings { get; set; }

    public virtual DbSet<Wsmfclientoccupationcode> Wsmfclientoccupationcodes { get; set; }

    public virtual DbSet<Wsmfclienttaxstatus> Wsmfclienttaxstatuses { get; set; }

    public virtual DbSet<Wsmfcommunicationmode> Wsmfcommunicationmodes { get; set; }

    public virtual DbSet<Wsmfcountrycode> Wsmfcountrycodes { get; set; }

    public virtual DbSet<Wsmfemailormobileselfdeclaration> Wsmfemailormobileselfdeclarations { get; set; }

    public virtual DbSet<Wsmfpanexemptcategory> Wsmfpanexemptcategories { get; set; }

    public virtual DbSet<Wsmfstatemaster> Wsmfstatemasters { get; set; }

    public virtual DbSet<Wsmfterminalidmaster> Wsmfterminalidmasters { get; set; }

    public virtual DbSet<Wsorderdetail> Wsorderdetails { get; set; }

    public virtual DbSet<Wsperformancebysecurity> Wsperformancebysecurities { get; set; }

    public virtual DbSet<Wspjclientmasterdatum> Wspjclientmasterdata { get; set; }

    public virtual DbSet<Wspjclientportfoliodatum> Wspjclientportfoliodata { get; set; }

    public virtual DbSet<Wspjclientportfoliosecurity> Wspjclientportfoliosecurities { get; set; }

    public virtual DbSet<Wspjperformancesummary> Wspjperformancesummaries { get; set; }

    public virtual DbSet<WspjperformancesummaryBenchmark> WspjperformancesummaryBenchmarks { get; set; }

    public virtual DbSet<Wsportfolioholding> Wsportfolioholdings { get; set; }

    public virtual DbSet<Wsportfolioperformance> Wsportfolioperformances { get; set; }

    public virtual DbSet<Wsqueryfile> Wsqueryfiles { get; set; }

    public virtual DbSet<Wsstagingbseuccstarformatdatum> Wsstagingbseuccstarformatdata { get; set; }

    public virtual DbSet<Wstoken> Wstokens { get; set; }

    public virtual DbSet<Wsusermaster> Wsusermasters { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseMySql("server=neoniva-stage.cdu8w0e267x5.ap-south-1.rds.amazonaws.com;port=3306;user=Mayuresh;password=Rvnjssss5320@;database=neo_nexus_uat;ConvertZeroDateTime=True", Microsoft.EntityFrameworkCore.ServerVersion.Parse("8.0.35-mysql"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Amlscreeningdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("amlscreeningdetails");

            entity.Property(e => e.ConfirmedHits).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HitsDetected).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OverallStatus).HasMaxLength(100);
            entity.Property(e => e.Pan).HasMaxLength(10);
            entity.Property(e => e.ReportFileName).HasMaxLength(500);
            entity.Property(e => e.ReportFilePath).HasMaxLength(500);
            entity.Property(e => e.RequestBody).HasColumnType("text");
            entity.Property(e => e.RequestId).HasMaxLength(100);
            entity.Property(e => e.ValidationCode).HasMaxLength(50);
            entity.Property(e => e.ValidationDescription).HasMaxLength(500);
            entity.Property(e => e.ValidationOutcome).HasMaxLength(100);
        });

        modelBuilder.Entity<Amlscreenningrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("amlscreenningrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amlalertcount).HasColumnName("amlalertcount");
            entity.Property(e => e.Amlmatch)
                .HasMaxLength(100)
                .HasColumnName("amlmatch");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Link)
                .HasColumnType("text")
                .HasColumnName("link");
            entity.Property(e => e.Rejectioncode)
                .HasMaxLength(20)
                .HasColumnName("rejectioncode");
            entity.Property(e => e.Rejectionmessage)
                .HasColumnType("text")
                .HasColumnName("rejectionmessage");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requestid)
                .HasMaxLength(200)
                .HasColumnName("requestid");
            entity.Property(e => e.Requesttimestemp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestemp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responseid)
                .HasMaxLength(200)
                .HasColumnName("responseid");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
        });

        modelBuilder.Entity<Apivendor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("apivendor");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Apiname)
                .HasMaxLength(500)
                .HasColumnName("APIName");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EntityId).HasColumnName("EntityID");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("modifiedDate");
            entity.Property(e => e.Modifiedby).HasColumnName("modifiedby");
            entity.Property(e => e.S1).HasMaxLength(500);
            entity.Property(e => e.S2)
                .HasMaxLength(500)
                .HasColumnName("s2");
            entity.Property(e => e.S3)
                .HasMaxLength(500)
                .HasColumnName("s3");
            entity.Property(e => e.S4)
                .HasMaxLength(500)
                .HasColumnName("s4");
            entity.Property(e => e.S5)
                .HasMaxLength(500)
                .HasColumnName("s5");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .HasColumnName("status");
            entity.Property(e => e.VendorName)
                .HasMaxLength(500)
                .HasColumnName("Vendor_Name");
        });

        modelBuilder.Entity<Apivendormaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("apivendormaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.VendorName).HasMaxLength(50);
        });

        modelBuilder.Entity<Appconfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("appconfig");

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(500);
        });

        modelBuilder.Entity<Bankbranchmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bankbranchmaster");

            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.BranchName).HasMaxLength(500);
            entity.Property(e => e.CityName).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(500)
                .HasColumnName("IFSCCode");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Micrcode)
                .HasMaxLength(500)
                .HasColumnName("MICRCode");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Bankermaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bankermaster");

            entity.Property(e => e.AcquiringRmid).HasColumnName("AcquiringRMId");
            entity.Property(e => e.AcquiringRmname)
                .HasMaxLength(50)
                .HasColumnName("AcquiringRMName");
            entity.Property(e => e.AllAif)
                .HasMaxLength(50)
                .HasColumnName("AllAIF");
            entity.Property(e => e.AllMf)
                .HasMaxLength(50)
                .HasColumnName("AllMF");
            entity.Property(e => e.AllPms)
                .HasMaxLength(50)
                .HasColumnName("AllPMS");
            entity.Property(e => e.AmfibusinessModelId)
                .HasMaxLength(50)
                .HasColumnName("AMFIBusinessModelId");
            entity.Property(e => e.AmfipassedOnDate)
                .HasMaxLength(50)
                .HasColumnName("AMFIPassedOnDate");
            entity.Property(e => e.AmfiregistartionNo)
                .HasMaxLength(50)
                .HasColumnName("AMFIRegistartionNo");
            entity.Property(e => e.AmfivalidUpto)
                .HasMaxLength(50)
                .HasColumnName("AMFIValidUpto");
            entity.Property(e => e.AnyAwardsAchievements).HasMaxLength(50);
            entity.Property(e => e.Aumaif)
                .HasMaxLength(50)
                .HasColumnName("AUMAIF");
            entity.Property(e => e.Aumdebt)
                .HasMaxLength(50)
                .HasColumnName("AUMDebt");
            entity.Property(e => e.Aumequity)
                .HasMaxLength(50)
                .HasColumnName("AUMEquity");
            entity.Property(e => e.Aumliquid)
                .HasMaxLength(50)
                .HasColumnName("AUMLiquid");
            entity.Property(e => e.Aumpms)
                .HasMaxLength(50)
                .HasColumnName("AUMPMS");
            entity.Property(e => e.AumraisedOver100IncludingHighNetworth)
                .HasMaxLength(50)
                .HasColumnName("AUMRaisedOver100IncludingHighNetworth");
            entity.Property(e => e.ClientProfileld).HasMaxLength(50);
            entity.Property(e => e.ClientTypeId).HasMaxLength(50);
            entity.Property(e => e.ClientwhatsappConsent).HasMaxLength(50);
            entity.Property(e => e.CommissionReceivedOver50lacsFromSingleMf)
                .HasMaxLength(50)
                .HasColumnName("CommissionReceivedOver50lacsFromSingleMF");
            entity.Property(e => e.CommissionReceivedover1CrPerAnnum).HasMaxLength(50);
            entity.Property(e => e.Cpid).HasColumnName("CPId");
            entity.Property(e => e.DateofIncorporation).HasMaxLength(50);
            entity.Property(e => e.Declaration).HasMaxLength(50);
            entity.Property(e => e.DistWhatsappConsent).HasMaxLength(50);
            entity.Property(e => e.Domain)
                .HasMaxLength(50)
                .HasColumnName("DOMAIN");
            entity.Property(e => e.EmailId).HasMaxLength(50);
            entity.Property(e => e.EmpanelmentDate).HasMaxLength(50);
            entity.Property(e => e.FacebookId).HasMaxLength(50);
            entity.Property(e => e.FaxNo).HasMaxLength(50);
            entity.Property(e => e.FlavourForElss)
                .HasMaxLength(50)
                .HasColumnName("FlavourForELSS");
            entity.Property(e => e.GroupId).HasMaxLength(50);
            entity.Property(e => e.Gstno)
                .HasMaxLength(50)
                .HasColumnName("GSTNo");
            entity.Property(e => e.GuardianSalutation).HasMaxLength(50);
            entity.Property(e => e.IfEquityCompanyName).HasMaxLength(50);
            entity.Property(e => e.IfEquityTotalExperience).HasMaxLength(50);
            entity.Property(e => e.IfInsuranceCompanyName).HasMaxLength(50);
            entity.Property(e => e.IfOtherSellingExperience).HasMaxLength(50);
            entity.Property(e => e.IfotherDistributorType).HasMaxLength(50);
            entity.Property(e => e.IndustryClassificationId).HasMaxLength(50);
            entity.Property(e => e.InstagramId).HasMaxLength(50);
            entity.Property(e => e.InvoiceEmailId).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsInternal).HasMaxLength(50);
            entity.Property(e => e.IsPreOnBoardingCallRequired).HasMaxLength(50);
            entity.Property(e => e.IsSystematicInvestmentAllowed).HasMaxLength(50);
            entity.Property(e => e.KeyRelationship).HasMaxLength(50);
            entity.Property(e => e.LevelId).HasMaxLength(50);
            entity.Property(e => e.LinkedinId).HasMaxLength(50);
            entity.Property(e => e.MisemailId)
                .HasMaxLength(50)
                .HasColumnName("MISEmailId");
            entity.Property(e => e.Mobile1).HasMaxLength(50);
            entity.Property(e => e.Mobile2).HasMaxLength(50);
            entity.Property(e => e.ModelId).HasMaxLength(50);
            entity.Property(e => e.MultiplePointPresence).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.NomineeAddressLine1).HasMaxLength(50);
            entity.Property(e => e.NomineeAddressLine2).HasMaxLength(50);
            entity.Property(e => e.NomineeAddressLine3).HasMaxLength(50);
            entity.Property(e => e.NomineeCityId).HasMaxLength(50);
            entity.Property(e => e.NomineeDob)
                .HasMaxLength(50)
                .HasColumnName("NomineeDOB");
            entity.Property(e => e.NomineeFirstName).HasMaxLength(50);
            entity.Property(e => e.NomineeGuardianFirstName).HasMaxLength(50);
            entity.Property(e => e.NomineeGuardianLastName).HasMaxLength(50);
            entity.Property(e => e.NomineeGuardianMiddleName).HasMaxLength(50);
            entity.Property(e => e.NomineeLastName).HasMaxLength(50);
            entity.Property(e => e.NomineeMiddleName).HasMaxLength(50);
            entity.Property(e => e.NomineePin)
                .HasMaxLength(50)
                .HasColumnName("NomineePIN");
            entity.Property(e => e.NomineeRelationshipId).HasMaxLength(50);
            entity.Property(e => e.NomineeSalutation).HasMaxLength(50);
            entity.Property(e => e.NomineestateId).HasMaxLength(50);
            entity.Property(e => e.OfficeNo).HasMaxLength(50);
            entity.Property(e => e.Pan)
                .HasMaxLength(50)
                .HasColumnName("PAN");
            entity.Property(e => e.PriorityId).HasMaxLength(50);
            entity.Property(e => e.Product).HasMaxLength(50);
            entity.Property(e => e.Salutation).HasMaxLength(50);
            entity.Property(e => e.SellingExperience).HasMaxLength(50);
            entity.Property(e => e.ServicingRmid).HasColumnName("servicingRMId");
            entity.Property(e => e.ShortName).HasMaxLength(50);
            entity.Property(e => e.SoaemailId)
                .HasMaxLength(50)
                .HasColumnName("SOAEmailId");
            entity.Property(e => e.TwitterId).HasMaxLength(50);
        });

        modelBuilder.Entity<Bankerpartnerentitymapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bankerpartnerentitymapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Bankmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bankmaster");

            entity.Property(e => e.BankName).HasMaxLength(200);
            entity.Property(e => e.Cpid).HasColumnName("CPID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Benchmark>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("benchmark");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Bmname)
                .HasMaxLength(255)
                .HasColumnName("bmname");
            entity.Property(e => e.Bmrorm)
                .HasPrecision(18, 6)
                .HasColumnName("bmrorm");
            entity.Property(e => e.Bmrormabs)
                .HasPrecision(18, 6)
                .HasColumnName("bmrormabs");
            entity.Property(e => e.Bmseq).HasColumnName("bmseq");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.Todate)
                .HasColumnType("timestamp")
                .HasColumnName("todate");
        });

        modelBuilder.Entity<Bseclassmastersmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bseclassmastersmapping");

            entity.Property(e => e.BseCode).HasMaxLength(50);
            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<Bsestarmastersmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bsestarmastersmapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.StarCode).HasMaxLength(50);
        });

        modelBuilder.Entity<Bseuccmastersmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("bseuccmastersmapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.UccCode).HasMaxLength(50);
        });

        modelBuilder.Entity<CapitalTransaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("capitalTransaction");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AssetClass)
                .HasMaxLength(255)
                .HasColumnName("assetClass");
            entity.Property(e => e.CapitalFlow)
                .HasMaxLength(255)
                .HasColumnName("capitalFlow");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(255)
                .HasColumnName("clientCode");
            entity.Property(e => e.ClientId).HasColumnName("clientId");
            entity.Property(e => e.ClientName)
                .HasMaxLength(255)
                .HasColumnName("clientName");
            entity.Property(e => e.ClientRef1)
                .HasMaxLength(255)
                .HasColumnName("clientRef1");
            entity.Property(e => e.ClientRef2)
                .HasMaxLength(255)
                .HasColumnName("clientRef2");
            entity.Property(e => e.ClientRef3)
                .HasMaxLength(255)
                .HasColumnName("clientRef3");
            entity.Property(e => e.ClientRef4)
                .HasMaxLength(255)
                .HasColumnName("clientRef4");
            entity.Property(e => e.Credit)
                .HasPrecision(18, 2)
                .HasColumnName("credit");
            entity.Property(e => e.Debit)
                .HasPrecision(18, 2)
                .HasColumnName("debit");
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
            entity.Property(e => e.SchemeName)
                .HasMaxLength(255)
                .HasColumnName("schemeName");
            entity.Property(e => e.Scope)
                .HasMaxLength(255)
                .HasColumnName("scope");
            entity.Property(e => e.ScopeId)
                .HasMaxLength(255)
                .HasColumnName("scopeId");
            entity.Property(e => e.Security)
                .HasMaxLength(255)
                .HasColumnName("security");
            entity.Property(e => e.SecurityDescription)
                .HasMaxLength(255)
                .HasColumnName("securityDescription");
            entity.Property(e => e.SecurityType)
                .HasMaxLength(255)
                .HasColumnName("securityType");
            entity.Property(e => e.ToDate)
                .HasColumnType("datetime")
                .HasColumnName("toDate");
            entity.Property(e => e.TransactionDate).HasColumnName("transactionDate");
            entity.Property(e => e.TransactionDescription)
                .HasMaxLength(255)
                .HasColumnName("transactionDescription");
            entity.Property(e => e.TransactionRefId).HasColumnName("transactionRefId");
            entity.Property(e => e.TransactionType)
                .HasMaxLength(255)
                .HasColumnName("transactionType");
        });

        modelBuilder.Entity<Cdsladditionaldetailsanswermapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cdsladditionaldetailsanswermapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.CdslCode).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.SystemAnswer).HasMaxLength(200);
        });

        modelBuilder.Entity<Cdslmastersmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cdslmastersmapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.CdslCode).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<Cdsluploadstatuslog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cdsluploadstatuslog");

            entity.Property(e => e.BaseFileContent).HasColumnType("mediumtext");
            entity.Property(e => e.BatchNumber).HasMaxLength(10);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Response).HasMaxLength(5000);
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<Citymaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("citymaster");

            entity.Property(e => e.CityName).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<CkycApplicantDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ckycApplicantDetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.CityId)
                .HasMaxLength(200)
                .HasColumnName("cityID");
            entity.Property(e => e.Ckycnumber)
                .HasMaxLength(200)
                .HasColumnName("ckycnumber");
            entity.Property(e => e.Dob)
                .HasMaxLength(30)
                .HasColumnName("dob");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .HasColumnName("email");
            entity.Property(e => e.FatherFirstName)
                .HasMaxLength(200)
                .HasColumnName("fatherFirstName");
            entity.Property(e => e.FatherLastName)
                .HasMaxLength(200)
                .HasColumnName("fatherLastName");
            entity.Property(e => e.FatherMiddleName)
                .HasMaxLength(200)
                .HasColumnName("fatherMiddleName");
            entity.Property(e => e.FatherSalutationId).HasColumnName("fatherSalutationId");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("firstName");
            entity.Property(e => e.GenderId).HasColumnName("genderId");
            entity.Property(e => e.HolderrankId).HasColumnName("holderrankId");
            entity.Property(e => e.InvId).HasColumnName("invId");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.LastName)
                .HasMaxLength(200)
                .HasColumnName("lastName");
            entity.Property(e => e.MaidenFirstName)
                .HasMaxLength(200)
                .HasColumnName("maidenFirstName");
            entity.Property(e => e.MaidenLastName)
                .HasMaxLength(200)
                .HasColumnName("maidenLastName");
            entity.Property(e => e.MaidenMiddleName)
                .HasMaxLength(200)
                .HasColumnName("maidenMiddleName");
            entity.Property(e => e.MaidenSalutationId).HasColumnName("maidenSalutationId");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(200)
                .HasColumnName("middleName");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .HasColumnName("mobile");
            entity.Property(e => e.MotherFirstName)
                .HasMaxLength(200)
                .HasColumnName("motherFirstName");
            entity.Property(e => e.MotherLastName)
                .HasMaxLength(200)
                .HasColumnName("motherLastName");
            entity.Property(e => e.MotherMiddleName)
                .HasMaxLength(200)
                .HasColumnName("motherMiddleName");
            entity.Property(e => e.MotherSalutationid).HasColumnName("motherSalutationid");
            entity.Property(e => e.Pan)
                .HasMaxLength(20)
                .HasColumnName("pan");
            entity.Property(e => e.Pin)
                .HasMaxLength(10)
                .HasColumnName("pin");
            entity.Property(e => e.SalutationId).HasColumnName("salutationId");
        });

        modelBuilder.Entity<Ckyccodesmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ckyccodesmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.Documentname)
                .HasMaxLength(500)
                .HasColumnName("documentname");
            entity.Property(e => e.Imagecode).HasColumnName("imagecode");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
        });

        modelBuilder.Entity<Ckycdownloadresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ckycdownloadresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.InvId).HasColumnName("invId");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
        });

        modelBuilder.Entity<Ckycsearchdatarequestdataresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ckycsearchdatarequestdataresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Ckycnumber)
                .HasColumnType("text")
                .HasColumnName("ckycnumber");
            entity.Property(e => e.Fullname)
                .HasMaxLength(300)
                .HasColumnName("fullname");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.InvId).HasColumnName("invId");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
        });

        modelBuilder.Entity<Classdpmastermapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("classdpmastermapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.ClassCode).HasMaxLength(50);
        });

        modelBuilder.Entity<ClientConsent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ClientConsent");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Consent).HasMaxLength(50);
            entity.Property(e => e.ConsentDate).HasColumnType("datetime");
            entity.Property(e => e.EmailId).HasMaxLength(100);
            entity.Property(e => e.EmailOtp)
                .HasMaxLength(10)
                .HasColumnName("EmailOTP");
            entity.Property(e => e.EmailRequest).HasColumnType("text");
            entity.Property(e => e.EmailResponse).HasColumnType("text");
            entity.Property(e => e.EmailStatusCode).HasMaxLength(100);
            entity.Property(e => e.Fullname).HasMaxLength(100);
            entity.Property(e => e.Guid).HasMaxLength(500);
            entity.Property(e => e.IsEmailOtpverified).HasColumnName("IsEmailOTPVerified");
            entity.Property(e => e.IsEmailSent).HasMaxLength(10);
            entity.Property(e => e.IsMobileOtpverified).HasColumnName("IsMobileOTPVerified");
            entity.Property(e => e.IsSmsSent).HasMaxLength(10);
            entity.Property(e => e.MobileNumber).HasMaxLength(15);
            entity.Property(e => e.MobileOtp)
                .HasMaxLength(10)
                .HasColumnName("MobileOTP");
            entity.Property(e => e.OtpSendDate)
                .HasColumnType("datetime")
                .HasColumnName("OTP_Send_Date");
            entity.Property(e => e.OtpVerifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("OTP_Verified_Date");
            entity.Property(e => e.ShortUrl)
                .HasMaxLength(500)
                .HasColumnName("ShortURL");
            entity.Property(e => e.SmsRequest).HasColumnType("text");
            entity.Property(e => e.SmsResponse).HasColumnType("text");
            entity.Property(e => e.SmsStatusCode).HasMaxLength(10);
        });

        modelBuilder.Entity<Clientjourneybankdetailsmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientjourneybankdetailsmapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Clientmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientmaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MiddleName).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pan)
                .HasMaxLength(255)
                .HasColumnName("PAN");
        });

        modelBuilder.Entity<Clientmasteraumdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientmasteraumdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accountclosuredate).HasColumnName("accountclosuredate");
            entity.Property(e => e.Accreditedinvestor)
                .HasMaxLength(100)
                .HasColumnName("accreditedinvestor");
            entity.Property(e => e.Agent)
                .HasMaxLength(100)
                .HasColumnName("agent");
            entity.Property(e => e.Arnname)
                .HasMaxLength(100)
                .HasColumnName("arnname");
            entity.Property(e => e.Bankaccount)
                .HasColumnType("text")
                .HasColumnName("bankaccount");
            entity.Property(e => e.Billgroup)
                .HasMaxLength(100)
                .HasColumnName("billgroup");
            entity.Property(e => e.Branchid).HasColumnName("branchid");
            entity.Property(e => e.Brokeraccountid)
                .HasMaxLength(100)
                .HasColumnName("brokeraccountid");
            entity.Property(e => e.Clientbankaccount)
                .HasMaxLength(100)
                .HasColumnName("clientbankaccount");
            entity.Property(e => e.Clientcustodyaccountid)
                .HasMaxLength(100)
                .HasColumnName("clientcustodyaccountid");
            entity.Property(e => e.Clientcustodyschemecode)
                .HasMaxLength(100)
                .HasColumnName("clientcustodyschemecode");
            entity.Property(e => e.Clientid).HasColumnName("clientid");
            entity.Property(e => e.Clienttype)
                .HasMaxLength(100)
                .HasColumnName("clienttype");
            entity.Property(e => e.Contactname)
                .HasMaxLength(100)
                .HasColumnName("contactname");
            entity.Property(e => e.Ddofb)
                .HasMaxLength(100)
                .HasColumnName("ddofb");
            entity.Property(e => e.Dir1mapin)
                .HasMaxLength(100)
                .HasColumnName("dir1mapin");
            entity.Property(e => e.Dir2name)
                .HasMaxLength(100)
                .HasColumnName("dir2name");
            entity.Property(e => e.Dir3mapin)
                .HasMaxLength(100)
                .HasColumnName("dir3mapin");
            entity.Property(e => e.Feepaymentmode)
                .HasMaxLength(100)
                .HasColumnName("feepaymentmode");
            entity.Property(e => e.Firmid).HasColumnName("firmid");
            entity.Property(e => e.Firmname)
                .HasMaxLength(100)
                .HasColumnName("firmname");
            entity.Property(e => e.Firstholderaddress)
                .HasColumnType("text")
                .HasColumnName("firstholderaddress");
            entity.Property(e => e.Firstholderkyc)
                .HasMaxLength(100)
                .HasColumnName("firstholderkyc");
            entity.Property(e => e.Firstholderpan)
                .HasMaxLength(100)
                .HasColumnName("firstholderpan");
            entity.Property(e => e.Firstholderubo)
                .HasMaxLength(100)
                .HasColumnName("firstholderubo");
            entity.Property(e => e.Firstname)
                .HasMaxLength(100)
                .HasColumnName("firstname");
            entity.Property(e => e.Fundmgrind).HasColumnName("fundmgrind");
            entity.Property(e => e.Guardianname)
                .HasMaxLength(100)
                .HasColumnName("guardianname");
            entity.Property(e => e.Intermediaryname)
                .HasMaxLength(100)
                .HasColumnName("intermediaryname");
            entity.Property(e => e.Joint2name)
                .HasMaxLength(100)
                .HasColumnName("joint2name");
            entity.Property(e => e.Joint2pan)
                .HasMaxLength(100)
                .HasColumnName("joint2pan");
            entity.Property(e => e.Mailaddress)
                .HasColumnType("text")
                .HasColumnName("mailaddress");
            entity.Property(e => e.Mailfax)
                .HasMaxLength(100)
                .HasColumnName("mailfax");
            entity.Property(e => e.Mailmobile)
                .HasMaxLength(100)
                .HasColumnName("mailmobile");
            entity.Property(e => e.Mailphonehome)
                .HasMaxLength(100)
                .HasColumnName("mailphonehome");
            entity.Property(e => e.Mailphonework)
                .HasMaxLength(100)
                .HasColumnName("mailphonework");
            entity.Property(e => e.Mailpincode)
                .HasMaxLength(20)
                .HasColumnName("mailpincode");
            entity.Property(e => e.Mailstate)
                .HasMaxLength(100)
                .HasColumnName("mailstate");
            entity.Property(e => e.Manager)
                .HasMaxLength(100)
                .HasColumnName("manager");
            entity.Property(e => e.Mandatebankbranchname)
                .HasMaxLength(100)
                .HasColumnName("mandatebankbranchname");
            entity.Property(e => e.Mandatebankname)
                .HasMaxLength(100)
                .HasColumnName("mandatebankname");
            entity.Property(e => e.Mandatedpclientid)
                .HasMaxLength(100)
                .HasColumnName("mandatedpclientid");
            entity.Property(e => e.Mandatedpname)
                .HasMaxLength(100)
                .HasColumnName("mandatedpname");
            entity.Property(e => e.Mandatemicr)
                .HasMaxLength(100)
                .HasColumnName("mandatemicr");
            entity.Property(e => e.Mandatertgs)
                .HasMaxLength(100)
                .HasColumnName("mandatertgs");
            entity.Property(e => e.Modeofholding)
                .HasMaxLength(100)
                .HasColumnName("modeofholding");
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .HasColumnName("nationality");
            entity.Property(e => e.Nominee1)
                .HasColumnType("text")
                .HasColumnName("nominee1");
            entity.Property(e => e.Nominee2)
                .HasColumnType("text")
                .HasColumnName("nominee2");
            entity.Property(e => e.Nominee3)
                .HasColumnType("text")
                .HasColumnName("nominee3");
            entity.Property(e => e.Nominee4)
                .HasColumnType("text")
                .HasColumnName("nominee4");
            entity.Property(e => e.Nominee5)
                .HasColumnType("text")
                .HasColumnName("nominee5");
            entity.Property(e => e.Ownerid).HasColumnName("ownerid");
            entity.Property(e => e.Pincode)
                .HasMaxLength(20)
                .HasColumnName("pincode");
            entity.Property(e => e.Poa)
                .HasColumnType("text")
                .HasColumnName("poa");
            entity.Property(e => e.Pot)
                .HasColumnType("text")
                .HasColumnName("pot");
            entity.Property(e => e.Refcode1)
                .HasMaxLength(100)
                .HasColumnName("refcode1");
            entity.Property(e => e.Refcode2)
                .HasMaxLength(100)
                .HasColumnName("refcode2");
            entity.Property(e => e.Refcode3)
                .HasMaxLength(100)
                .HasColumnName("refcode3");
            entity.Property(e => e.Refcode4)
                .HasMaxLength(100)
                .HasColumnName("refcode4");
            entity.Property(e => e.Refcode5)
                .HasMaxLength(100)
                .HasColumnName("refcode5");
            entity.Property(e => e.Refcode6)
                .HasMaxLength(100)
                .HasColumnName("refcode6");
            entity.Property(e => e.Refcode7)
                .HasMaxLength(100)
                .HasColumnName("refcode7");
            entity.Property(e => e.Refcode8)
                .HasMaxLength(100)
                .HasColumnName("refcode8");
            entity.Property(e => e.Refcode9)
                .HasMaxLength(100)
                .HasColumnName("refcode9");
            entity.Property(e => e.Relmgrid).HasColumnName("relmgrid");
            entity.Property(e => e.Rmname)
                .HasMaxLength(100)
                .HasColumnName("rmname");
            entity.Property(e => e.Scope)
                .HasMaxLength(100)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid)
                .HasMaxLength(100)
                .HasColumnName("scopeid");
            entity.Property(e => e.Secondholderaddress)
                .HasColumnType("text")
                .HasColumnName("secondholderaddress");
            entity.Property(e => e.Secondholderbankaccttype)
                .HasMaxLength(100)
                .HasColumnName("secondholderbankaccttype");
            entity.Property(e => e.Secondholderbankname)
                .HasMaxLength(100)
                .HasColumnName("secondholderbankname");
            entity.Property(e => e.Secondholderdepository)
                .HasMaxLength(100)
                .HasColumnName("secondholderdepository");
            entity.Property(e => e.Secondholderdob).HasColumnName("secondholderdob");
            entity.Property(e => e.Secondholderdpclientid)
                .HasMaxLength(100)
                .HasColumnName("secondholderdpclientid");
            entity.Property(e => e.Secondholderfatca)
                .HasMaxLength(100)
                .HasColumnName("secondholderfatca");
            entity.Property(e => e.Secondholderfatherhusband)
                .HasMaxLength(100)
                .HasColumnName("secondholderfatherhusband");
            entity.Property(e => e.Secondholdermicrnumber)
                .HasMaxLength(100)
                .HasColumnName("secondholdermicrnumber");
            entity.Property(e => e.Secondholdername)
                .HasMaxLength(100)
                .HasColumnName("secondholdername");
            entity.Property(e => e.Secondholderneftcode)
                .HasMaxLength(100)
                .HasColumnName("secondholderneftcode");
            entity.Property(e => e.Secondholderrelation)
                .HasMaxLength(100)
                .HasColumnName("secondholderrelation");
            entity.Property(e => e.Secondholderrtgscode)
                .HasMaxLength(100)
                .HasColumnName("secondholderrtgscode");
            entity.Property(e => e.Stttakenas)
                .HasMaxLength(100)
                .HasColumnName("stttakenas");
            entity.Property(e => e.Subdistributor)
                .HasMaxLength(100)
                .HasColumnName("subdistributor");
            entity.Property(e => e.Thirdholderaadhar)
                .HasMaxLength(100)
                .HasColumnName("thirdholderaadhar");
            entity.Property(e => e.Thirdholderaddress)
                .HasColumnType("text")
                .HasColumnName("thirdholderaddress");
            entity.Property(e => e.Thirdholderbankaccountno)
                .HasMaxLength(100)
                .HasColumnName("thirdholderbankaccountno");
            entity.Property(e => e.Thirdholderbankaccttype)
                .HasMaxLength(100)
                .HasColumnName("thirdholderbankaccttype");
            entity.Property(e => e.Thirdholderdepository)
                .HasMaxLength(100)
                .HasColumnName("thirdholderdepository");
            entity.Property(e => e.Thirdholderdob).HasColumnName("thirdholderdob");
            entity.Property(e => e.Thirdholderdpid)
                .HasMaxLength(100)
                .HasColumnName("thirdholderdpid");
            entity.Property(e => e.Thirdholdermicrnumber)
                .HasMaxLength(100)
                .HasColumnName("thirdholdermicrnumber");
            entity.Property(e => e.Thirdholdername)
                .HasMaxLength(100)
                .HasColumnName("thirdholdername");
            entity.Property(e => e.Thirdholderoccupation)
                .HasMaxLength(100)
                .HasColumnName("thirdholderoccupation");
            entity.Property(e => e.Thirdholderrelation)
                .HasMaxLength(100)
                .HasColumnName("thirdholderrelation");
            entity.Property(e => e.Thirdholderrtgscode)
                .HasMaxLength(100)
                .HasColumnName("thirdholderrtgscode");
            entity.Property(e => e.Thirdholderstatus)
                .HasMaxLength(100)
                .HasColumnName("thirdholderstatus");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Tradingbankaccount)
                .HasMaxLength(100)
                .HasColumnName("tradingbankaccount");
            entity.Property(e => e.Trxtakenas)
                .HasMaxLength(100)
                .HasColumnName("trxtakenas");
            entity.Property(e => e.Ucc)
                .HasMaxLength(100)
                .HasColumnName("ucc");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .HasColumnName("username");
            entity.Property(e => e.Ward)
                .HasMaxLength(100)
                .HasColumnName("ward");
        });

        modelBuilder.Entity<Clientmasterdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientmasterdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accountclosuredate).HasColumnName("accountclosuredate");
            entity.Property(e => e.Accreditedinvestor)
                .HasMaxLength(100)
                .HasColumnName("accreditedinvestor");
            entity.Property(e => e.Agent)
                .HasMaxLength(100)
                .HasColumnName("agent");
            entity.Property(e => e.Arnname)
                .HasMaxLength(100)
                .HasColumnName("arnname");
            entity.Property(e => e.Bankaccount)
                .HasColumnType("text")
                .HasColumnName("bankaccount");
            entity.Property(e => e.Billgroup)
                .HasMaxLength(100)
                .HasColumnName("billgroup");
            entity.Property(e => e.Branchid).HasColumnName("branchid");
            entity.Property(e => e.Brokeraccountid)
                .HasMaxLength(100)
                .HasColumnName("brokeraccountid");
            entity.Property(e => e.Clientbankaccount)
                .HasMaxLength(100)
                .HasColumnName("clientbankaccount");
            entity.Property(e => e.Clientcustodyaccountid)
                .HasMaxLength(100)
                .HasColumnName("clientcustodyaccountid");
            entity.Property(e => e.Clientcustodyschemecode)
                .HasMaxLength(100)
                .HasColumnName("clientcustodyschemecode");
            entity.Property(e => e.Clientid).HasColumnName("clientid");
            entity.Property(e => e.Clienttype)
                .HasMaxLength(100)
                .HasColumnName("clienttype");
            entity.Property(e => e.Contactname)
                .HasMaxLength(100)
                .HasColumnName("contactname");
            entity.Property(e => e.Ddofb)
                .HasMaxLength(100)
                .HasColumnName("ddofb");
            entity.Property(e => e.Dir1mapin)
                .HasMaxLength(100)
                .HasColumnName("dir1mapin");
            entity.Property(e => e.Dir2name)
                .HasMaxLength(100)
                .HasColumnName("dir2name");
            entity.Property(e => e.Dir3mapin)
                .HasMaxLength(100)
                .HasColumnName("dir3mapin");
            entity.Property(e => e.Feepaymentmode)
                .HasMaxLength(100)
                .HasColumnName("feepaymentmode");
            entity.Property(e => e.Firmid).HasColumnName("firmid");
            entity.Property(e => e.Firmname)
                .HasMaxLength(100)
                .HasColumnName("firmname");
            entity.Property(e => e.Firstholderaddress)
                .HasColumnType("text")
                .HasColumnName("firstholderaddress");
            entity.Property(e => e.Firstholderkyc)
                .HasMaxLength(100)
                .HasColumnName("firstholderkyc");
            entity.Property(e => e.Firstholderpan)
                .HasMaxLength(100)
                .HasColumnName("firstholderpan");
            entity.Property(e => e.Firstholderubo)
                .HasMaxLength(100)
                .HasColumnName("firstholderubo");
            entity.Property(e => e.Firstname)
                .HasMaxLength(100)
                .HasColumnName("firstname");
            entity.Property(e => e.Fundmgrind).HasColumnName("fundmgrind");
            entity.Property(e => e.Guardianname)
                .HasMaxLength(100)
                .HasColumnName("guardianname");
            entity.Property(e => e.Intermediaryname)
                .HasMaxLength(100)
                .HasColumnName("intermediaryname");
            entity.Property(e => e.Joint2name)
                .HasMaxLength(100)
                .HasColumnName("joint2name");
            entity.Property(e => e.Joint2pan)
                .HasMaxLength(100)
                .HasColumnName("joint2pan");
            entity.Property(e => e.Mailaddress)
                .HasColumnType("text")
                .HasColumnName("mailaddress");
            entity.Property(e => e.Mailfax)
                .HasMaxLength(100)
                .HasColumnName("mailfax");
            entity.Property(e => e.Mailmobile)
                .HasMaxLength(100)
                .HasColumnName("mailmobile");
            entity.Property(e => e.Mailphonehome)
                .HasMaxLength(100)
                .HasColumnName("mailphonehome");
            entity.Property(e => e.Mailphonework)
                .HasMaxLength(100)
                .HasColumnName("mailphonework");
            entity.Property(e => e.Mailpincode)
                .HasMaxLength(20)
                .HasColumnName("mailpincode");
            entity.Property(e => e.Mailstate)
                .HasMaxLength(100)
                .HasColumnName("mailstate");
            entity.Property(e => e.Manager)
                .HasMaxLength(100)
                .HasColumnName("manager");
            entity.Property(e => e.Mandatebankbranchname)
                .HasMaxLength(100)
                .HasColumnName("mandatebankbranchname");
            entity.Property(e => e.Mandatebankname)
                .HasMaxLength(100)
                .HasColumnName("mandatebankname");
            entity.Property(e => e.Mandatedpclientid)
                .HasMaxLength(100)
                .HasColumnName("mandatedpclientid");
            entity.Property(e => e.Mandatedpname)
                .HasMaxLength(100)
                .HasColumnName("mandatedpname");
            entity.Property(e => e.Mandatemicr)
                .HasMaxLength(100)
                .HasColumnName("mandatemicr");
            entity.Property(e => e.Mandatertgs)
                .HasMaxLength(100)
                .HasColumnName("mandatertgs");
            entity.Property(e => e.Modeofholding)
                .HasMaxLength(100)
                .HasColumnName("modeofholding");
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .HasColumnName("nationality");
            entity.Property(e => e.Nominee1)
                .HasColumnType("text")
                .HasColumnName("nominee1");
            entity.Property(e => e.Nominee2)
                .HasColumnType("text")
                .HasColumnName("nominee2");
            entity.Property(e => e.Nominee3)
                .HasColumnType("text")
                .HasColumnName("nominee3");
            entity.Property(e => e.Nominee4)
                .HasColumnType("text")
                .HasColumnName("nominee4");
            entity.Property(e => e.Nominee5)
                .HasColumnType("text")
                .HasColumnName("nominee5");
            entity.Property(e => e.Ownerid).HasColumnName("ownerid");
            entity.Property(e => e.Pincode)
                .HasMaxLength(20)
                .HasColumnName("pincode");
            entity.Property(e => e.Poa)
                .HasColumnType("text")
                .HasColumnName("poa");
            entity.Property(e => e.Pot)
                .HasColumnType("text")
                .HasColumnName("pot");
            entity.Property(e => e.Refcode1)
                .HasMaxLength(100)
                .HasColumnName("refcode1");
            entity.Property(e => e.Refcode2)
                .HasMaxLength(100)
                .HasColumnName("refcode2");
            entity.Property(e => e.Refcode3)
                .HasMaxLength(100)
                .HasColumnName("refcode3");
            entity.Property(e => e.Refcode4)
                .HasMaxLength(100)
                .HasColumnName("refcode4");
            entity.Property(e => e.Refcode5)
                .HasMaxLength(100)
                .HasColumnName("refcode5");
            entity.Property(e => e.Refcode6)
                .HasMaxLength(100)
                .HasColumnName("refcode6");
            entity.Property(e => e.Refcode7)
                .HasMaxLength(100)
                .HasColumnName("refcode7");
            entity.Property(e => e.Refcode8)
                .HasMaxLength(100)
                .HasColumnName("refcode8");
            entity.Property(e => e.Refcode9)
                .HasMaxLength(100)
                .HasColumnName("refcode9");
            entity.Property(e => e.Relmgrid).HasColumnName("relmgrid");
            entity.Property(e => e.Rmname)
                .HasMaxLength(100)
                .HasColumnName("rmname");
            entity.Property(e => e.Scope)
                .HasMaxLength(100)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid)
                .HasMaxLength(100)
                .HasColumnName("scopeid");
            entity.Property(e => e.Secondholderaddress)
                .HasColumnType("text")
                .HasColumnName("secondholderaddress");
            entity.Property(e => e.Secondholderbankaccttype)
                .HasMaxLength(100)
                .HasColumnName("secondholderbankaccttype");
            entity.Property(e => e.Secondholderbankname)
                .HasMaxLength(100)
                .HasColumnName("secondholderbankname");
            entity.Property(e => e.Secondholderdepository)
                .HasMaxLength(100)
                .HasColumnName("secondholderdepository");
            entity.Property(e => e.Secondholderdob).HasColumnName("secondholderdob");
            entity.Property(e => e.Secondholderdpclientid)
                .HasMaxLength(100)
                .HasColumnName("secondholderdpclientid");
            entity.Property(e => e.Secondholderfatca)
                .HasMaxLength(100)
                .HasColumnName("secondholderfatca");
            entity.Property(e => e.Secondholderfatherhusband)
                .HasMaxLength(100)
                .HasColumnName("secondholderfatherhusband");
            entity.Property(e => e.Secondholdermicrnumber)
                .HasMaxLength(100)
                .HasColumnName("secondholdermicrnumber");
            entity.Property(e => e.Secondholdername)
                .HasMaxLength(100)
                .HasColumnName("secondholdername");
            entity.Property(e => e.Secondholderneftcode)
                .HasMaxLength(100)
                .HasColumnName("secondholderneftcode");
            entity.Property(e => e.Secondholderrelation)
                .HasMaxLength(100)
                .HasColumnName("secondholderrelation");
            entity.Property(e => e.Secondholderrtgscode)
                .HasMaxLength(100)
                .HasColumnName("secondholderrtgscode");
            entity.Property(e => e.Stttakenas)
                .HasMaxLength(100)
                .HasColumnName("stttakenas");
            entity.Property(e => e.Subdistributor)
                .HasMaxLength(100)
                .HasColumnName("subdistributor");
            entity.Property(e => e.Thirdholderaadhar)
                .HasMaxLength(100)
                .HasColumnName("thirdholderaadhar");
            entity.Property(e => e.Thirdholderaddress)
                .HasColumnType("text")
                .HasColumnName("thirdholderaddress");
            entity.Property(e => e.Thirdholderbankaccountno)
                .HasMaxLength(100)
                .HasColumnName("thirdholderbankaccountno");
            entity.Property(e => e.Thirdholderbankaccttype)
                .HasMaxLength(100)
                .HasColumnName("thirdholderbankaccttype");
            entity.Property(e => e.Thirdholderdepository)
                .HasMaxLength(100)
                .HasColumnName("thirdholderdepository");
            entity.Property(e => e.Thirdholderdob).HasColumnName("thirdholderdob");
            entity.Property(e => e.Thirdholderdpid)
                .HasMaxLength(100)
                .HasColumnName("thirdholderdpid");
            entity.Property(e => e.Thirdholdermicrnumber)
                .HasMaxLength(100)
                .HasColumnName("thirdholdermicrnumber");
            entity.Property(e => e.Thirdholdername)
                .HasMaxLength(100)
                .HasColumnName("thirdholdername");
            entity.Property(e => e.Thirdholderoccupation)
                .HasMaxLength(100)
                .HasColumnName("thirdholderoccupation");
            entity.Property(e => e.Thirdholderrelation)
                .HasMaxLength(100)
                .HasColumnName("thirdholderrelation");
            entity.Property(e => e.Thirdholderrtgscode)
                .HasMaxLength(100)
                .HasColumnName("thirdholderrtgscode");
            entity.Property(e => e.Thirdholderstatus)
                .HasMaxLength(100)
                .HasColumnName("thirdholderstatus");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Tradingbankaccount)
                .HasMaxLength(100)
                .HasColumnName("tradingbankaccount");
            entity.Property(e => e.Trxtakenas)
                .HasMaxLength(100)
                .HasColumnName("trxtakenas");
            entity.Property(e => e.Ucc)
                .HasMaxLength(100)
                .HasColumnName("ucc");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .HasColumnName("username");
            entity.Property(e => e.Ward)
                .HasMaxLength(100)
                .HasColumnName("ward");
        });

        modelBuilder.Entity<Clientuploadstatusbseclass>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientuploadstatusbseclass");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasColumnType("text");
            entity.Property(e => e.Response).HasMaxLength(5000);
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<Clientuploadstatusbsestar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientuploadstatusbsestar");

            entity.Property(e => e.ClientType).HasMaxLength(10);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(5000);
            entity.Property(e => e.Response).HasMaxLength(5000);
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<Clientuploadstatusbseucc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientuploadstatusbseucc");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(5000);
            entity.Property(e => e.Response).HasMaxLength(5000);
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<Clientuploadstatusnse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientuploadstatusnse");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(5000);
            entity.Property(e => e.Response).HasMaxLength(5000);
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<Clientuploadstatuswealthspectrum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientuploadstatuswealthspectrum");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefCode1).HasMaxLength(20);
            entity.Property(e => e.Request).HasMaxLength(10000);
            entity.Property(e => e.Response).HasMaxLength(5000);
            entity.Property(e => e.TransactionType).HasMaxLength(50);
        });

        modelBuilder.Entity<Clientwiseaum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("clientwiseaum");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accountcode)
                .HasMaxLength(255)
                .HasColumnName("accountcode");
            entity.Property(e => e.Aum)
                .HasPrecision(18, 2)
                .HasColumnName("aum");
            entity.Property(e => e.Clientid).HasColumnName("clientid");
            entity.Property(e => e.Clientname)
                .HasMaxLength(255)
                .HasColumnName("clientname");
            entity.Property(e => e.Scope)
                .HasMaxLength(255)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid)
                .HasMaxLength(255)
                .HasColumnName("scopeid");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Valuedate).HasColumnName("valuedate");
        });

        modelBuilder.Entity<Configurationdetailsmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("configurationdetailsmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Content)
                .HasColumnType("text")
                .HasColumnName("content");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Keyname)
                .HasMaxLength(100)
                .HasColumnName("keyname");
        });

        modelBuilder.Entity<Countrymaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("countrymaster");

            entity.Property(e => e.CountryCode).HasMaxLength(500);
            entity.Property(e => e.CountryName).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsFatf).HasColumnName("IsFATF");
            entity.Property(e => e.IsNriallow).HasColumnName("IsNRIAllow");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Credentialsbsestar>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credentialsbsestar");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MemberCode).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PassKey).HasMaxLength(200);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.UserId).HasMaxLength(50);
        });

        modelBuilder.Entity<Credentialsdigio>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credentialsdigio");

            entity.Property(e => e.ClientId).HasMaxLength(100);
            entity.Property(e => e.ClientSecret).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Credentialssignzy>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credentialssignzy");

            entity.Property(e => e.AuthorizationV2).HasMaxLength(500);
            entity.Property(e => e.AuthorizationV3).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Passwords).HasMaxLength(100);
            entity.Property(e => e.PatronId).HasMaxLength(100);
            entity.Property(e => e.UserName).HasMaxLength(100);
        });

        modelBuilder.Entity<Credentialssignzyesign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credentialssignzyesign");

            entity.Property(e => e.Authorization).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Credentialssmtpmailer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credentialssmtpmailer");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DisplayName).HasMaxLength(50);
            entity.Property(e => e.FormAddress)
                .HasColumnType("text")
                .HasColumnName("formAddress");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Passwords).HasMaxLength(100);
            entity.Property(e => e.SenderEmailHandle).HasMaxLength(100);
            entity.Property(e => e.ServerAddress).HasMaxLength(100);
            entity.Property(e => e.SmtpPort).HasMaxLength(100);
            entity.Property(e => e.UserName).HasMaxLength(100);
        });

        modelBuilder.Entity<Credentialstrackwizz>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("credentialstrackwizz");

            entity.Property(e => e.ApiToken).HasMaxLength(500);
            entity.Property(e => e.Cluster).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Domain).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SourceSystemName).HasMaxLength(100);
            entity.Property(e => e.Url).HasMaxLength(500);
        });

        modelBuilder.Entity<Cvkrapanenquiryrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cvkrapanenquiryrequestresponse");

            entity.Property(e => e.AppName).HasMaxLength(200);
            entity.Property(e => e.AppStatus).HasMaxLength(200);
            entity.Property(e => e.Dob).HasMaxLength(300);
            entity.Property(e => e.PanNo).HasMaxLength(20);
            entity.Property(e => e.Request).HasColumnType("text");
            entity.Property(e => e.RequestTimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Response).HasColumnType("text");
            entity.Property(e => e.ResponseTimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.StatusDescription).HasMaxLength(200);
        });

        modelBuilder.Entity<CvlKraLastCheckedStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("CvlKraLastCheckedStatus");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.KraStatus).HasMaxLength(100);
            entity.Property(e => e.KraStatusDate).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Cvlkramastermapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("cvlkramastermapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.CvlCode).HasMaxLength(20);
        });

        modelBuilder.Entity<Digioesigncordiante>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("digioesigncordiantes");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cordinates)
                .HasColumnType("text")
                .HasColumnName("cordinates");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Digioestamppaper>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("digioestamppaper");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EstampTag)
                .HasMaxLength(100)
                .HasColumnName("EStampTag");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoteContent).HasMaxLength(5000);
            entity.Property(e => e.NoteOnPage).HasMaxLength(100);
            entity.Property(e => e.SignOnPage).HasMaxLength(100);
        });

        modelBuilder.Entity<Digiorequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("digiorequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Digioid)
                .HasColumnType("text")
                .HasColumnName("digioid");
            entity.Property(e => e.Expireindays).HasColumnName("expireindays");
            entity.Property(e => e.Filname)
                .HasMaxLength(500)
                .HasColumnName("filname");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.InvId).HasColumnName("invId");
            entity.Property(e => e.Iserror).HasColumnName("iserror");
            entity.Property(e => e.Modificationid).HasColumnName("modificationid");
            entity.Property(e => e.Notifysigners)
                .HasColumnType("text")
                .HasColumnName("notifysigners");
            entity.Property(e => e.Pdftype)
                .HasDefaultValueSql("'1'")
                .HasColumnName("pdftype");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Signcordinates)
                .HasColumnType("text")
                .HasColumnName("signcordinates");
            entity.Property(e => e.Signers)
                .HasColumnType("text")
                .HasColumnName("signers");
        });

        modelBuilder.Entity<Digiowebhookresponse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("digiowebhookresponse");

            entity.Property(e => e.AgreementStatus)
                .HasColumnType("text")
                .HasColumnName("agreement_status");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("text")
                .HasColumnName("created_at");
            entity.Property(e => e.DigioId).HasColumnType("text");
            entity.Property(e => e.Entities)
                .HasColumnType("text")
                .HasColumnName("entities");
            entity.Property(e => e.Event).HasColumnType("text");
            entity.Property(e => e.FileName)
                .HasColumnType("text")
                .HasColumnName("file_name");
            entity.Property(e => e.HasAllSigned).HasColumnName("has_all_signed");
            entity.Property(e => e.Id)
                .HasMaxLength(500)
                .HasColumnName("id");
            entity.Property(e => e.Identifier1)
                .HasColumnType("text")
                .HasColumnName("identifier_1");
            entity.Property(e => e.Identifier2)
                .HasColumnType("text")
                .HasColumnName("identifier_2");
            entity.Property(e => e.Identifier3)
                .HasColumnType("text")
                .HasColumnName("identifier_3");
            entity.Property(e => e.LastSignedBy)
                .HasColumnType("text")
                .HasColumnName("last_signed_by");
            entity.Property(e => e.Name1)
                .HasColumnType("text")
                .HasColumnName("name_1");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("name_2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("name_3");
            entity.Property(e => e.Payload)
                .HasColumnType("text")
                .HasColumnName("payload");
            entity.Property(e => e.SignatureType1)
                .HasColumnType("text")
                .HasColumnName("signature_type_1");
            entity.Property(e => e.SignatureType2)
                .HasColumnType("text")
                .HasColumnName("signature_type_2");
            entity.Property(e => e.SignatureType3)
                .HasColumnType("text")
                .HasColumnName("signature_type_3");
            entity.Property(e => e.Stataus3)
                .HasColumnType("text")
                .HasColumnName("stataus_3");
            entity.Property(e => e.Status1)
                .HasColumnType("text")
                .HasColumnName("status_1");
            entity.Property(e => e.Status2)
                .HasColumnType("text")
                .HasColumnName("status_2");
            entity.Property(e => e.UpdatedAt1)
                .HasColumnType("text")
                .HasColumnName("updated_at_1");
            entity.Property(e => e.UpdatedAt2)
                .HasColumnType("text")
                .HasColumnName("updated_at_2");
            entity.Property(e => e.UpdatedAt3)
                .HasColumnType("text")
                .HasColumnName("updated_at_3");
        });

        modelBuilder.Entity<DigiowebhookresponseUpdate>(entity =>
        {
            entity.HasKey(e => e.Uniqueid).HasName("PRIMARY");

            entity.ToTable("digiowebhookresponse_update");

            entity.Property(e => e.Uniqueid).HasColumnName("uniqueid");
            entity.Property(e => e.AgreementStatus)
                .HasColumnType("text")
                .HasColumnName("agreement_status");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("text")
                .HasColumnName("created_at");
            entity.Property(e => e.DigioId).HasColumnType("text");
            entity.Property(e => e.Entities)
                .HasColumnType("text")
                .HasColumnName("entities");
            entity.Property(e => e.Event).HasColumnType("text");
            entity.Property(e => e.FileName)
                .HasColumnType("text")
                .HasColumnName("file_name");
            entity.Property(e => e.HasAllSigned).HasColumnName("has_all_signed");
            entity.Property(e => e.Id)
                .HasMaxLength(500)
                .HasColumnName("id");
            entity.Property(e => e.Identifier1)
                .HasColumnType("text")
                .HasColumnName("identifier_1");
            entity.Property(e => e.Identifier2)
                .HasColumnType("text")
                .HasColumnName("identifier_2");
            entity.Property(e => e.Identifier3)
                .HasColumnType("text")
                .HasColumnName("identifier_3");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.LastSignedBy)
                .HasColumnType("text")
                .HasColumnName("last_signed_by");
            entity.Property(e => e.Name1)
                .HasColumnType("text")
                .HasColumnName("name_1");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("name_2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("name_3");
            entity.Property(e => e.Payload)
                .HasColumnType("text")
                .HasColumnName("payload");
            entity.Property(e => e.SignatureType1)
                .HasColumnType("text")
                .HasColumnName("signature_type_1");
            entity.Property(e => e.SignatureType2)
                .HasColumnType("text")
                .HasColumnName("signature_type_2");
            entity.Property(e => e.SignatureType3)
                .HasColumnType("text")
                .HasColumnName("signature_type_3");
            entity.Property(e => e.Stataus3)
                .HasColumnType("text")
                .HasColumnName("stataus_3");
            entity.Property(e => e.Status1)
                .HasColumnType("text")
                .HasColumnName("status_1");
            entity.Property(e => e.Status2)
                .HasColumnType("text")
                .HasColumnName("status_2");
            entity.Property(e => e.UpdatedAt1)
                .HasColumnType("text")
                .HasColumnName("updated_at_1");
            entity.Property(e => e.UpdatedAt2)
                .HasColumnType("text")
                .HasColumnName("updated_at_2");
            entity.Property(e => e.UpdatedAt3)
                .HasColumnType("text")
                .HasColumnName("updated_at_3");
        });

        modelBuilder.Entity<Distributormaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("distributormaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Cinnumber)
                .HasMaxLength(100)
                .HasColumnName("CINNumber");
            entity.Property(e => e.ContactPerson).HasPrecision(18);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DistributorName).HasMaxLength(500);
            entity.Property(e => e.Emailid).HasMaxLength(500);
            entity.Property(e => e.Gstno)
                .HasMaxLength(500)
                .HasColumnName("GSTNO");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.Mobile).HasPrecision(18);
            entity.Property(e => e.ModifiedBy).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.ProductName).HasMaxLength(500);
            entity.Property(e => e.ResiAddress).HasMaxLength(500);
            entity.Property(e => e.Status).HasMaxLength(500);
        });

        modelBuilder.Entity<Districtmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("districtmaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Districtname).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<Documentgenerationpathmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("documentgenerationpathmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Pdffilepath)
                .HasColumnType("text")
                .HasColumnName("pdffilepath");
            entity.Property(e => e.Productid).HasColumnName("productid");
        });

        modelBuilder.Entity<Documenttypemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("documenttypemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClientSubTypeId).HasColumnName("clientSubTypeId");
            entity.Property(e => e.ClientType).HasColumnType("text");
            entity.Property(e => e.ClientTypeId).HasColumnName("clientTypeId");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentName).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsOcrrequired).HasColumnName("IsOCRRequired");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<DpClientMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("DP_ClientMaster");

            entity.Property(e => e.Baselocation)
                .HasColumnType("text")
                .HasColumnName("BASELOCATION");
            entity.Property(e => e.Boid).HasColumnName("BOID");
            entity.Property(e => e.Cas)
                .HasColumnType("text")
                .HasColumnName("CAS");
            entity.Property(e => e.CbAdd1)
                .HasColumnType("text")
                .HasColumnName("CB_ADD1");
            entity.Property(e => e.CbAdd2)
                .HasColumnType("text")
                .HasColumnName("CB_ADD2");
            entity.Property(e => e.CbAdd3)
                .HasColumnType("text")
                .HasColumnName("CB_ADD3");
            entity.Property(e => e.CbAnnualincome)
                .HasColumnType("text")
                .HasColumnName("CB_ANNUALINCOME");
            entity.Property(e => e.CbBankadd1)
                .HasColumnType("text")
                .HasColumnName("CB_BANKADD1");
            entity.Property(e => e.CbBankadd2)
                .HasColumnType("text")
                .HasColumnName("CB_BANKADD2");
            entity.Property(e => e.CbBankadd3)
                .HasColumnType("text")
                .HasColumnName("CB_BANKADD3");
            entity.Property(e => e.CbBankbranch)
                .HasColumnType("text")
                .HasColumnName("CB_BANKBRANCH");
            entity.Property(e => e.CbBosettlementplanflag)
                .HasColumnType("text")
                .HasColumnName("CB_BOSETTLEMENTPLANFLAG");
            entity.Property(e => e.CbCity)
                .HasColumnType("text")
                .HasColumnName("CB_CITY");
            entity.Property(e => e.CbCmcd).HasColumnName("CB_CMCD");
            entity.Property(e => e.CbCountry)
                .HasColumnType("text")
                .HasColumnName("CB_COUNTRY");
            entity.Property(e => e.CbDegree)
                .HasColumnType("text")
                .HasColumnName("CB_DEGREE");
            entity.Property(e => e.CbDividendcurrency)
                .HasColumnType("text")
                .HasColumnName("CB_DIVIDENDCURRENCY");
            entity.Property(e => e.CbFathername)
                .HasColumnType("text")
                .HasColumnName("CB_FATHERNAME");
            entity.Property(e => e.CbFormno)
                .HasColumnType("text")
                .HasColumnName("CB_FORMNO");
            entity.Property(e => e.CbGeographical)
                .HasColumnType("text")
                .HasColumnName("CB_GEOGRAPHICAL");
            entity.Property(e => e.CbLanguage)
                .HasColumnType("text")
                .HasColumnName("CB_LANGUAGE");
            entity.Property(e => e.CbLifestyle)
                .HasColumnType("text")
                .HasColumnName("CB_LIFESTYLE");
            entity.Property(e => e.CbNationality)
                .HasColumnType("text")
                .HasColumnName("CB_NATIONALITY");
            entity.Property(e => e.CbNominee)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEE");
            entity.Property(e => e.CbNomineeDob)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEE_DOB");
            entity.Property(e => e.CbNomineeadd1)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEEADD1");
            entity.Property(e => e.CbNomineeadd2)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEEADD2");
            entity.Property(e => e.CbNomineeadd3)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEEADD3");
            entity.Property(e => e.CbNomineecity)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEECITY");
            entity.Property(e => e.CbNomineecountry)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEECOUNTRY");
            entity.Property(e => e.CbNomineepin)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEEPIN");
            entity.Property(e => e.CbNomineestate)
                .HasColumnType("text")
                .HasColumnName("CB_NOMINEESTATE");
            entity.Property(e => e.CbPanno)
                .HasColumnType("text")
                .HasColumnName("CB_PANNO");
            entity.Property(e => e.CbPin).HasColumnName("CB_PIN");
            entity.Property(e => e.CbSechfathername)
                .HasColumnType("text")
                .HasColumnName("CB_SECHFATHERNAME");
            entity.Property(e => e.CbSechlastname)
                .HasColumnType("text")
                .HasColumnName("CB_SECHLASTNAME");
            entity.Property(e => e.CbSechmiddle)
                .HasColumnType("text")
                .HasColumnName("CB_SECHMIDDLE");
            entity.Property(e => e.CbSechpanno)
                .HasColumnType("text")
                .HasColumnName("CB_SECHPANNO");
            entity.Property(e => e.CbSechtitle)
                .HasColumnType("text")
                .HasColumnName("CB_SECHTITLE");
            entity.Property(e => e.CbSetupdate)
                .HasColumnType("text")
                .HasColumnName("CB_SETUPDATE");
            entity.Property(e => e.CbSexcode)
                .HasColumnType("text")
                .HasColumnName("CB_SEXCODE");
            entity.Property(e => e.CbState)
                .HasColumnType("text")
                .HasColumnName("CB_STATE");
            entity.Property(e => e.CbTele1)
                .HasColumnType("text")
                .HasColumnName("CB_TELE1");
            entity.Property(e => e.CbThirdfathername)
                .HasColumnType("text")
                .HasColumnName("CB_THIRDFATHERNAME");
            entity.Property(e => e.CbThirdlastname)
                .HasColumnType("text")
                .HasColumnName("CB_THIRDLASTNAME");
            entity.Property(e => e.CbThirdmiddle)
                .HasColumnType("text")
                .HasColumnName("CB_THIRDMIDDLE");
            entity.Property(e => e.CbThirdpanno)
                .HasColumnType("text")
                .HasColumnName("CB_THIRDPANNO");
            entity.Property(e => e.CbThirdtitle)
                .HasColumnType("text")
                .HasColumnName("CB_THIRDTITLE");
            entity.Property(e => e.CbVoicemail)
                .HasColumnType("text")
                .HasColumnName("CB_VOICEMAIL");
            entity.Property(e => e.CmAccClosuredate)
                .HasColumnType("text")
                .HasColumnName("CM_ACC_CLOSUREDATE");
            entity.Property(e => e.CmAcctype)
                .HasColumnType("text")
                .HasColumnName("CM_ACCTYPE");
            entity.Property(e => e.CmActive)
                .HasColumnType("text")
                .HasColumnName("CM_ACTIVE");
            entity.Property(e => e.CmAdd1)
                .HasColumnType("text")
                .HasColumnName("CM_ADD1");
            entity.Property(e => e.CmAdd2)
                .HasColumnType("text")
                .HasColumnName("CM_ADD2");
            entity.Property(e => e.CmAdd3)
                .HasColumnType("text")
                .HasColumnName("CM_ADD3");
            entity.Property(e => e.CmBankname)
                .HasColumnType("text")
                .HasColumnName("CM_BANKNAME");
            entity.Property(e => e.CmBlsavingcd)
                .HasColumnType("text")
                .HasColumnName("CM_BLSAVINGCD");
            entity.Property(e => e.CmBostatementcycle)
                .HasColumnType("text")
                .HasColumnName("CM_BOSTATEMENTCYCLE");
            entity.Property(e => e.CmBrboffcode)
                .HasColumnType("text")
                .HasColumnName("CM_BRBOFFCODE");
            entity.Property(e => e.CmBrcode)
                .HasColumnType("text")
                .HasColumnName("CM_BRCODE");
            entity.Property(e => e.CmCd).HasColumnName("CM_CD");
            entity.Property(e => e.CmChgsscheme)
                .HasColumnType("text")
                .HasColumnName("CM_CHGSSCHEME");
            entity.Property(e => e.CmCity)
                .HasColumnType("text")
                .HasColumnName("CM_CITY");
            entity.Property(e => e.CmClienttype)
                .HasColumnType("text")
                .HasColumnName("CM_CLIENTTYPE");
            entity.Property(e => e.CmCountry)
                .HasColumnType("text")
                .HasColumnName("CM_COUNTRY");
            entity.Property(e => e.CmDateofbirth).HasColumnName("CM_DATEOFBIRTH");
            entity.Property(e => e.CmDivbankacno)
                .HasColumnType("text")
                .HasColumnName("CM_DIVBANKACNO");
            entity.Property(e => e.CmDivbankccy)
                .HasColumnType("text")
                .HasColumnName("CM_DIVBANKCCY");
            entity.Property(e => e.CmDivbankcode)
                .HasColumnType("text")
                .HasColumnName("CM_DIVBANKCODE");
            entity.Property(e => e.CmDivbranchno)
                .HasColumnType("text")
                .HasColumnName("CM_DIVBRANCHNO");
            entity.Property(e => e.CmDpintrefno)
                .HasColumnType("text")
                .HasColumnName("CM_DPINTREFNO");
            entity.Property(e => e.CmEmail)
                .HasColumnType("text")
                .HasColumnName("CM_EMAIL");
            entity.Property(e => e.CmFreezedt).HasColumnName("CM_FREEZEDT");
            entity.Property(e => e.CmFreezereason)
                .HasColumnType("text")
                .HasColumnName("CM_FREEZEREASON");
            entity.Property(e => e.CmFreezeyn)
                .HasColumnType("text")
                .HasColumnName("CM_FREEZEYN");
            entity.Property(e => e.CmLastname)
                .HasColumnType("text")
                .HasColumnName("CM_LASTNAME");
            entity.Property(e => e.CmMicr)
                .HasColumnType("text")
                .HasColumnName("CM_MICR");
            entity.Property(e => e.CmMiddlename)
                .HasColumnType("text")
                .HasColumnName("CM_MIDDLENAME");
            entity.Property(e => e.CmMobile).HasColumnName("CM_MOBILE");
            entity.Property(e => e.CmName)
                .HasColumnType("text")
                .HasColumnName("CM_NAME");
            entity.Property(e => e.CmOccupation)
                .HasColumnType("text")
                .HasColumnName("CM_OCCUPATION");
            entity.Property(e => e.CmOpendate).HasColumnName("CM_OPENDATE");
            entity.Property(e => e.CmPin).HasColumnName("CM_PIN");
            entity.Property(e => e.CmPoaforpayin)
                .HasColumnType("text")
                .HasColumnName("CM_POAFORPAYIN");
            entity.Property(e => e.CmPoaregdate)
                .HasColumnType("text")
                .HasColumnName("CM_POAREGDATE");
            entity.Property(e => e.CmProductcd)
                .HasColumnType("text")
                .HasColumnName("CM_PRODUCTCD");
            entity.Property(e => e.CmSechName)
                .HasColumnType("text")
                .HasColumnName("CM_SECH_NAME");
            entity.Property(e => e.CmState)
                .HasColumnType("text")
                .HasColumnName("CM_STATE");
            entity.Property(e => e.CmTele1)
                .HasColumnType("text")
                .HasColumnName("CM_TELE1");
            entity.Property(e => e.CmThihName)
                .HasColumnType("text")
                .HasColumnName("CM_THIH_NAME");
            entity.Property(e => e.CmTitle)
                .HasColumnType("text")
                .HasColumnName("CM_TITLE");
            entity.Property(e => e.Ecs)
                .HasColumnType("text")
                .HasColumnName("ECS");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsPoa)
                .HasColumnType("text")
                .HasColumnName("IS POA");
            entity.Property(e => e.LastModifiedDate)
                .HasColumnType("text")
                .HasColumnName("LAST_MODIFIED_DATE");
            entity.Property(e => e.MasterPoaId)
                .HasColumnType("text")
                .HasColumnName("MASTER POA ID");
            entity.Property(e => e.Risk)
                .HasColumnType("text")
                .HasColumnName("RISK");
        });

        modelBuilder.Entity<EmailRequestDataModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("EmailRequestDataModel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Attachments).HasMaxLength(500);
            entity.Property(e => e.Body).HasMaxLength(500);
            entity.Property(e => e.EmailBccaddress)
                .HasMaxLength(500)
                .HasColumnName("EmailBCCAddress");
            entity.Property(e => e.EmailCcaddress)
                .HasMaxLength(500)
                .HasColumnName("EmailCCAddress");
            entity.Property(e => e.EmailFromAddress).HasMaxLength(500);
            entity.Property(e => e.EmailToAddress).HasMaxLength(500);
            entity.Property(e => e.Subject).HasMaxLength(500);
            entity.Property(e => e.TimeStamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
        });

        modelBuilder.Entity<EmployeeDistributorbankermapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeeDistributorbankermapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Employeebankermapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeebankermapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Employeedistributormapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeedistributormapping");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedBy).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Employeeentitymapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeeentitymapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Employeemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeemaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Doj).HasColumnName("DOJ");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsExternal).HasDefaultValueSql("'0'");
            entity.Property(e => e.LastName).HasMaxLength(500);
            entity.Property(e => e.MiddleName).HasMaxLength(500);
            entity.Property(e => e.Mobile).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PhotoImg).HasMaxLength(2000);
            entity.Property(e => e.QrcodeImg)
                .HasMaxLength(2000)
                .HasColumnName("QRCodeImg");
            entity.Property(e => e.SignImg).HasMaxLength(2000);
        });

        modelBuilder.Entity<Employeemasterbackup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeemasterbackup");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Doj).HasColumnName("doj");
            entity.Property(e => e.Email).HasMaxLength(500);
            entity.Property(e => e.FirstName).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.LastName).HasMaxLength(500);
            entity.Property(e => e.MiddleName).HasMaxLength(500);
            entity.Property(e => e.Mobile).HasPrecision(18);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PhotoImg).HasColumnType("text");
            entity.Property(e => e.QrcodeImg)
                .HasColumnType("text")
                .HasColumnName("QRCodeImg");
            entity.Property(e => e.Sbuid).HasColumnName("SBUId");
            entity.Property(e => e.SignImg).HasColumnType("text");
        });

        modelBuilder.Entity<Employeerolemapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("employeerolemapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Entitymaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("entitymaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Arnno)
                .HasMaxLength(50)
                .HasColumnName("ARNNo");
            entity.Property(e => e.Cinnumber)
                .HasMaxLength(100)
                .HasColumnName("CINNumber");
            entity.Property(e => e.ContactPerson).HasPrecision(18);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Emailid).HasMaxLength(500);
            entity.Property(e => e.Gstno)
                .HasMaxLength(500)
                .HasColumnName("GSTNO");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.Mobile).HasPrecision(18);
            entity.Property(e => e.ModifiedBy).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Pan)
                .HasMaxLength(500)
                .HasColumnName("PAN");
            entity.Property(e => e.ResiAddress).HasMaxLength(500);
            entity.Property(e => e.Shopname)
                .HasMaxLength(500)
                .HasColumnName("SHOPName");
            entity.Property(e => e.Status).HasMaxLength(500);
        });

        modelBuilder.Entity<Entityplatformurl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("entityplatformurl");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PlatformUrl).HasMaxLength(200);
        });

        modelBuilder.Entity<Entityuccprefixmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("entityuccprefixmapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UccPrefix).HasMaxLength(5);
        });

        modelBuilder.Entity<Enummaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("enummaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EnumName).HasMaxLength(5000);
            entity.Property(e => e.EnumType).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Errorlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("errorlogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ExceptionType).HasMaxLength(200);
            entity.Property(e => e.Message).HasMaxLength(5000);
            entity.Property(e => e.MethodName).HasMaxLength(200);
            entity.Property(e => e.Route).HasMaxLength(200);
            entity.Property(e => e.StackTrace).HasMaxLength(10000);
        });

        modelBuilder.Entity<EsignPdfType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PdfType).HasMaxLength(100);
        });

        modelBuilder.Entity<Esignadditionaldetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("esignadditionaldetails");

            entity.Property(e => e.ActiveFrom).HasColumnType("datetime");
            entity.Property(e => e.ActiveTo).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailId).HasMaxLength(200);
            entity.Property(e => e.EsignPreference)
                .HasMaxLength(1)
                .IsFixedLength();
            entity.Property(e => e.MobileNo).HasMaxLength(20);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SignerName).HasMaxLength(200);
            entity.Property(e => e.SignerRole).HasMaxLength(100);
        });

        modelBuilder.Entity<Esignattachmentcoordinate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("esignattachmentcoordinates");

            entity.Property(e => e.Llx)
                .HasPrecision(18, 14)
                .HasColumnName("llx");
            entity.Property(e => e.Lly)
                .HasPrecision(18, 14)
                .HasColumnName("lly");
            entity.Property(e => e.Urx)
                .HasPrecision(18, 14)
                .HasColumnName("urx");
            entity.Property(e => e.Ury)
                .HasPrecision(18, 14)
                .HasColumnName("ury");
        });

        modelBuilder.Entity<Esigncordinatemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("esigncordinatemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Llx)
                .HasPrecision(18, 2)
                .HasColumnName("llx");
            entity.Property(e => e.Lly)
                .HasPrecision(18, 2)
                .HasColumnName("lly");
            entity.Property(e => e.Pagenumber).HasColumnName("pagenumber");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Urx)
                .HasPrecision(18, 2)
                .HasColumnName("urx");
            entity.Property(e => e.Ury)
                .HasPrecision(18, 2)
                .HasColumnName("ury");
        });

        modelBuilder.Entity<EsigncordinatemasterUpdate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("esigncordinatemaster_update");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Additionalsignerrank).HasColumnName("additionalsignerrank");
            entity.Property(e => e.Clienttypeid)
                .HasDefaultValueSql("'1'")
                .HasColumnName("clienttypeid");
            entity.Property(e => e.Holdercount).HasColumnName("holdercount");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isadditionalsigner).HasColumnName("isadditionalsigner");
            entity.Property(e => e.Llx)
                .HasPrecision(18, 14)
                .HasColumnName("llx");
            entity.Property(e => e.Lly)
                .HasPrecision(18, 14)
                .HasColumnName("lly");
            entity.Property(e => e.Pagenumber).HasColumnName("pagenumber");
            entity.Property(e => e.Pdftype)
                .HasDefaultValueSql("'1'")
                .HasColumnName("pdftype");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Urx)
                .HasPrecision(18, 14)
                .HasColumnName("urx");
            entity.Property(e => e.Ury)
                .HasPrecision(18, 14)
                .HasColumnName("ury");
        });

        modelBuilder.Entity<Esignpdfdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("esignpdfdetails");
        });

        modelBuilder.Entity<ExceptionLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("exception_logs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Message)
                .HasColumnType("text")
                .HasColumnName("message");
            entity.Property(e => e.StackTrace)
                .HasColumnType("text")
                .HasColumnName("stack_trace");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<Familyheadmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("familyheadmapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Pan).HasMaxLength(10);
        });

        modelBuilder.Entity<Familyheadmappinglog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("familyheadmappinglog");

            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Pan).HasMaxLength(10);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Familymaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("familymaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FamilyCode).HasMaxLength(10);
            entity.Property(e => e.FamilyName).HasMaxLength(100);
            entity.Property(e => e.FamilyShortName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Familymembersmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("familymembersmapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Pan).HasMaxLength(10);
            entity.Property(e => e.UccCode).HasMaxLength(20);
        });

        modelBuilder.Entity<Familymembersmappinglog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("familymembersmappinglog");

            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Pan).HasMaxLength(10);
            entity.Property(e => e.UccCode).HasMaxLength(20);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Fundmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("fundmaster");

            entity.Property(e => e.ActionRemarks).HasMaxLength(255);
            entity.Property(e => e.AmortizationMaturityDate).HasMaxLength(255);
            entity.Property(e => e.Aum)
                .HasMaxLength(255)
                .HasColumnName("AUM");
            entity.Property(e => e.Benchmark).HasMaxLength(255);
            entity.Property(e => e.Camsid).HasColumnName("CAMSId");
            entity.Property(e => e.CapitalContributionLockInPeriodInDays).HasMaxLength(255);
            entity.Property(e => e.CatchUp).HasMaxLength(255);
            entity.Property(e => e.CategoryTypeId).HasMaxLength(255);
            entity.Property(e => e.CategoryTypeProductType).HasMaxLength(255);
            entity.Property(e => e.Cpercentage)
                .HasMaxLength(255)
                .HasColumnName("CPercentage");
            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedOn).HasMaxLength(255);
            entity.Property(e => e.CurrencyId).HasMaxLength(255);
            entity.Property(e => e.Custodian).HasMaxLength(255);
            entity.Property(e => e.EligibleInvestors).HasMaxLength(255);
            entity.Property(e => e.Facode)
                .HasMaxLength(255)
                .HasColumnName("FACode");
            entity.Property(e => e.Farta)
                .HasMaxLength(255)
                .HasColumnName("FARTA");
            entity.Property(e => e.Fashortname)
                .HasMaxLength(255)
                .HasColumnName("FAshortname");
            entity.Property(e => e.FrequencyOfReportingId).HasMaxLength(255);
            entity.Property(e => e.InvestmentObjective).HasMaxLength(255);
            entity.Property(e => e.InvestmentStrategy).HasMaxLength(255);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsAumpresent)
                .HasMaxLength(255)
                .HasColumnName("IsAUMPresent");
            entity.Property(e => e.IsCcApplicable).HasMaxLength(255);
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsOpenEnded).HasMaxLength(255);
            entity.Property(e => e.MaturityDate).HasMaxLength(255);
            entity.Property(e => e.MinimumInvestmentDenomination).HasMaxLength(255);
            entity.Property(e => e.PaymentAggregatorListedOnExchange).HasMaxLength(255);
            entity.Property(e => e.PayoutTimeline).HasMaxLength(255);
            entity.Property(e => e.ProductLaunchDate).HasMaxLength(255);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.ProductShortName).HasMaxLength(255);
            entity.Property(e => e.ProductStatus).HasMaxLength(255);
            entity.Property(e => e.RecommendedTenureMinimumInvestment).HasMaxLength(255);
            entity.Property(e => e.Regulator).HasMaxLength(255);
            entity.Property(e => e.SponsorName).HasMaxLength(255);
            entity.Property(e => e.StartDate)
                .HasMaxLength(255)
                .HasColumnName("_StartDate");
            entity.Property(e => e.SubscriptionsIdRedemptionsId).HasMaxLength(255);
            entity.Property(e => e.UnderlyingAssetClasses).HasMaxLength(255);
            entity.Property(e => e.Рсм)
                .HasMaxLength(255)
                .HasColumnName("РСМ");
        });

        modelBuilder.Entity<Geofencingrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Uniquid).HasName("PRIMARY");

            entity.ToTable("geofencingrequestresponse");

            entity.Property(e => e.Uniquid).HasColumnName("uniquid");
            entity.Property(e => e.Asn)
                .HasMaxLength(200)
                .HasColumnName("asn");
            entity.Property(e => e.Browser).HasMaxLength(100);
            entity.Property(e => e.City)
                .HasMaxLength(500)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .HasColumnName("country");
            entity.Property(e => e.Device).HasMaxLength(100);
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.Id)
                .HasMaxLength(200)
                .HasColumnName("id");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Ip)
                .HasMaxLength(500)
                .HasColumnName("ip");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Latitude)
                .HasMaxLength(200)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasMaxLength(200)
                .HasColumnName("longitude");
            entity.Property(e => e.OperatingSystem).HasMaxLength(100);
            entity.Property(e => e.PatronId)
                .HasMaxLength(200)
                .HasColumnName("patronId");
            entity.Property(e => e.Riskip).HasColumnName("riskip");
            entity.Property(e => e.State)
                .HasMaxLength(100)
                .HasColumnName("state");
            entity.Property(e => e.StateCode)
                .HasMaxLength(100)
                .HasColumnName("stateCode");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Timezone)
                .HasMaxLength(200)
                .HasColumnName("timezone");
            entity.Property(e => e.Url)
                .HasColumnType("text")
                .HasColumnName("url");
            entity.Property(e => e.UserAgent).HasMaxLength(1000);
            entity.Property(e => e.ValidUser).HasColumnName("validUser");
            entity.Property(e => e.ZipCode)
                .HasMaxLength(10)
                .HasColumnName("zipCode");
        });

        modelBuilder.Entity<GetPanAadharUrl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("GetPanAadharUrl");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.InvId).HasMaxLength(50);
            entity.Property(e => e.Request).HasColumnType("text");
            entity.Property(e => e.Requesttimestemp).HasColumnType("datetime");
            entity.Property(e => e.Response).HasColumnType("text");
        });

        modelBuilder.Entity<IbeatsDocumentTypeMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("IBeatsDocumentTypeMaster");

            entity.Property(e => e.Cbecode).HasColumnName("CBECode");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IbeatsDocId).HasColumnName("IBeatsDocId");
            entity.Property(e => e.IbeatsDocIdList)
                .HasMaxLength(10)
                .HasColumnName("IBeatsDocIdList");
            entity.Property(e => e.IbeatsDocName)
                .HasMaxLength(100)
                .HasColumnName("IBeatsDocName");
            entity.Property(e => e.IbeatsDocType)
                .HasMaxLength(10)
                .HasColumnName("IBeatsDocType");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<IbeatsMasterMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("IBeatsMasterMapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IbeatsCode)
                .HasMaxLength(30)
                .HasColumnName("IBeatsCode");
            entity.Property(e => e.IbeatsDisplayName)
                .HasMaxLength(100)
                .HasColumnName("IBeatsDisplayName");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<IbeatsPoaGpaBpaFlagsMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("IBeatsPoaGpaBpaFlagsMapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PoaGpaBpaFlag).HasMaxLength(1);
        });

        modelBuilder.Entity<IbeatsProdctMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("IBeatsProdctMapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IbeatsProductId).HasColumnName("IBeatsProductId");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<IbeatsResposeMassage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("IbeatsResposeMassage");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountCode).HasMaxLength(20);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Invid).HasColumnName("invid");
        });

        modelBuilder.Entity<Incrementalnumber>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("incrementalnumber");

            entity.Property(e => e.NextNumber).HasDefaultValueSql("'1'");
            entity.Property(e => e.Purpose).HasMaxLength(50);
        });

        modelBuilder.Entity<Kracountrycodemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("kracountrycodemaster");

            entity.Property(e => e.CountryCode).HasMaxLength(10);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CvlCountryId).HasMaxLength(10);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Kraoccupationmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("kraoccupationmaster");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.IncomeCode).HasMaxLength(20);
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.NeoCode).HasMaxLength(20);
        });

        modelBuilder.Entity<Krastatemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("krastatemaster");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.StateCodeEnum).HasMaxLength(10);
            entity.Property(e => e.StateName).HasMaxLength(100);
        });

        modelBuilder.Entity<Krastatusmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("krastatusmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Statuscode).HasColumnName("statuscode");
        });

        modelBuilder.Entity<KycDetailsKra>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("KycDetailsKRA");

            entity.Property(e => e.AppAccActivedt)
                .HasMaxLength(30)
                .HasColumnName("APP_ACC_ACTIVEDT");
            entity.Property(e => e.AppAccOpendt)
                .HasMaxLength(30)
                .HasColumnName("APP_ACC_OPENDT");
            entity.Property(e => e.AppAccUpdtdt)
                .HasMaxLength(30)
                .HasColumnName("APP_ACC_UPDTDT");
            entity.Property(e => e.AppBranchCode)
                .HasMaxLength(255)
                .HasColumnName("APP_BRANCH_CODE");
            entity.Property(e => e.AppCommenceDt)
                .HasMaxLength(30)
                .HasColumnName("APP_COMMENCE_DT");
            entity.Property(e => e.AppCompStatus)
                .HasMaxLength(255)
                .HasColumnName("APP_COMP_STATUS");
            entity.Property(e => e.AppCorAdd1)
                .HasMaxLength(255)
                .HasColumnName("APP_COR_ADD1");
            entity.Property(e => e.AppCorAdd2)
                .HasMaxLength(255)
                .HasColumnName("APP_COR_ADD2");
            entity.Property(e => e.AppCorAdd3)
                .HasMaxLength(255)
                .HasColumnName("APP_COR_ADD3");
            entity.Property(e => e.AppCorAddDt)
                .HasMaxLength(30)
                .HasColumnName("APP_COR_ADD_DT");
            entity.Property(e => e.AppCorAddProof)
                .HasMaxLength(10)
                .HasColumnName("APP_COR_ADD_PROOF");
            entity.Property(e => e.AppCorAddRef)
                .HasMaxLength(255)
                .HasColumnName("APP_COR_ADD_REF");
            entity.Property(e => e.AppCorCity)
                .HasMaxLength(255)
                .HasColumnName("APP_COR_CITY");
            entity.Property(e => e.AppCorCtry)
                .HasMaxLength(5)
                .HasColumnName("APP_COR_CTRY");
            entity.Property(e => e.AppCorPincd)
                .HasMaxLength(10)
                .HasColumnName("APP_COR_PINCD");
            entity.Property(e => e.AppCorState)
                .HasMaxLength(5)
                .HasColumnName("APP_COR_STATE");
            entity.Property(e => e.AppDate)
                .HasMaxLength(30)
                .HasColumnName("APP_DATE");
            entity.Property(e => e.AppDnlddt)
                .HasMaxLength(30)
                .HasColumnName("APP_DNLDDT");
            entity.Property(e => e.AppDobDt)
                .HasMaxLength(30)
                .HasColumnName("APP_DOB_DT");
            entity.Property(e => e.AppDocProof)
                .HasMaxLength(5)
                .HasColumnName("APP_DOC_PROOF");
            entity.Property(e => e.AppDumpType)
                .HasMaxLength(10)
                .HasColumnName("APP_DUMP_TYPE");
            entity.Property(e => e.AppEmail)
                .HasMaxLength(255)
                .HasColumnName("APP_EMAIL");
            entity.Property(e => e.AppErrorDesc)
                .HasMaxLength(255)
                .HasColumnName("APP_ERROR_DESC");
            entity.Property(e => e.AppExmt)
                .HasMaxLength(5)
                .HasColumnName("APP_EXMT");
            entity.Property(e => e.AppExmtCat)
                .HasMaxLength(255)
                .HasColumnName("APP_EXMT_CAT");
            entity.Property(e => e.AppExmtIdProof)
                .HasMaxLength(10)
                .HasColumnName("APP_EXMT_ID_PROOF");
            entity.Property(e => e.AppFName)
                .HasMaxLength(255)
                .HasColumnName("APP_F_NAME");
            entity.Property(e => e.AppFaxNo)
                .HasMaxLength(20)
                .HasColumnName("APP_FAX_NO");
            entity.Property(e => e.AppFiller1)
                .HasMaxLength(255)
                .HasColumnName("APP_FILLER1");
            entity.Property(e => e.AppFiller2)
                .HasMaxLength(255)
                .HasColumnName("APP_FILLER2");
            entity.Property(e => e.AppFiller3)
                .HasMaxLength(255)
                .HasColumnName("APP_FILLER3");
            entity.Property(e => e.AppGen)
                .HasMaxLength(10)
                .HasColumnName("APP_GEN");
            entity.Property(e => e.AppIncome)
                .HasMaxLength(10)
                .HasColumnName("APP_INCOME");
            entity.Property(e => e.AppIncorpPlc)
                .HasMaxLength(255)
                .HasColumnName("APP_INCORP_PLC");
            entity.Property(e => e.AppInternalRef)
                .HasMaxLength(255)
                .HasColumnName("APP_INTERNAL_REF");
            entity.Property(e => e.AppIopFlg)
                .HasMaxLength(10)
                .HasColumnName("APP_IOP_FLG");
            entity.Property(e => e.AppIpvDate)
                .HasMaxLength(30)
                .HasColumnName("APP_IPV_DATE");
            entity.Property(e => e.AppIpvFlag)
                .HasMaxLength(5)
                .HasColumnName("APP_IPV_FLAG");
            entity.Property(e => e.AppKraInfo)
                .HasMaxLength(255)
                .HasColumnName("APP_KRA_INFO");
            entity.Property(e => e.AppKycMode)
                .HasMaxLength(10)
                .HasColumnName("APP_KYC_MODE");
            entity.Property(e => e.AppMarStatus)
                .HasMaxLength(10)
                .HasColumnName("APP_MAR_STATUS");
            entity.Property(e => e.AppMobNo)
                .HasMaxLength(20)
                .HasColumnName("APP_MOB_NO");
            entity.Property(e => e.AppName)
                .HasMaxLength(255)
                .HasColumnName("APP_NAME");
            entity.Property(e => e.AppNationality)
                .HasMaxLength(5)
                .HasColumnName("APP_NATIONALITY");
            entity.Property(e => e.AppNetworthDt)
                .HasMaxLength(30)
                .HasColumnName("APP_NETWORTH_DT");
            entity.Property(e => e.AppNetwrth)
                .HasMaxLength(255)
                .HasColumnName("APP_NETWRTH");
            entity.Property(e => e.AppNo)
                .HasMaxLength(255)
                .HasColumnName("APP_NO");
            entity.Property(e => e.AppOcc)
                .HasMaxLength(10)
                .HasColumnName("APP_OCC");
            entity.Property(e => e.AppOffNo)
                .HasMaxLength(20)
                .HasColumnName("APP_OFF_NO");
            entity.Property(e => e.AppOthCompStatus)
                .HasMaxLength(255)
                .HasColumnName("APP_OTH_COMP_STATUS");
            entity.Property(e => e.AppOthNationality)
                .HasMaxLength(255)
                .HasColumnName("APP_OTH_NATIONALITY");
            entity.Property(e => e.AppOthOcc)
                .HasMaxLength(255)
                .HasColumnName("APP_OTH_OCC");
            entity.Property(e => e.AppOtherinfo)
                .HasMaxLength(255)
                .HasColumnName("APP_OTHERINFO");
            entity.Property(e => e.AppOthkraBatch)
                .HasMaxLength(255)
                .HasColumnName("APP_OTHKRA_BATCH");
            entity.Property(e => e.AppOthkraCode)
                .HasMaxLength(255)
                .HasColumnName("APP_OTHKRA_CODE");
            entity.Property(e => e.AppPanCopy)
                .HasMaxLength(5)
                .HasColumnName("APP_PAN_COPY");
            entity.Property(e => e.AppPanNo)
                .HasMaxLength(20)
                .HasColumnName("APP_PAN_NO");
            entity.Property(e => e.AppPerAdd1)
                .HasMaxLength(255)
                .HasColumnName("APP_PER_ADD1");
            entity.Property(e => e.AppPerAdd2)
                .HasMaxLength(255)
                .HasColumnName("APP_PER_ADD2");
            entity.Property(e => e.AppPerAdd3)
                .HasMaxLength(255)
                .HasColumnName("APP_PER_ADD3");
            entity.Property(e => e.AppPerAddDt)
                .HasMaxLength(30)
                .HasColumnName("APP_PER_ADD_DT");
            entity.Property(e => e.AppPerAddProof)
                .HasMaxLength(10)
                .HasColumnName("APP_PER_ADD_PROOF");
            entity.Property(e => e.AppPerAddRef)
                .HasMaxLength(255)
                .HasColumnName("APP_PER_ADD_REF");
            entity.Property(e => e.AppPerCity)
                .HasMaxLength(255)
                .HasColumnName("APP_PER_CITY");
            entity.Property(e => e.AppPerCtry)
                .HasMaxLength(5)
                .HasColumnName("APP_PER_CTRY");
            entity.Property(e => e.AppPerPincd)
                .HasMaxLength(10)
                .HasColumnName("APP_PER_PINCD");
            entity.Property(e => e.AppPerState)
                .HasMaxLength(5)
                .HasColumnName("APP_PER_STATE");
            entity.Property(e => e.AppPolConn)
                .HasMaxLength(10)
                .HasColumnName("APP_POL_CONN");
            entity.Property(e => e.AppPosCode)
                .HasMaxLength(255)
                .HasColumnName("APP_POS_CODE");
            entity.Property(e => e.AppRegno)
                .HasMaxLength(255)
                .HasColumnName("APP_REGNO");
            entity.Property(e => e.AppRemarks)
                .HasMaxLength(255)
                .HasColumnName("APP_REMARKS");
            entity.Property(e => e.AppReqDate)
                .HasMaxLength(30)
                .HasColumnName("APP_REQ_DATE");
            entity.Property(e => e.AppResNo)
                .HasMaxLength(20)
                .HasColumnName("APP_RES_NO");
            entity.Property(e => e.AppResStatus)
                .HasMaxLength(5)
                .HasColumnName("APP_RES_STATUS");
            entity.Property(e => e.AppResStatusProof)
                .HasMaxLength(255)
                .HasColumnName("APP_RES_STATUS_PROOF");
            entity.Property(e => e.AppResponseDate)
                .HasMaxLength(30)
                .HasColumnName("APP_RESPONSE_DATE");
            entity.Property(e => e.AppSignature)
                .HasMaxLength(255)
                .HasColumnName("APP_SIGNATURE");
            entity.Property(e => e.AppStatus)
                .HasMaxLength(10)
                .HasColumnName("APP_STATUS");
            entity.Property(e => e.AppStatusdt)
                .HasMaxLength(30)
                .HasColumnName("APP_STATUSDT");
            entity.Property(e => e.AppTotalRec).HasColumnName("APP_TOTAL_REC");
            entity.Property(e => e.AppType)
                .HasMaxLength(10)
                .HasColumnName("APP_TYPE");
            entity.Property(e => e.AppUidNo)
                .HasMaxLength(5)
                .HasColumnName("APP_UID_NO");
            entity.Property(e => e.AppUidToken)
                .HasMaxLength(255)
                .HasColumnName("APP_UID_TOKEN");
            entity.Property(e => e.AppVerNo)
                .HasMaxLength(10)
                .HasColumnName("APP_VER_NO");
            entity.Property(e => e.DataModificationCheckedOn).HasColumnType("datetime");
            entity.Property(e => e.IsPanmodified).HasColumnName("IsPANModified");
        });

        modelBuilder.Entity<Kycdetailkramaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("kycdetailkramaster");

            entity.Property(e => e.CreatedBy).HasMaxLength(512);
            entity.Property(e => e.CreatedOn).HasMaxLength(512);
            entity.Property(e => e.IsActive).HasMaxLength(512);
            entity.Property(e => e.IsDeleted).HasMaxLength(512);
            entity.Property(e => e.IsoCode).HasMaxLength(512);
            entity.Property(e => e.ModifiedBy).HasMaxLength(512);
            entity.Property(e => e.ModifiedOn).HasMaxLength(512);
            entity.Property(e => e.StateName).HasMaxLength(512);
        });

        modelBuilder.Entity<LobMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("LobMaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailId).HasColumnType("text");
            entity.Property(e => e.Lob).HasMaxLength(250);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Loginattempthistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("loginattempthistory");

            entity.Property(e => e.Browser).HasMaxLength(100);
            entity.Property(e => e.Device).HasMaxLength(100);
            entity.Property(e => e.Ip).HasMaxLength(500);
            entity.Property(e => e.OperatingSystem).HasMaxLength(100);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserAgent).HasMaxLength(1000);
        });

        modelBuilder.Entity<ManagementFee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("managementFees");

            entity.Property(e => e.Corpusrange)
                .HasMaxLength(250)
                .HasColumnName("corpusrange");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Externaldistributorid).HasColumnName("externaldistributorid");
            entity.Property(e => e.Frequency).HasMaxLength(250);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ManagementFee1)
                .HasPrecision(18, 2)
                .HasColumnName("ManagementFee");
            entity.Property(e => e.MaximumCorpus).HasPrecision(18, 2);
            entity.Property(e => e.MinimumCorpus).HasPrecision(18, 2);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Productid).HasColumnName("productid");
        });

        modelBuilder.Entity<Messageoutbox>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("messageoutbox");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invd).HasColumnName("invd");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Issmssent).HasColumnName("issmssent");
            entity.Property(e => e.Messagebody)
                .HasColumnType("text")
                .HasColumnName("messagebody");
            entity.Property(e => e.Mobilenumber)
                .HasMaxLength(20)
                .HasColumnName("mobilenumber");
            entity.Property(e => e.Project)
                .HasMaxLength(20)
                .HasColumnName("project");
            entity.Property(e => e.Responsebody)
                .HasColumnType("text")
                .HasColumnName("responsebody");
        });

        modelBuilder.Entity<MfTransactionPurchaseRedemption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("MF_TransactionPurchaseRedemption");

            entity.Property(e => e.AllRedeem).HasMaxLength(1);
            entity.Property(e => e.Amount).HasColumnType("double(18,4)");
            entity.Property(e => e.BuySell).HasMaxLength(1);
            entity.Property(e => e.BuySellType).HasMaxLength(10);
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Dpc)
                .HasMaxLength(1)
                .HasColumnName("DPC");
            entity.Property(e => e.Dptxn)
                .HasMaxLength(10)
                .HasColumnName("DPTxn");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .HasColumnName("EmailID");
            entity.Property(e => e.Euin)
                .HasMaxLength(20)
                .HasColumnName("EUIN");
            entity.Property(e => e.Euinflag)
                .HasMaxLength(1)
                .HasColumnName("EUINFlag");
            entity.Property(e => e.FolioNo).HasMaxLength(20);
            entity.Property(e => e.Ipadd)
                .HasMaxLength(20)
                .HasColumnName("IPAdd");
            entity.Property(e => e.IsSent).HasDefaultValueSql("'0'");
            entity.Property(e => e.Kycstatus)
                .HasMaxLength(1)
                .HasColumnName("KYCStatus");
            entity.Property(e => e.Lob)
                .HasMaxLength(20)
                .HasColumnName("LOB");
            entity.Property(e => e.MandateId)
                .HasMaxLength(10)
                .HasColumnName("MandateID");
            entity.Property(e => e.MemberId).HasMaxLength(20);
            entity.Property(e => e.MinRedeem).HasMaxLength(1);
            entity.Property(e => e.MobileNo).HasMaxLength(10);
            entity.Property(e => e.Orderby).HasMaxLength(20);
            entity.Property(e => e.Param1).HasMaxLength(20);
            entity.Property(e => e.Param2).HasMaxLength(25);
            entity.Property(e => e.Param3).HasMaxLength(20);
            entity.Property(e => e.PassKey).HasMaxLength(10);
            entity.Property(e => e.Password).HasMaxLength(250);
            entity.Property(e => e.Qty).HasColumnType("double(18,4)");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.ReferenceNumber).HasMaxLength(20);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.SchemeCd).HasMaxLength(20);
            entity.Property(e => e.SubBrCode).HasMaxLength(15);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionCode).HasMaxLength(3);
            entity.Property(e => e.TransactionNumber).HasMaxLength(19);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WsAccountCode).HasMaxLength(20);
        });

        modelBuilder.Entity<ModificationRejectionRemarksLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.RejectionRemark).HasColumnType("text");
        });

        modelBuilder.Entity<Modificationaddressdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationaddressdetails");

            entity.Property(e => e.Add1).HasMaxLength(500);
            entity.Property(e => e.Add2).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pin).HasMaxLength(500);
        });

        modelBuilder.Entity<Modificationbankdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationbankdetails");

            entity.Property(e => e.AccountNo).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Modificationdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationdetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RejectionRemark).HasColumnType("text");
            entity.Property(e => e.UccCode).HasMaxLength(100);
        });

        modelBuilder.Entity<Modificationdocumentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationdocumentdetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentExpiryDate).HasMaxLength(250);
            entity.Property(e => e.DocumentFileExtension).HasMaxLength(250);
            entity.Property(e => e.DocumentFileName).HasMaxLength(250);
            entity.Property(e => e.DocumentFilePath).HasMaxLength(250);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Modificationemaildetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationemaildetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NewValue).HasMaxLength(500);
            entity.Property(e => e.OldValue).HasMaxLength(500);
            entity.Property(e => e.OptionFamily).HasMaxLength(250);
        });

        modelBuilder.Entity<Modificationmobiledetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationmobiledetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NewValue).HasMaxLength(20);
            entity.Property(e => e.OldValue).HasMaxLength(20);
            entity.Property(e => e.OptionFamily).HasMaxLength(250);
        });

        modelBuilder.Entity<Modificationstatuslog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("modificationstatuslog");

            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Neomipmsresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("Neomipmsresponse");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(10000);
            entity.Property(e => e.Response).HasMaxLength(5000);
        });

        modelBuilder.Entity<Nomineedocumenttypemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("Nomineedocumenttypemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClientSubTypeId).HasColumnName("clientSubTypeId");
            entity.Property(e => e.ClientTypeId).HasColumnName("clientTypeId");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentName).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsOcrrequired).HasColumnName("IsOCRRequired");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NotificationMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("NotificationMaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DefaultBccAddress).HasMaxLength(500);
            entity.Property(e => e.DefaultCcaddress)
                .HasMaxLength(500)
                .HasColumnName("defaultCCAddress");
            entity.Property(e => e.DefaultFromAddress)
                .HasMaxLength(100)
                .HasColumnName("defaultFromAddress");
            entity.Property(e => e.DefaultToAddress)
                .HasMaxLength(500)
                .HasColumnName("defaultToAddress");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.Templatebody)
                .HasColumnType("text")
                .HasColumnName("templatebody");
            entity.Property(e => e.Templatetype)
                .HasMaxLength(200)
                .HasColumnName("templatetype");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<NotificationMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Attachment)
                .HasColumnType("text")
                .HasColumnName("attachment");
            entity.Property(e => e.BccAddress).HasMaxLength(500);
            entity.Property(e => e.Ccaddress)
                .HasMaxLength(500)
                .HasColumnName("ccaddress");
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.Emailbody)
                .HasColumnType("text")
                .HasColumnName("emailbody");
            entity.Property(e => e.Emailresponse)
                .HasMaxLength(500)
                .HasColumnName("emailresponse");
            entity.Property(e => e.EntityId).HasColumnName("entityId");
            entity.Property(e => e.FromAddress)
                .HasMaxLength(100)
                .HasColumnName("fromAddress");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Ismailsent).HasColumnName("ismailsent");
            entity.Property(e => e.Nmid).HasColumnName("nmid");
            entity.Property(e => e.Subject)
                .HasMaxLength(500)
                .HasColumnName("subject");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
            entity.Property(e => e.ToAddress)
                .HasMaxLength(500)
                .HasColumnName("toAddress");
        });

        modelBuilder.Entity<Nsemastersmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("nsemastersmapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.NseCode).HasMaxLength(50);
        });

        modelBuilder.Entity<Nsetokenrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("nsetokenrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Token)
                .HasColumnType("text")
                .HasColumnName("token");
        });

        modelBuilder.Entity<OmsAmcCodeDetailsUpload>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("OmsAmcCodeDetailsUpload");

            entity.Property(e => e.Amccode).HasMaxLength(100);
            entity.Property(e => e.Canada).HasMaxLength(20);
            entity.Property(e => e.Createdby).HasDefaultValueSql("'0'");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Us).HasMaxLength(20);
        });

        modelBuilder.Entity<OmsNonBusinessDayHolidayMaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("OmsNonBusinessDayHolidayMaster");

            entity.Property(e => e.Createdby).HasDefaultValueSql("'0'");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.SchemeCode).HasMaxLength(100);
            entity.Property(e => e.SchemeName).HasMaxLength(20);
        });

        modelBuilder.Entity<Omsactiveordermaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsactiveordermaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accounttype)
                .HasMaxLength(20)
                .HasColumnName("accounttype");
            entity.Property(e => e.Aif).HasColumnName("aif");
            entity.Property(e => e.Fixedincome).HasColumnName("fixedincome");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Listed).HasColumnName("listed");
            entity.Property(e => e.Mutualfund).HasColumnName("mutualfund");
            entity.Property(e => e.Unlisted).HasColumnName("unlisted");
        });

        modelBuilder.Entity<Omsaiffundetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaiffundetails");

            entity.Property(e => e.AmcName).HasMaxLength(500);
            entity.Property(e => e.Amount).HasPrecision(18, 2);
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.ClientId).HasMaxLength(20);
            entity.Property(e => e.CommitmentAmount).HasPrecision(18, 2);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DematNo).HasMaxLength(50);
            entity.Property(e => e.EquilizationAmount).HasPrecision(18, 2);
            entity.Property(e => e.FolioNo).HasMaxLength(20);
            entity.Property(e => e.GroupId).HasMaxLength(20);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsinCode).HasMaxLength(20);
            entity.Property(e => e.Manufacturer).HasMaxLength(50);
            entity.Property(e => e.OrderType).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(20);
            entity.Property(e => e.SchemeName).HasMaxLength(500);
            entity.Property(e => e.SetupFee).HasPrecision(18, 2);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionTypeName).HasMaxLength(50);
            entity.Property(e => e.TrxType).HasMaxLength(20);
            entity.Property(e => e.Units).HasPrecision(18, 2);
        });

        modelBuilder.Entity<OmsaifpaymentapprovalequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifpaymentapprovalequestDetail");

            entity.HasIndex(e => e.PaymentTransferrequestId, "paymentTransferrequestId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.PaymentTransferrequestId).HasColumnName("paymentTransferrequestId");
            entity.Property(e => e.Utrno)
                .HasMaxLength(100)
                .HasColumnName("utrno")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");

            entity.HasOne(d => d.PaymentTransferrequest).WithMany(p => p.OmsaifpaymentapprovalequestDetails)
                .HasForeignKey(d => d.PaymentTransferrequestId)
                .HasConstraintName("omspaymentapprovalequestDetail_ibfk_11");
        });

        modelBuilder.Entity<Omsaifpaymentapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifpaymentapprovallogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsaifpaymentapprovalrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifpaymentapprovalrequest");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Totalamount)
                .HasPrecision(18, 2)
                .HasColumnName("totalamount");
        });

        modelBuilder.Entity<Omsaifpaymenttransferrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifpaymenttransferrequest");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .HasColumnName("reason");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Totalamount)
                .HasPrecision(18, 2)
                .HasColumnName("totalamount");
        });

        modelBuilder.Entity<OmsaifpaymenttransferrequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifpaymenttransferrequestDetail");

            entity.HasIndex(e => e.PaymentTransferrequestId, "paymentTransferrequestId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.PaymentTransferrequestId).HasColumnName("paymentTransferrequestId");
            entity.Property(e => e.Utrno)
                .HasMaxLength(100)
                .HasColumnName("utrno")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");

            entity.HasOne(d => d.PaymentTransferrequest).WithMany(p => p.OmsaifpaymenttransferrequestDetails)
                .HasForeignKey(d => d.PaymentTransferrequestId)
                .HasConstraintName("omspaymenttransferrequestDetail_ibfk_2");
        });

        modelBuilder.Entity<Omsaifstatusdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifstatusdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientconsenttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("clientconsenttimestamp");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Dealid)
                .HasMaxLength(20)
                .HasColumnName("dealid");
            entity.Property(e => e.Documentstatus)
                .HasMaxLength(20)
                .HasColumnName("documentstatus");
            entity.Property(e => e.Documentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("documentstatustimestamp");
            entity.Property(e => e.Finalstatus)
                .HasMaxLength(20)
                .HasColumnName("finalstatus");
            entity.Property(e => e.Finalstatustimetamp)
                .HasColumnType("datetime")
                .HasColumnName("finalstatustimetamp");
            entity.Property(e => e.Fmapprovaldatetime)
                .HasColumnType("datetime")
                .HasColumnName("fmapprovaldatetime");
            entity.Property(e => e.Fmapprovalstatus)
                .HasMaxLength(20)
                .HasColumnName("fmapprovalstatus");
            entity.Property(e => e.Fmapprovaltimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("fmapprovaltimestamp");
            entity.Property(e => e.Fmapprovaluserid).HasColumnName("fmapprovaluserid");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .HasColumnName("ipaddress");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isfmapprovalpending)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isfmapprovalpending");
            entity.Property(e => e.Istrademailsent)
                .HasDefaultValueSql("'0'")
                .HasColumnName("istrademailsent");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Paymentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("paymentstatustimestamp");
            entity.Property(e => e.Rejectionreason)
                .HasMaxLength(500)
                .HasColumnName("rejectionreason");
            entity.Property(e => e.Rejectionremark)
                .HasMaxLength(100)
                .HasColumnName("rejectionremark");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Stockstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("stockstatustimestamp");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
        });

        modelBuilder.Entity<Omsaifviewcartdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaifviewcartdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Acounttype)
                .HasMaxLength(50)
                .HasColumnName("acounttype");
            entity.Property(e => e.Amcname)
                .HasMaxLength(500)
                .HasColumnName("amcname");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Bankaccountno)
                .HasMaxLength(50)
                .HasColumnName("bankaccountno");
            entity.Property(e => e.Bankername)
                .HasMaxLength(50)
                .HasColumnName("bankername");
            entity.Property(e => e.Bankname)
                .HasMaxLength(50)
                .HasColumnName("bankname");
            entity.Property(e => e.Class)
                .HasMaxLength(50)
                .HasColumnName("class");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(20)
                .HasColumnName("clientcode");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientid)
                .HasMaxLength(20)
                .HasColumnName("clientid");
            entity.Property(e => e.Clientname)
                .HasMaxLength(100)
                .HasColumnName("clientname");
            entity.Property(e => e.Commitmentamount)
                .HasPrecision(18, 2)
                .HasColumnName("commitmentamount");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Cxoname)
                .HasMaxLength(50)
                .HasColumnName("cxoname");
            entity.Property(e => e.Dematstatus)
                .HasMaxLength(20)
                .HasColumnName("dematstatus");
            entity.Property(e => e.Documentdata)
                .HasColumnType("text")
                .HasColumnName("documentdata");
            entity.Property(e => e.Dpid)
                .HasMaxLength(50)
                .HasColumnName("dpid");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Equilizationamount)
                .HasPrecision(18, 2)
                .HasColumnName("equilizationamount");
            entity.Property(e => e.Folio)
                .HasMaxLength(30)
                .HasColumnName("folio");
            entity.Property(e => e.Groupid)
                .HasMaxLength(20)
                .HasColumnName("groupid");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("ifsccode");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isbankpoa)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isbankpoa");
            entity.Property(e => e.Isincode)
                .HasMaxLength(30)
                .HasColumnName("isincode");
            entity.Property(e => e.Isndpms)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isndpms");
            entity.Property(e => e.Isprimarybank)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isprimarybank");
            entity.Property(e => e.Isprimarydp)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isprimarydp");
            entity.Property(e => e.Isprimarypoa)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isprimarypoa");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(50)
                .HasColumnName("manufacturer");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .HasColumnName("mobile");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(50)
                .HasColumnName("ordertype");
            entity.Property(e => e.Ownerid)
                .HasMaxLength(20)
                .HasColumnName("ownerid");
            entity.Property(e => e.Pan)
                .HasMaxLength(12)
                .HasColumnName("pan");
            entity.Property(e => e.Pmsscheme)
                .HasMaxLength(20)
                .HasColumnName("pmsscheme");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.Schmename)
                .HasMaxLength(500)
                .HasColumnName("schmename");
            entity.Property(e => e.Setupfee)
                .HasPrecision(18, 2)
                .HasColumnName("setupfee");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Trxtype)
                .HasMaxLength(30)
                .HasColumnName("trxtype");
            entity.Property(e => e.Ucccode)
                .HasMaxLength(20)
                .HasColumnName("ucccode");
            entity.Property(e => e.Units)
                .HasPrecision(18, 2)
                .HasColumnName("units");
            entity.Property(e => e.Wsaccountcode)
                .HasMaxLength(20)
                .HasColumnName("wsaccountcode");
        });

        modelBuilder.Entity<Omsaiholdinghistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsaiholdinghistory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Acounttype)
                .HasMaxLength(50)
                .HasColumnName("acounttype");
            entity.Property(e => e.Amcname)
                .HasMaxLength(500)
                .HasColumnName("amcname");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Bankaccountno)
                .HasMaxLength(50)
                .HasColumnName("bankaccountno");
            entity.Property(e => e.Bankername)
                .HasMaxLength(50)
                .HasColumnName("bankername");
            entity.Property(e => e.Bankname)
                .HasMaxLength(50)
                .HasColumnName("bankname");
            entity.Property(e => e.Class)
                .HasMaxLength(50)
                .HasColumnName("class");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(20)
                .HasColumnName("clientcode");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientid)
                .HasMaxLength(20)
                .HasColumnName("clientid");
            entity.Property(e => e.Clientname)
                .HasMaxLength(100)
                .HasColumnName("clientname");
            entity.Property(e => e.Commitmentamount)
                .HasPrecision(18, 2)
                .HasColumnName("commitmentamount");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Cxoname)
                .HasMaxLength(50)
                .HasColumnName("cxoname");
            entity.Property(e => e.Dematstatus)
                .HasMaxLength(20)
                .HasColumnName("dematstatus");
            entity.Property(e => e.Dpid)
                .HasMaxLength(50)
                .HasColumnName("dpid");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Equilizationamount)
                .HasPrecision(18, 2)
                .HasColumnName("equilizationamount");
            entity.Property(e => e.Folio)
                .HasMaxLength(30)
                .HasColumnName("folio");
            entity.Property(e => e.Groupid)
                .HasMaxLength(20)
                .HasColumnName("groupid");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(50)
                .HasColumnName("ifsccode");
            entity.Property(e => e.Isactiontakenfrombondteam).HasColumnName("isactiontakenfrombondteam");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isbankpoa)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isbankpoa");
            entity.Property(e => e.Isfmapprovalpending).HasColumnName("isfmapprovalpending");
            entity.Property(e => e.Isincode)
                .HasMaxLength(30)
                .HasColumnName("isincode");
            entity.Property(e => e.Isndpms)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isndpms");
            entity.Property(e => e.Isprimarybank)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isprimarybank");
            entity.Property(e => e.Isprimarydp)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isprimarydp");
            entity.Property(e => e.Isprimarypoa)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isprimarypoa");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(50)
                .HasColumnName("manufacturer");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .HasColumnName("mobile");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(50)
                .HasColumnName("ordertype");
            entity.Property(e => e.Ownerid)
                .HasMaxLength(20)
                .HasColumnName("ownerid");
            entity.Property(e => e.Pan)
                .HasMaxLength(12)
                .HasColumnName("pan");
            entity.Property(e => e.Pmsscheme)
                .HasMaxLength(20)
                .HasColumnName("pmsscheme");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.Refenecenumber)
                .HasMaxLength(20)
                .HasColumnName("refenecenumber");
            entity.Property(e => e.Schmename)
                .HasMaxLength(500)
                .HasColumnName("schmename");
            entity.Property(e => e.Setupfee)
                .HasPrecision(18, 2)
                .HasColumnName("setupfee");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Trxtype)
                .HasMaxLength(30)
                .HasColumnName("trxtype");
            entity.Property(e => e.Ucccode)
                .HasMaxLength(20)
                .HasColumnName("ucccode");
            entity.Property(e => e.Units)
                .HasPrecision(18, 2)
                .HasColumnName("units");
            entity.Property(e => e.Wsaccountcode)
                .HasMaxLength(20)
                .HasColumnName("wsaccountcode");
        });

        modelBuilder.Entity<Omsbonddashboardetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsbonddashboardetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedinterest)
                .HasPrecision(18, 2)
                .HasColumnName("accruedinterest");
            entity.Property(e => e.Actualpriceordered)
                .HasPrecision(18, 2)
                .HasColumnName("actualpriceordered");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Buyer)
                .HasMaxLength(200)
                .HasColumnName("buyer");
            entity.Property(e => e.Calldate)
                .HasColumnType("datetime")
                .HasColumnName("calldate");
            entity.Property(e => e.Dealdate)
                .HasColumnType("datetime")
                .HasColumnName("dealdate");
            entity.Property(e => e.Facevalue)
                .HasPrecision(18, 4)
                .HasColumnName("facevalue");
            entity.Property(e => e.Interestrate)
                .HasPrecision(18, 4)
                .HasColumnName("interestrate");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Issuancedate)
                .HasColumnType("datetime")
                .HasColumnName("issuancedate");
            entity.Property(e => e.Maturityamount)
                .HasPrecision(18, 4)
                .HasColumnName("maturityamount");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("datetime")
                .HasColumnName("maturitydate");
            entity.Property(e => e.Maturityprice)
                .HasPrecision(18, 4)
                .HasColumnName("maturityprice");
            entity.Property(e => e.Maturityvalue)
                .HasPrecision(18, 4)
                .HasColumnName("maturityvalue");
            entity.Property(e => e.Noofdays).HasColumnName("noofdays");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Platform)
                .HasMaxLength(200)
                .HasColumnName("platform");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Seller)
                .HasMaxLength(200)
                .HasColumnName("seller");
            entity.Property(e => e.Sendfor)
                .HasMaxLength(200)
                .HasColumnName("sendfor");
            entity.Property(e => e.Settlment)
                .HasMaxLength(200)
                .HasColumnName("settlment");
            entity.Property(e => e.Stampduty)
                .HasPrecision(18, 4)
                .HasColumnName("stampduty");
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .HasColumnName("status");
            entity.Property(e => e.Tcwithoutstampduty)
                .HasPrecision(18, 4)
                .HasColumnName("tcwithoutstampduty");
            entity.Property(e => e.Tcwithstampduty)
                .HasPrecision(18, 4)
                .HasColumnName("tcwithstampduty");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Tradetime)
                .HasColumnType("datetime")
                .HasColumnName("tradetime");
            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("valuedate");
            entity.Property(e => e.Yeild)
                .HasPrecision(18, 4)
                .HasColumnName("yeild");
        });

        modelBuilder.Entity<Omsbonddatalog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsbonddatalogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedinterest)
                .HasPrecision(18, 4)
                .HasColumnName("accruedinterest");
            entity.Property(e => e.Facevalue)
                .HasPrecision(18, 4)
                .HasColumnName("facevalue");
            entity.Property(e => e.Isinno)
                .HasMaxLength(200)
                .HasColumnName("isinno");
            entity.Property(e => e.Issuancedate)
                .HasColumnType("datetime")
                .HasColumnName("issuancedate");
            entity.Property(e => e.Lastinterestpaymentdate)
                .HasColumnType("datetime")
                .HasColumnName("lastinterestpaymentdate");
            entity.Property(e => e.Maturityamount)
                .HasPrecision(18, 4)
                .HasColumnName("maturityamount");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("datetime")
                .HasColumnName("maturitydate");
            entity.Property(e => e.Maturityprice)
                .HasPrecision(18, 4)
                .HasColumnName("maturityprice");
            entity.Property(e => e.Noofdays).HasColumnName("noofdays");
            entity.Property(e => e.Price)
                .HasPrecision(18, 4)
                .HasColumnName("price");
            entity.Property(e => e.Pricedate)
                .HasColumnType("datetime")
                .HasColumnName("pricedate");
            entity.Property(e => e.Quantity)
                .HasPrecision(18, 4)
                .HasColumnName("quantity");
            entity.Property(e => e.Securityname)
                .HasMaxLength(200)
                .HasColumnName("securityname");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("valuedate");
        });

        modelBuilder.Entity<Omsbondinsertionlogdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsbondinsertionlogdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Status)
                .HasMaxLength(200)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Omsbsetradeorder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsbsetradeorders");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedint)
                .HasPrecision(18, 4)
                .HasColumnName("accruedint");
            entity.Property(e => e.Buycustodian)
                .HasMaxLength(255)
                .HasColumnName("buycustodian");
            entity.Property(e => e.Buycustodianconfirmation)
                .HasMaxLength(255)
                .HasColumnName("buycustodianconfirmation");
            entity.Property(e => e.Buyer)
                .HasMaxLength(255)
                .HasColumnName("buyer");
            entity.Property(e => e.Buyerconfirmation)
                .HasMaxLength(255)
                .HasColumnName("buyerconfirmation");
            entity.Property(e => e.Consideration)
                .HasPrecision(18, 4)
                .HasColumnName("consideration");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Dealid)
                .HasMaxLength(255)
                .HasColumnName("dealid");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isin)
                .HasMaxLength(255)
                .HasColumnName("isin");
            entity.Property(e => e.Ismatching)
                .HasDefaultValueSql("'0'")
                .HasColumnName("ismatching");
            entity.Property(e => e.Ondate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("ondate");
            entity.Property(e => e.Payinfund)
                .HasMaxLength(255)
                .HasColumnName("payinfund");
            entity.Property(e => e.Payinsecurity)
                .HasMaxLength(255)
                .HasColumnName("payinsecurity");
            entity.Property(e => e.Payoutfundutrno)
                .HasMaxLength(255)
                .HasColumnName("payoutfundutrno");
            entity.Property(e => e.Payoutsecurity)
                .HasMaxLength(255)
                .HasColumnName("payoutsecurity");
            entity.Property(e => e.Price)
                .HasPrecision(18, 4)
                .HasColumnName("price");
            entity.Property(e => e.Qty)
                .HasPrecision(18, 4)
                .HasColumnName("qty");
            entity.Property(e => e.Reportedsystem)
                .HasMaxLength(255)
                .HasColumnName("reportedsystem");
            entity.Property(e => e.Sellcustodian)
                .HasMaxLength(255)
                .HasColumnName("sellcustodian");
            entity.Property(e => e.Sellcustodianconfirmation)
                .HasMaxLength(255)
                .HasColumnName("sellcustodianconfirmation");
            entity.Property(e => e.Seller)
                .HasMaxLength(255)
                .HasColumnName("seller");
            entity.Property(e => e.Sellerconfirmation)
                .HasMaxLength(255)
                .HasColumnName("sellerconfirmation");
            entity.Property(e => e.Settdate)
                .HasColumnType("datetime")
                .HasColumnName("settdate");
            entity.Property(e => e.Settno)
                .HasMaxLength(255)
                .HasColumnName("settno");
            entity.Property(e => e.Settstatus)
                .HasMaxLength(50)
                .HasColumnName("settstatus");
            entity.Property(e => e.Setttype)
                .HasMaxLength(10)
                .HasColumnName("setttype");
            entity.Property(e => e.Stampdutyvalue)
                .HasPrecision(18, 4)
                .HasColumnName("stampdutyvalue");
            entity.Property(e => e.Symbol)
                .HasMaxLength(255)
                .HasColumnName("symbol");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(18, 4)
                .HasColumnName("totalconsideration");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Tradevalue)
                .HasPrecision(18, 4)
                .HasColumnName("tradevalue");
            entity.Property(e => e.Uploadedby).HasColumnName("uploadedby");
        });

        modelBuilder.Entity<Omsbuysellorderdashboardatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsbuysellorderdashboardata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Bankid).HasColumnName("bankid");
            entity.Property(e => e.Buyselltype)
                .HasMaxLength(20)
                .HasColumnName("buyselltype");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(20)
                .HasColumnName("clientcode");
            entity.Property(e => e.Clientname)
                .HasMaxLength(200)
                .HasColumnName("clientname");
            entity.Property(e => e.Dpid).HasColumnName("dpid");
            entity.Property(e => e.Email)
                .HasMaxLength(200)
                .HasColumnName("email");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactiontakenfrombondteam).HasColumnName("isactiontakenfrombondteam");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isfmapprovalpending)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isfmapprovalpending");
            entity.Property(e => e.Isincode)
                .HasMaxLength(50)
                .HasColumnName("isincode");
            entity.Property(e => e.Isndpms)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isndpms");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Mobile)
                .HasMaxLength(15)
                .HasColumnName("mobile");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(100)
                .HasColumnName("ordertype");
            entity.Property(e => e.Pan)
                .HasMaxLength(10)
                .HasColumnName("pan");
            entity.Property(e => e.Platform)
                .HasMaxLength(20)
                .HasColumnName("platform");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .HasColumnName("referencenumber");
            entity.Property(e => e.Scripid).HasColumnName("scripid");
            entity.Property(e => e.Securityname)
                .HasMaxLength(500)
                .HasColumnName("securityname");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Tradetime)
                .HasColumnType("datetime")
                .HasColumnName("tradetime");
        });

        modelBuilder.Entity<Omscbricstraderecord>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omscbricstraderecords");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedinterest)
                .HasPrecision(18, 4)
                .HasColumnName("accruedinterest");
            entity.Property(e => e.Buybroker)
                .HasMaxLength(255)
                .HasColumnName("buybroker");
            entity.Property(e => e.Buycustodian)
                .HasMaxLength(255)
                .HasColumnName("buycustodian");
            entity.Property(e => e.Buyer)
                .HasMaxLength(255)
                .HasColumnName("buyer");
            entity.Property(e => e.Buyerdealtype)
                .HasMaxLength(50)
                .HasColumnName("buyerdealtype");
            entity.Property(e => e.Buyerremarks)
                .HasMaxLength(255)
                .HasColumnName("buyerremarks");
            entity.Property(e => e.Consideration)
                .HasPrecision(18, 4)
                .HasColumnName("consideration");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Descriptor)
                .HasMaxLength(255)
                .HasColumnName("descriptor");
            entity.Property(e => e.Intention)
                .HasMaxLength(50)
                .HasColumnName("intention");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isin)
                .HasMaxLength(255)
                .HasColumnName("isin");
            entity.Property(e => e.Ismatching)
                .HasDefaultValueSql("'0'")
                .HasColumnName("ismatching");
            entity.Property(e => e.Issuetype)
                .HasMaxLength(50)
                .HasColumnName("issuetype");
            entity.Property(e => e.Ondate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("ondate");
            entity.Property(e => e.Price)
                .HasPrecision(18, 4)
                .HasColumnName("price");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Reportedtiming)
                .HasColumnType("datetime")
                .HasColumnName("reportedtiming");
            entity.Property(e => e.Sellbroker)
                .HasMaxLength(255)
                .HasColumnName("sellbroker");
            entity.Property(e => e.Sellcustodian)
                .HasMaxLength(255)
                .HasColumnName("sellcustodian");
            entity.Property(e => e.Seller)
                .HasMaxLength(255)
                .HasColumnName("seller");
            entity.Property(e => e.Sellerdealtype)
                .HasMaxLength(50)
                .HasColumnName("sellerdealtype");
            entity.Property(e => e.Sellerremarks)
                .HasMaxLength(255)
                .HasColumnName("sellerremarks");
            entity.Property(e => e.Settledate)
                .HasColumnType("datetime")
                .HasColumnName("settledate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Transactionno)
                .HasMaxLength(255)
                .HasColumnName("transactionno");
            entity.Property(e => e.Uploadedby).HasColumnName("uploadedby");
            entity.Property(e => e.Value)
                .HasPrecision(18, 4)
                .HasColumnName("value");
        });

        modelBuilder.Entity<Omsclientconsentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsclientconsentdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Omsclientconsentresponsedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsclientconsentresponsedetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(20)
                .HasColumnName("clientcode");
            entity.Property(e => e.Consenton)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("consenton");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Omsdashboard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdashboard");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Alldocumentsuploadedverifiedby).HasColumnName("alldocumentsuploadedverifiedby");
            entity.Property(e => e.Alldocumentsuploadedverifiedtimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("alldocumentsuploadedverifiedtimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientname)
                .HasMaxLength(500)
                .HasColumnName("clientname");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isalldocumentsuploaded).HasColumnName("isalldocumentsuploaded");
            entity.Property(e => e.Isalldocumentsuploadedverified).HasColumnName("isalldocumentsuploadedverified");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.Isinno)
                .HasMaxLength(20)
                .HasColumnName("isinno");
            entity.Property(e => e.Isnseuploaded).HasColumnName("isnseuploaded");
            entity.Property(e => e.Ispaymentuploaded).HasColumnName("ispaymentuploaded");
            entity.Property(e => e.Ispaymentuploadedverified).HasColumnName("ispaymentuploadedverified");
            entity.Property(e => e.Isstocktrnasferuploaded).HasColumnName("isstocktrnasferuploaded");
            entity.Property(e => e.Isstocktrnasferuploadedverified).HasColumnName("isstocktrnasferuploadedverified");
            entity.Property(e => e.Modifiedby).HasColumnName("modifiedby");
            entity.Property(e => e.Modifiedon)
                .HasColumnType("datetime")
                .HasColumnName("modifiedon");
            entity.Property(e => e.Nseuploadedby).HasColumnName("nseuploadedby");
            entity.Property(e => e.Nseuploadedtimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("nseuploadedtimestamp");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Paymentuploadedby).HasColumnName("paymentuploadedby");
            entity.Property(e => e.Paymentuploadedtimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("paymentuploadedtimestamp");
            entity.Property(e => e.Paymentuploadedverifiedby).HasColumnName("paymentuploadedverifiedby");
            entity.Property(e => e.Paymentuploadedverifiedtimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("paymentuploadedverifiedtimestamp");
            entity.Property(e => e.Quantity)
                .HasPrecision(18, 2)
                .HasColumnName("quantity");
            entity.Property(e => e.Referenceno)
                .HasMaxLength(100)
                .HasColumnName("referenceno");
            entity.Property(e => e.Securityname)
                .HasMaxLength(500)
                .HasColumnName("securityname");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Stocktransferuploadedby).HasColumnName("stocktransferuploadedby");
            entity.Property(e => e.Stocktransferuploadedtimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("stocktransferuploadedtimestamp");
            entity.Property(e => e.Stocktrnasferuploadedverifiedby).HasColumnName("stocktrnasferuploadedverifiedby");
            entity.Property(e => e.Stocktrnasferuploadedverifiedtimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("stocktrnasferuploadedverifiedtimestamp");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(18, 2)
                .HasColumnName("totalconsideration");
            entity.Property(e => e.Tradeexeccutiondate)
                .HasColumnType("datetime")
                .HasColumnName("tradeexeccutiondate");
            entity.Property(e => e.Tradestatus).HasColumnName("tradestatus");
        });

        modelBuilder.Entity<Omsdashboardvisibility>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Omsdashboardvisibility");

            entity.Property(e => e.Bonddashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("bonddashboard");
            entity.Property(e => e.Bondops).HasColumnName("bondops");
            entity.Property(e => e.Createorders)
                .HasDefaultValueSql("'0'")
                .HasColumnName("createorders");
            entity.Property(e => e.Cxodashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("cxodashboard");
            entity.Property(e => e.Dealerdashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("dealerdashboard");
            entity.Property(e => e.FMdashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("fMdashboard");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isdeleted)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isdeleted");
            entity.Property(e => e.Opsaifinternal)
                .HasDefaultValueSql("'0'")
                .HasColumnName("opsaifinternal");
            entity.Property(e => e.Opsdashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("opsdashboard");
            entity.Property(e => e.Overallashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("overallashboard");
            entity.Property(e => e.Pmsopsdashboard)
                .HasDefaultValueSql("'0'")
                .HasColumnName("pmsopsdashboard");
            entity.Property(e => e.Pmssaifinternal)
                .HasDefaultValueSql("'0'")
                .HasColumnName("pmssaifinternal");
            entity.Property(e => e.Reports)
                .HasDefaultValueSql("'0'")
                .HasColumnName("reports");
            entity.Property(e => e.Roleid).HasColumnName("roleid");
            entity.Property(e => e.Rolename)
                .HasMaxLength(20)
                .HasColumnName("rolename");
        });

        modelBuilder.Entity<Omsdealerdashboardatainsertion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdealerdashboardatainsertion");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Actualpriceordered)
                .HasPrecision(18, 4)
                .HasColumnName("actualpriceordered");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Quantitybooked).HasColumnName("quantitybooked");
            entity.Property(e => e.Totalconsideration).HasPrecision(18, 4);
        });

        modelBuilder.Entity<Omsdealsheetuploaddetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdealsheetuploaddetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Omsdocumentapproverejectdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdocumentapproverejectdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Omsdocumentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdocumentdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(20)
                .HasColumnName("clientcode");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Documentexpirydate)
                .HasMaxLength(250)
                .HasColumnName("documentexpirydate");
            entity.Property(e => e.Documentfileextension)
                .HasMaxLength(200)
                .HasColumnName("documentfileextension");
            entity.Property(e => e.Documentfilename)
                .HasMaxLength(200)
                .HasColumnName("documentfilename");
            entity.Property(e => e.Documentfilepath)
                .HasMaxLength(200)
                .HasColumnName("documentfilepath");
            entity.Property(e => e.Documenttypeid).HasColumnName("documenttypeid");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isdeleted)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isdeleted");
            entity.Property(e => e.Modifiedby).HasColumnName("modifiedby");
            entity.Property(e => e.Modifiedon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("modifiedon");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Orderype)
                .HasMaxLength(30)
                .HasColumnName("orderype");
            entity.Property(e => e.Pagescount).HasColumnName("pagescount");
            entity.Property(e => e.Uploadername)
                .HasMaxLength(200)
                .HasColumnName("uploadername");
        });

        modelBuilder.Entity<Omsdocumenttypemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdocumenttypemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createby).HasColumnName("createby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Documentname)
                .HasMaxLength(500)
                .HasColumnName("documentname");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Modifiedby).HasColumnName("modifiedby");
            entity.Property(e => e.Modifiedon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("modifiedon");
        });

        modelBuilder.Entity<Omsdownloadreportshistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsdownloadreportshistory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Clientname)
                .HasMaxLength(100)
                .HasColumnName("clientname");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Formattype)
                .HasMaxLength(10)
                .HasColumnName("formattype");
            entity.Property(e => e.Fromdate)
                .HasColumnType("datetime")
                .HasColumnName("fromdate");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isdeleted)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isdeleted");
            entity.Property(e => e.Isin)
                .HasMaxLength(50)
                .HasColumnName("isin");
            entity.Property(e => e.Platform)
                .HasMaxLength(20)
                .HasColumnName("platform");
            entity.Property(e => e.Productype)
                .HasMaxLength(100)
                .HasColumnName("productype");
            entity.Property(e => e.Scripname)
                .HasMaxLength(500)
                .HasColumnName("scripname");
            entity.Property(e => e.Searchby)
                .HasMaxLength(20)
                .HasColumnName("searchby");
            entity.Property(e => e.Todate)
                .HasColumnType("datetime")
                .HasColumnName("todate");
            entity.Property(e => e.Tradestatus)
                .HasMaxLength(20)
                .HasColumnName("tradestatus");
        });

        modelBuilder.Entity<Omsemailsendername>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsemailsendername");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Fromaddress)
                .HasMaxLength(100)
                .HasColumnName("fromaddress");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Subproductid).HasColumnName("subproductid");
        });

        modelBuilder.Entity<Omsenummaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsenummaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Enumname)
                .HasMaxLength(200)
                .HasColumnName("enumname");
            entity.Property(e => e.Enumtype)
                .HasMaxLength(100)
                .HasColumnName("enumtype");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isdeleted)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isdeleted");
            entity.Property(e => e.Modifiedby).HasColumnName("modifiedby");
            entity.Property(e => e.Modifiedon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("modifiedon");
            entity.Property(e => e.SortRank).HasColumnName("sortRank");
        });

        modelBuilder.Entity<Omsfixedincomedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsfixedincomedetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Actualpriceordered)
                .HasPrecision(18, 4)
                .HasColumnName("actualpriceordered");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Buyselltype)
                .HasMaxLength(20)
                .HasColumnName("buyselltype");
            entity.Property(e => e.Dealid)
                .HasMaxLength(100)
                .HasColumnName("dealid");
            entity.Property(e => e.Facevalue)
                .HasPrecision(18, 2)
                .HasColumnName("facevalue");
            entity.Property(e => e.InterestPaymentOnMaturity)
                .HasMaxLength(5)
                .HasColumnName("interestPaymentOnMaturity");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Ismatchedwithdealtransact).HasDefaultValueSql("'0'");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.PaymentFrequency)
                .HasMaxLength(20)
                .HasColumnName("paymentFrequency");
            entity.Property(e => e.Quantitybooked).HasColumnName("quantitybooked");
            entity.Property(e => e.Reason)
                .HasMaxLength(150)
                .HasColumnName("reason");
            entity.Property(e => e.Reconcilationtime)
                .HasColumnType("datetime")
                .HasColumnName("reconcilationtime");
            entity.Property(e => e.Remark)
                .HasMaxLength(200)
                .HasColumnName("remark");
            entity.Property(e => e.Scripid).HasColumnName("scripid");
            entity.Property(e => e.Settlmentdate)
                .HasColumnType("datetime")
                .HasColumnName("settlmentdate");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(18, 4)
                .HasColumnName("totalconsideration");
        });

        modelBuilder.Entity<Omsfixedincomeentityname>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsfixedincomeentitynames");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Shopname)
                .HasMaxLength(500)
                .HasColumnName("SHOPName");
        });

        modelBuilder.Entity<Omsfmapprovaldatarequesterdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsfmapprovaldatarequesterdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
        });

        modelBuilder.Entity<Omsfmapproverejectlogdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsfmapproverejectlogdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsholdingbuysellorderhistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsholdingbuysellorderhistory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accounttype)
                .HasMaxLength(100)
                .HasColumnName("accounttype");
            entity.Property(e => e.Accruedinterest)
                .HasPrecision(18, 4)
                .HasColumnName("accruedinterest");
            entity.Property(e => e.Actualpriceordered)
                .HasPrecision(18, 4)
                .HasColumnName("actualpriceordered");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 4)
                .HasColumnName("amount");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Bankid).HasColumnName("bankid");
            entity.Property(e => e.Bankpoa).HasColumnName("bankpoa");
            entity.Property(e => e.Buyer)
                .HasMaxLength(200)
                .HasColumnName("buyer");
            entity.Property(e => e.Buyselltype)
                .HasMaxLength(10)
                .HasColumnName("buyselltype");
            entity.Property(e => e.Calldate)
                .HasColumnType("datetime")
                .HasColumnName("calldate");
            entity.Property(e => e.Classtradecode)
                .HasMaxLength(50)
                .HasColumnName("classtradecode");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(200)
                .HasColumnName("clientcode");
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientconsentdatetime)
                .HasColumnType("datetime")
                .HasColumnName("clientconsentdatetime");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientid)
                .HasMaxLength(20)
                .HasColumnName("clientid");
            entity.Property(e => e.Clientname)
                .HasMaxLength(200)
                .HasColumnName("clientname");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Dealdate)
                .HasColumnType("datetime")
                .HasColumnName("dealdate");
            entity.Property(e => e.Dealid)
                .HasMaxLength(20)
                .HasColumnName("dealid");
            entity.Property(e => e.Documentstatus)
                .HasMaxLength(10)
                .HasColumnName("documentstatus");
            entity.Property(e => e.Dpid).HasColumnName("dpid");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Entityname)
                .HasMaxLength(100)
                .HasColumnName("entityname");
            entity.Property(e => e.Entityshortname)
                .HasMaxLength(20)
                .HasColumnName("entityshortname");
            entity.Property(e => e.Facevalue)
                .HasPrecision(18, 4)
                .HasColumnName("facevalue");
            entity.Property(e => e.Flowprice)
                .HasPrecision(18, 4)
                .HasColumnName("flowprice");
            entity.Property(e => e.Groupid)
                .HasMaxLength(20)
                .HasColumnName("groupid");
            entity.Property(e => e.InterestPaymentOnMaturity)
                .HasMaxLength(5)
                .HasColumnName("interestPaymentOnMaturity");
            entity.Property(e => e.Interestrate)
                .HasPrecision(18, 4)
                .HasColumnName("interestrate");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.IsFmapprovalPending)
                .HasDefaultValueSql("'0'")
                .HasColumnName("IsFMApprovalPending");
            entity.Property(e => e.Isactiontakenfrombondteam).HasColumnName("isactiontakenfrombondteam");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.Isincode)
                .HasMaxLength(20)
                .HasColumnName("isincode");
            entity.Property(e => e.Isndpms)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isndpms");
            entity.Property(e => e.Issuancedate)
                .HasColumnType("datetime")
                .HasColumnName("issuancedate");
            entity.Property(e => e.Lastinterestdate)
                .HasColumnType("datetime")
                .HasColumnName("lastinterestdate");
            entity.Property(e => e.Limit)
                .HasMaxLength(10)
                .HasColumnName("limit");
            entity.Property(e => e.Listedeqprice)
                .HasPrecision(18, 4)
                .HasColumnName("listedeqprice");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimetamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimetamp");
            entity.Property(e => e.Marginpercentage)
                .HasPrecision(18, 4)
                .HasColumnName("marginpercentage");
            entity.Property(e => e.Market)
                .HasMaxLength(10)
                .HasColumnName("market");
            entity.Property(e => e.Maturityamount)
                .HasPrecision(18, 4)
                .HasColumnName("maturityamount");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("datetime")
                .HasColumnName("maturitydate");
            entity.Property(e => e.Maturityprice)
                .HasPrecision(18, 4)
                .HasColumnName("maturityprice");
            entity.Property(e => e.Maturityvalue)
                .HasPrecision(18, 4)
                .HasColumnName("maturityvalue");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .HasColumnName("mobile");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(200)
                .HasColumnName("ordertype");
            entity.Property(e => e.Ownerid)
                .HasMaxLength(20)
                .HasColumnName("ownerid");
            entity.Property(e => e.Pan)
                .HasMaxLength(20)
                .HasColumnName("pan");
            entity.Property(e => e.PaymentFrequency)
                .HasMaxLength(20)
                .HasColumnName("paymentFrequency");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Platform)
                .HasMaxLength(200)
                .HasColumnName("platform");
            entity.Property(e => e.Pmsscheme)
                .HasMaxLength(20)
                .HasColumnName("pmsscheme");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Quantitybooked)
                .HasPrecision(18, 4)
                .HasColumnName("quantitybooked");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .HasColumnName("referencenumber");
            entity.Property(e => e.Rejectionreason)
                .HasMaxLength(500)
                .HasColumnName("rejectionreason");
            entity.Property(e => e.Rejectionremark)
                .HasMaxLength(500)
                .HasColumnName("rejectionremark");
            entity.Property(e => e.Remainingquantity)
                .HasPrecision(18, 4)
                .HasColumnName("remainingquantity");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Scriptid).HasColumnName("scriptid");
            entity.Property(e => e.Securityname)
                .HasMaxLength(500)
                .HasColumnName("securityname");
            entity.Property(e => e.Seller)
                .HasMaxLength(200)
                .HasColumnName("seller");
            entity.Property(e => e.Sendfor)
                .HasMaxLength(200)
                .HasColumnName("sendfor");
            entity.Property(e => e.Settlment)
                .HasMaxLength(20)
                .HasColumnName("settlment");
            entity.Property(e => e.Stampduty)
                .HasPrecision(18, 4)
                .HasColumnName("stampduty");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Taxamount)
                .HasPrecision(16, 4)
                .HasDefaultValueSql("'0.0000'")
                .HasColumnName("taxamount");
            entity.Property(e => e.Taxtype)
                .HasMaxLength(20)
                .HasColumnName("taxtype");
            entity.Property(e => e.Tcsamount)
                .HasPrecision(10, 4)
                .HasDefaultValueSql("'0.0000'")
                .HasColumnName("tcsamount");
            entity.Property(e => e.Tcwithoutstampduty)
                .HasPrecision(18, 4)
                .HasColumnName("tcwithoutstampduty");
            entity.Property(e => e.Tcwithstampduty)
                .HasPrecision(18, 4)
                .HasColumnName("tcwithstampduty");
            entity.Property(e => e.Tdsamount)
                .HasPrecision(10, 4)
                .HasDefaultValueSql("'0.0000'")
                .HasColumnName("tdsamount");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(18, 4)
                .HasColumnName("totalconsideration");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Tradetime)
                .HasColumnType("timestamp")
                .HasColumnName("tradetime");
            entity.Property(e => e.Ucccode)
                .HasMaxLength(20)
                .HasColumnName("ucccode");
            entity.Property(e => e.Valuedate)
                .HasColumnType("datetime")
                .HasColumnName("valuedate");
            entity.Property(e => e.Wsaccountcode)
                .HasMaxLength(20)
                .HasColumnName("wsaccountcode");
            entity.Property(e => e.Yield)
                .HasPrecision(18, 4)
                .HasColumnName("yield");
        });

        modelBuilder.Entity<Omsholdingmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsholdingmaster");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Freequantity)
                .HasPrecision(18, 2)
                .HasColumnName("freequantity");
            entity.Property(e => e.Holdquantity)
                .HasPrecision(18, 2)
                .HasColumnName("holdquantity");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Minimumsellprice)
                .HasPrecision(18, 2)
                .HasColumnName("minimumsellprice");
            entity.Property(e => e.Netquantity)
                .HasPrecision(18, 2)
                .HasColumnName("netquantity");
            entity.Property(e => e.Notionalquatity)
                .HasPrecision(18, 2)
                .HasColumnName("notionalquatity");
            entity.Property(e => e.Pledgequantity)
                .HasPrecision(18, 2)
                .HasColumnName("pledgequantity");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.Rangevalue)
                .HasPrecision(18, 2)
                .HasColumnName("rangevalue");
            entity.Property(e => e.Scriptid).HasColumnName("scriptid");
            entity.Property(e => e.Value)
                .HasPrecision(18, 2)
                .HasColumnName("value");
        });

        modelBuilder.Entity<Omsinstrumentmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsinstrumentmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Addedby).HasColumnName("addedby");
            entity.Property(e => e.Addedon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("addedon");
            entity.Property(e => e.Category).HasMaxLength(500);
            entity.Property(e => e.Details)
                .HasMaxLength(100)
                .HasColumnName("details");
            entity.Property(e => e.Instrumentname)
                .HasMaxLength(100)
                .HasColumnName("instrumentname");
            entity.Property(e => e.Instrumentshortname)
                .HasMaxLength(100)
                .HasColumnName("instrumentshortname");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isbuyerallocation).HasColumnName("isbuyerallocation");
            entity.Property(e => e.Isclientconcent).HasColumnName("isclientconcent");
            entity.Property(e => e.Ispricerange).HasColumnName("ispricerange");
            entity.Property(e => e.Modifyby).HasColumnName("modifyby");
            entity.Property(e => e.Modifyon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Pricesource)
                .HasMaxLength(300)
                .HasColumnName("pricesource");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Omslistedeqdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omslistedeqdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Actualpriceordered)
                .HasPrecision(18, 4)
                .HasColumnName("actualpriceordered");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 4)
                .HasColumnName("amount");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Buyselltype)
                .HasMaxLength(20)
                .HasColumnName("buyselltype");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Quantitybooked).HasColumnName("quantitybooked");
            entity.Property(e => e.Reason)
                .HasMaxLength(150)
                .HasColumnName("reason");
            entity.Property(e => e.Remark)
                .HasMaxLength(200)
                .HasColumnName("remark");
            entity.Property(e => e.Scripid).HasColumnName("scripid");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(18, 4)
                .HasColumnName("totalconsideration");
        });

        modelBuilder.Entity<Omslistedequityapproverejectlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omslistedequityapproverejectlogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .HasColumnName("reason");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsmfholdingdatahistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsmfholdingdatahistory");

            entity.Property(e => e.AccountStatus).HasMaxLength(20);
            entity.Property(e => e.AccountType).HasMaxLength(20);
            entity.Property(e => e.AmcName).HasMaxLength(500);
            entity.Property(e => e.Amount).HasPrecision(18, 2);
            entity.Property(e => e.AvailableAmount).HasPrecision(18, 2);
            entity.Property(e => e.AvailableUnits).HasPrecision(18, 2);
            entity.Property(e => e.BankAccountno).HasMaxLength(50);
            entity.Property(e => e.BankName).HasMaxLength(500);
            entity.Property(e => e.BankerName).HasMaxLength(100);
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.ClientConsentMode).HasMaxLength(255);
            entity.Property(e => e.ClientId).HasMaxLength(20);
            entity.Property(e => e.ClientName).HasMaxLength(200);
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.CxonNme).HasMaxLength(100);
            entity.Property(e => e.DematNo).HasMaxLength(50);
            entity.Property(e => e.DematStatus).HasMaxLength(20);
            entity.Property(e => e.DpId).HasMaxLength(200);
            entity.Property(e => e.EiunCode).HasMaxLength(20);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FolioNo).HasMaxLength(20);
            entity.Property(e => e.GroupId).HasMaxLength(20);
            entity.Property(e => e.HoldingPattern).HasMaxLength(20);
            entity.Property(e => e.Ifsccode).HasMaxLength(20);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsNdpms).HasDefaultValueSql("'0'");
            entity.Property(e => e.Isallredeem).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsinCode).HasMaxLength(20);
            entity.Property(e => e.MakerId).HasDefaultValueSql("'0'");
            entity.Property(e => e.MakerTimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.Mode).HasMaxLength(20);
            entity.Property(e => e.OrderType).HasMaxLength(20);
            entity.Property(e => e.Orderby).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(20);
            entity.Property(e => e.Pan).HasMaxLength(10);
            entity.Property(e => e.PmsSchemeName).HasMaxLength(500);
            entity.Property(e => e.ReferenceNumber).HasMaxLength(200);
            entity.Property(e => e.Rejectionreason)
                .HasMaxLength(100)
                .HasColumnName("rejectionreason");
            entity.Property(e => e.SchemeCode).HasMaxLength(20);
            entity.Property(e => e.SchemeName).HasMaxLength(500);
            entity.Property(e => e.Totalavailableamount)
                .HasPrecision(18, 4)
                .HasColumnName("totalavailableamount");
            entity.Property(e => e.Totalavailableunits)
                .HasPrecision(18, 4)
                .HasColumnName("totalavailableunits");
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionTypeName).HasMaxLength(20);
            entity.Property(e => e.TrxType).HasMaxLength(20);
            entity.Property(e => e.UccCode).HasMaxLength(20);
            entity.Property(e => e.UccCodeType).HasMaxLength(20);
            entity.Property(e => e.Units)
                .HasPrecision(18, 4)
                .HasColumnName("units");
            entity.Property(e => e.WsAccountCode).HasMaxLength(20);
        });

        modelBuilder.Entity<Omsmfstatusdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsmfstatusdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientconsenttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("clientconsenttimestamp");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Dealid)
                .HasMaxLength(20)
                .HasColumnName("dealid");
            entity.Property(e => e.Documentstatus)
                .HasMaxLength(20)
                .HasColumnName("documentstatus");
            entity.Property(e => e.Documentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("documentstatustimestamp");
            entity.Property(e => e.Finalstatus)
                .HasMaxLength(20)
                .HasColumnName("finalstatus");
            entity.Property(e => e.Finalstatustimetamp)
                .HasColumnType("datetime")
                .HasColumnName("finalstatustimetamp");
            entity.Property(e => e.Fmapprovaldatetime)
                .HasColumnType("datetime")
                .HasColumnName("fmapprovaldatetime");
            entity.Property(e => e.Fmapprovalstatus)
                .HasMaxLength(20)
                .HasColumnName("fmapprovalstatus");
            entity.Property(e => e.Fmapprovaltimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("fmapprovaltimestamp");
            entity.Property(e => e.Fmapprovaluserid).HasColumnName("fmapprovaluserid");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .HasColumnName("ipaddress");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isfmapprovalpending)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isfmapprovalpending");
            entity.Property(e => e.Istrademailsent)
                .HasDefaultValueSql("'0'")
                .HasColumnName("istrademailsent");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Paymentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("paymentstatustimestamp");
            entity.Property(e => e.Rejectionreason)
                .HasMaxLength(500)
                .HasColumnName("rejectionreason");
            entity.Property(e => e.Rejectionremark)
                .HasMaxLength(100)
                .HasColumnName("rejectionremark");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Stockstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("stockstatustimestamp");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
        });

        modelBuilder.Entity<Omsmutualfunddatahistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsmutualfunddatahistory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllRedeemed).HasColumnName("allRedeemed");
            entity.Property(e => e.AmcId).HasColumnName("amcId");
            entity.Property(e => e.AmcName)
                .HasMaxLength(200)
                .HasColumnName("amcName");
            entity.Property(e => e.AvailableAmount)
                .HasPrecision(18, 2)
                .HasColumnName("availableAmount");
            entity.Property(e => e.AvailableUnits).HasColumnName("availableUnits");
            entity.Property(e => e.BankId).HasColumnName("bankId");
            entity.Property(e => e.BankPoa)
                .HasMaxLength(5)
                .HasColumnName("bankPoa");
            entity.Property(e => e.BuyerName)
                .HasMaxLength(200)
                .HasColumnName("buyerName");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(100)
                .HasColumnName("clientCode");
            entity.Property(e => e.ClientName)
                .HasMaxLength(100)
                .HasColumnName("clientName");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdOn");
            entity.Property(e => e.DematAcNo)
                .HasMaxLength(100)
                .HasColumnName("dematAcNo");
            entity.Property(e => e.DpId).HasColumnName("dpId");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.EntityId).HasColumnName("entityId");
            entity.Property(e => e.EntityName)
                .HasMaxLength(200)
                .HasColumnName("entityName");
            entity.Property(e => e.EntityShortName)
                .HasMaxLength(200)
                .HasColumnName("entityShortName");
            entity.Property(e => e.EuinCode)
                .HasMaxLength(100)
                .HasColumnName("euinCode");
            entity.Property(e => e.FolioNo)
                .HasMaxLength(100)
                .HasColumnName("folioNo");
            entity.Property(e => e.HoldingPattern)
                .HasMaxLength(100)
                .HasColumnName("holdingPattern");
            entity.Property(e => e.InvId).HasColumnName("invId");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.IsNdpms).HasColumnName("isNdpms");
            entity.Property(e => e.IsinCode)
                .HasMaxLength(20)
                .HasColumnName("isinCode");
            entity.Property(e => e.MakerId).HasColumnName("makerId");
            entity.Property(e => e.MakerTimeStamp)
                .HasColumnType("datetime")
                .HasColumnName("makerTimeStamp");
            entity.Property(e => e.Mobile)
                .HasMaxLength(12)
                .HasColumnName("mobile");
            entity.Property(e => e.Mode)
                .HasMaxLength(100)
                .HasColumnName("mode");
            entity.Property(e => e.OrderByAmount)
                .HasPrecision(18, 2)
                .HasColumnName("orderByAmount");
            entity.Property(e => e.OrderByUnits).HasColumnName("orderByUnits");
            entity.Property(e => e.OrderType)
                .HasMaxLength(50)
                .HasColumnName("orderType");
            entity.Property(e => e.OrderedBy)
                .HasMaxLength(10)
                .HasColumnName("orderedBy");
            entity.Property(e => e.Pan)
                .HasMaxLength(12)
                .HasColumnName("pan");
            entity.Property(e => e.ProductId).HasColumnName("productId");
            entity.Property(e => e.ReferenceNumber)
                .HasMaxLength(100)
                .HasColumnName("referenceNumber");
            entity.Property(e => e.SchemeCode)
                .HasMaxLength(100)
                .HasColumnName("schemeCode");
            entity.Property(e => e.ScriptId).HasColumnName("scriptId");
            entity.Property(e => e.SecurityName)
                .HasMaxLength(500)
                .HasColumnName("securityName");
            entity.Property(e => e.SellerName)
                .HasMaxLength(200)
                .HasColumnName("sellerName");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.TradeDate)
                .HasColumnType("datetime")
                .HasColumnName("tradeDate");
            entity.Property(e => e.TransactionListType)
                .HasMaxLength(20)
                .HasColumnName("transactionListType");
            entity.Property(e => e.TransactionType)
                .HasMaxLength(20)
                .HasColumnName("transactionType");
            entity.Property(e => e.UccCode)
                .HasMaxLength(50)
                .HasColumnName("uccCode");
        });

        modelBuilder.Entity<Omsmutualfundetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsmutualfundetails");

            entity.Property(e => e.AmcName).HasMaxLength(500);
            entity.Property(e => e.Amount).HasPrecision(18, 2);
            entity.Property(e => e.AvailableAmount).HasPrecision(18, 2);
            entity.Property(e => e.AvailableUnits).HasPrecision(18, 2);
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.ClientId).HasMaxLength(20);
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DematNo).HasMaxLength(50);
            entity.Property(e => e.EiunCode).HasMaxLength(20);
            entity.Property(e => e.FolioNo).HasMaxLength(20);
            entity.Property(e => e.GroupId).HasMaxLength(20);
            entity.Property(e => e.HoldingPattern).HasMaxLength(20);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Isallredeem).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsinCode).HasMaxLength(20);
            entity.Property(e => e.Mode).HasMaxLength(20);
            entity.Property(e => e.OrderType).HasMaxLength(20);
            entity.Property(e => e.Orderby).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(20);
            entity.Property(e => e.SchemeCode).HasMaxLength(20);
            entity.Property(e => e.SchemeName).HasMaxLength(500);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionTypeName).HasMaxLength(20);
            entity.Property(e => e.TrxType).HasMaxLength(20);
        });

        modelBuilder.Entity<Omsmutualfundincomedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsmutualfundincomedetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AllRedeemed).HasColumnName("allRedeemed");
            entity.Property(e => e.Amcid).HasColumnName("amcid");
            entity.Property(e => e.Amcname)
                .HasMaxLength(500)
                .HasColumnName("amcname");
            entity.Property(e => e.ApproverId).HasColumnName("approverId");
            entity.Property(e => e.Approvertimestamp)
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.AvailableAmount)
                .HasPrecision(18, 2)
                .HasColumnName("availableAmount");
            entity.Property(e => e.AvailableUnits).HasColumnName("availableUnits");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdOn");
            entity.Property(e => e.DematAcNo)
                .HasMaxLength(100)
                .HasColumnName("dematAcNo");
            entity.Property(e => e.EuinCode)
                .HasMaxLength(100)
                .HasColumnName("euinCode");
            entity.Property(e => e.FolioNo)
                .HasMaxLength(100)
                .HasColumnName("folioNo");
            entity.Property(e => e.HoldingPattern)
                .HasMaxLength(100)
                .HasColumnName("holdingPattern");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.IsDeleted).HasColumnName("isDeleted");
            entity.Property(e => e.Isincode)
                .HasMaxLength(100)
                .HasColumnName("isincode");
            entity.Property(e => e.MakerId).HasColumnName("makerId");
            entity.Property(e => e.Makertimestamp)
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Mode)
                .HasMaxLength(100)
                .HasColumnName("mode");
            entity.Property(e => e.OrderByAmount)
                .HasPrecision(18, 2)
                .HasColumnName("orderByAmount");
            entity.Property(e => e.OrderByUnits).HasColumnName("orderByUnits");
            entity.Property(e => e.OrderedBy)
                .HasMaxLength(10)
                .HasColumnName("orderedBy");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .HasColumnName("reason");
            entity.Property(e => e.SchemeCode)
                .HasMaxLength(100)
                .HasColumnName("schemeCode");
            entity.Property(e => e.Scripid).HasColumnName("scripid");
            entity.Property(e => e.TradeDate)
                .HasColumnType("datetime")
                .HasColumnName("tradeDate");
            entity.Property(e => e.TransactionType)
                .HasMaxLength(100)
                .HasColumnName("transactionType");
            entity.Property(e => e.TransactionTypeList)
                .HasMaxLength(20)
                .HasColumnName("transactionTypeList");
            entity.Property(e => e.UccCode)
                .HasMaxLength(50)
                .HasColumnName("uccCode");
        });

        modelBuilder.Entity<Omsnotificationmaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("omsnotificationmaster");

            entity.Property(e => e.DefaultCcaddress)
                .HasMaxLength(500)
                .HasColumnName("defaultCCAddress");
            entity.Property(e => e.DefaultFromAddress)
                .HasMaxLength(100)
                .HasColumnName("defaultFromAddress");
            entity.Property(e => e.DefaultToAddress)
                .HasMaxLength(500)
                .HasColumnName("defaultToAddress");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.Templatebody)
                .HasColumnType("text")
                .HasColumnName("templatebody");
            entity.Property(e => e.Templatetype)
                .HasMaxLength(200)
                .HasColumnName("templatetype");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<Omsnsefundetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsnsefundetails");

            entity.Property(e => e.AmcName).HasMaxLength(500);
            entity.Property(e => e.Amount).HasPrecision(18, 2);
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.ClientId).HasMaxLength(20);
            entity.Property(e => e.CommitmentAmount).HasPrecision(18, 2);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DematNo).HasMaxLength(50);
            entity.Property(e => e.EquilizationAmount).HasPrecision(18, 2);
            entity.Property(e => e.FolioNo).HasMaxLength(20);
            entity.Property(e => e.GroupId).HasMaxLength(20);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsinCode).HasMaxLength(20);
            entity.Property(e => e.Manufacturer).HasMaxLength(50);
            entity.Property(e => e.OrderType).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(20);
            entity.Property(e => e.SchemeName).HasMaxLength(500);
            entity.Property(e => e.SetupFee).HasPrecision(18, 2);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionTypeName).HasMaxLength(50);
            entity.Property(e => e.TrxType).HasMaxLength(20);
            entity.Property(e => e.Units).HasPrecision(18, 2);
        });

        modelBuilder.Entity<Omsnseholdinghistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsnseholdinghistory");

            entity.Property(e => e.Accounttype).HasMaxLength(255);
            entity.Property(e => e.Accruedinterest).HasPrecision(18, 4);
            entity.Property(e => e.Actualpriceordered).HasPrecision(18, 4);
            entity.Property(e => e.Amount).HasPrecision(18, 4);
            entity.Property(e => e.Approvertimestamp).HasColumnType("datetime");
            entity.Property(e => e.Buyer).HasMaxLength(255);
            entity.Property(e => e.Buyselltype).HasMaxLength(255);
            entity.Property(e => e.Calldate).HasColumnType("datetime");
            entity.Property(e => e.Clientcode).HasMaxLength(255);
            entity.Property(e => e.Clientconsent).HasMaxLength(255);
            entity.Property(e => e.Clientconsentdatetime).HasColumnType("datetime");
            entity.Property(e => e.Clientid).HasMaxLength(255);
            entity.Property(e => e.Clientname).HasMaxLength(255);
            entity.Property(e => e.Dealdate).HasColumnType("datetime");
            entity.Property(e => e.Dealid).HasMaxLength(255);
            entity.Property(e => e.Documentstatus).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Entityname).HasMaxLength(255);
            entity.Property(e => e.Entityshortname).HasMaxLength(255);
            entity.Property(e => e.Facevalue).HasPrecision(18, 4);
            entity.Property(e => e.Flowprice).HasPrecision(18, 4);
            entity.Property(e => e.Groupid).HasMaxLength(255);
            entity.Property(e => e.InterestPaymentOnMaturity).HasMaxLength(255);
            entity.Property(e => e.Interestrate).HasPrecision(18, 4);
            entity.Property(e => e.Isincode).HasMaxLength(255);
            entity.Property(e => e.Issuancedate).HasColumnType("datetime");
            entity.Property(e => e.Lastinterestdate).HasColumnType("datetime");
            entity.Property(e => e.Limits)
                .HasMaxLength(255)
                .HasColumnName("limits");
            entity.Property(e => e.Listedeqprice).HasPrecision(18, 4);
            entity.Property(e => e.Makertimetamp).HasColumnType("datetime");
            entity.Property(e => e.Marginpercentage).HasPrecision(18, 4);
            entity.Property(e => e.Market).HasMaxLength(255);
            entity.Property(e => e.Maturityamount).HasPrecision(18, 4);
            entity.Property(e => e.Maturitydate).HasColumnType("datetime");
            entity.Property(e => e.Maturityprice).HasPrecision(18, 4);
            entity.Property(e => e.Maturityvalue).HasPrecision(18, 4);
            entity.Property(e => e.Mobile).HasMaxLength(255);
            entity.Property(e => e.Ordertype).HasMaxLength(255);
            entity.Property(e => e.Ownerid).HasMaxLength(255);
            entity.Property(e => e.Pan).HasMaxLength(255);
            entity.Property(e => e.PaymentFrequency).HasMaxLength(255);
            entity.Property(e => e.Paymentstatus).HasMaxLength(255);
            entity.Property(e => e.Platform).HasMaxLength(255);
            entity.Property(e => e.Pmsscheme).HasMaxLength(255);
            entity.Property(e => e.Quantitybooked).HasPrecision(18, 4);
            entity.Property(e => e.Referencenumber).HasMaxLength(255);
            entity.Property(e => e.Rejectionreason).HasMaxLength(255);
            entity.Property(e => e.Rejectionremark).HasMaxLength(255);
            entity.Property(e => e.Remainingquantity).HasPrecision(18, 4);
            entity.Property(e => e.Remark).HasColumnType("text");
            entity.Property(e => e.Securityname).HasMaxLength(255);
            entity.Property(e => e.Seller).HasMaxLength(255);
            entity.Property(e => e.Sendfor).HasMaxLength(255);
            entity.Property(e => e.Settlment).HasMaxLength(255);
            entity.Property(e => e.Stampduty).HasPrecision(18, 4);
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.Stockstatus).HasMaxLength(255);
            entity.Property(e => e.Taxamount).HasPrecision(18, 4);
            entity.Property(e => e.Taxtype).HasMaxLength(255);
            entity.Property(e => e.Tcsamount).HasPrecision(18, 4);
            entity.Property(e => e.Tcwithoutstampduty).HasPrecision(18, 4);
            entity.Property(e => e.Tcwithstampduty).HasPrecision(18, 4);
            entity.Property(e => e.Tdsamount).HasPrecision(18, 4);
            entity.Property(e => e.Totalconsideration).HasPrecision(18, 4);
            entity.Property(e => e.Tradedate).HasColumnType("datetime");
            entity.Property(e => e.Tradetime).HasColumnType("datetime");
            entity.Property(e => e.Ucccode).HasMaxLength(255);
            entity.Property(e => e.Valuedate).HasColumnType("datetime");
            entity.Property(e => e.Wsaccountcode).HasMaxLength(255);
            entity.Property(e => e.Yield).HasPrecision(18, 4);
        });

        modelBuilder.Entity<Omsnsesecuritymapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsnsesecuritymapping");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Isactive)
                .IsRequired()
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Scriptid).HasColumnName("scriptid");
        });

        modelBuilder.Entity<Omsnsestatusdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsnsestatusdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientconsenttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("clientconsenttimestamp");
            entity.Property(e => e.Dealid)
                .HasMaxLength(20)
                .HasColumnName("dealid");
            entity.Property(e => e.Documentstatus)
                .HasMaxLength(20)
                .HasColumnName("documentstatus");
            entity.Property(e => e.Documentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("documentstatustimestamp");
            entity.Property(e => e.Finalstatus)
                .HasMaxLength(20)
                .HasColumnName("finalstatus");
            entity.Property(e => e.Finalstatustimetamp)
                .HasColumnType("datetime")
                .HasColumnName("finalstatustimetamp");
            entity.Property(e => e.Fmapprovaldatetime)
                .HasColumnType("datetime")
                .HasColumnName("fmapprovaldatetime");
            entity.Property(e => e.Fmapprovalstatus)
                .HasMaxLength(20)
                .HasColumnName("fmapprovalstatus");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isfmapprovalpending)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isfmapprovalpending");
            entity.Property(e => e.Istrademailsent)
                .HasDefaultValueSql("'0'")
                .HasColumnName("istrademailsent");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Paymentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("paymentstatustimestamp");
            entity.Property(e => e.Rejectionreason)
                .HasMaxLength(500)
                .HasColumnName("rejectionreason");
            entity.Property(e => e.Rejectionremark)
                .HasMaxLength(100)
                .HasColumnName("rejectionremark");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Stockstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("stockstatustimestamp");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
        });

        modelBuilder.Entity<Omsnseviewcartdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsnseviewcartdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Actualpriceordered).HasPrecision(18, 2);
            entity.Property(e => e.Amount).HasPrecision(18, 2);
            entity.Property(e => e.Buyselltype).HasMaxLength(50);
            entity.Property(e => e.Clientcode).HasMaxLength(255);
            entity.Property(e => e.Clientid).HasMaxLength(255);
            entity.Property(e => e.Clientname).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.DpId).HasMaxLength(255);
            entity.Property(e => e.Flowprice).HasPrecision(18, 2);
            entity.Property(e => e.Groupid).HasMaxLength(255);
            entity.Property(e => e.Isincode).HasMaxLength(255);
            entity.Property(e => e.Makertimetamp).HasColumnType("datetime");
            entity.Property(e => e.Marginpercentage).HasPrecision(18, 2);
            entity.Property(e => e.Ordertype).HasMaxLength(255);
            entity.Property(e => e.Ownerid).HasMaxLength(255);
            entity.Property(e => e.Pmsschemename).HasMaxLength(255);
            entity.Property(e => e.Price).HasPrecision(18, 2);
            entity.Property(e => e.Quantitybooked).HasPrecision(18, 2);
            entity.Property(e => e.Remainingquantity).HasPrecision(18, 2);
            entity.Property(e => e.Securityname).HasMaxLength(255);
            entity.Property(e => e.StampDuty).HasPrecision(18, 2);
            entity.Property(e => e.Status).HasMaxLength(255);
            entity.Property(e => e.TaxAmount).HasPrecision(18, 2);
            entity.Property(e => e.TaxType).HasMaxLength(50);
            entity.Property(e => e.Tcsamount)
                .HasPrecision(18, 2)
                .HasColumnName("TCSAmount");
            entity.Property(e => e.Tdsamount)
                .HasPrecision(18, 2)
                .HasColumnName("TDSAmount");
            entity.Property(e => e.TotalConsideration).HasPrecision(18, 2);
            entity.Property(e => e.Ucccode).HasMaxLength(255);
            entity.Property(e => e.Wsaccountcode).HasMaxLength(255);
        });

        modelBuilder.Entity<Omsorderdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsorderdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Orderstatus)
                .HasMaxLength(20)
                .HasColumnName("orderstatus");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(20)
                .HasColumnName("ordertype");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.SecurityId).HasColumnName("securityId");
        });

        modelBuilder.Entity<Omspaymebtbsechecklog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymebtbsechecklogs");

            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(500);
            entity.Property(e => e.Response).HasMaxLength(500);
        });

        modelBuilder.Entity<OmspaymentapprovalequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymentapprovalequestDetail");

            entity.HasIndex(e => e.PaymentTransferrequestId, "paymentTransferrequestId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.PaymentTransferrequestId).HasColumnName("paymentTransferrequestId");
            entity.Property(e => e.Utrno)
                .HasMaxLength(100)
                .HasColumnName("utrno")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");

            entity.HasOne(d => d.PaymentTransferrequest).WithMany(p => p.OmspaymentapprovalequestDetails)
                .HasForeignKey(d => d.PaymentTransferrequestId)
                .HasConstraintName("omspaymentapprovalequestDetail_ibfk_1");
        });

        modelBuilder.Entity<Omspaymentapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymentapprovallogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omspaymentapprovalrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymentapprovalrequest");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Totalamount)
                .HasPrecision(18, 2)
                .HasColumnName("totalamount");
        });

        modelBuilder.Entity<Omspaymentcreateapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymentcreateapprovallogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
        });

        modelBuilder.Entity<Omspaymentcreationlogdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymentcreationlogdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
        });

        modelBuilder.Entity<Omspaymenttransferrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymenttransferrequest");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .HasColumnName("reason");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Totalamount)
                .HasPrecision(18, 2)
                .HasColumnName("totalamount");
        });

        modelBuilder.Entity<OmspaymenttransferrequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspaymenttransferrequestDetail");

            entity.HasIndex(e => e.PaymentTransferrequestId, "paymentTransferrequestId");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.PaymentTransferrequestId).HasColumnName("paymentTransferrequestId");
            entity.Property(e => e.Utrno)
                .HasMaxLength(100)
                .HasColumnName("utrno")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");

            entity.HasOne(d => d.PaymentTransferrequest).WithMany(p => p.OmspaymenttransferrequestDetails)
                .HasForeignKey(d => d.PaymentTransferrequestId)
                .HasConstraintName("omspaymenttransferrequestDetail_ibfk_1");
        });

        modelBuilder.Entity<Omspyamnetlogsdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omspyamnetlogsdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsscriptmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsscriptmaster");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Addresswithphysicalsecuritiesistobesent)
                .HasColumnType("text")
                .HasColumnName("addresswithphysicalsecuritiesistobesent");
            entity.Property(e => e.Certificatenos)
                .HasColumnType("text")
                .HasColumnName("certificatenos");
            entity.Property(e => e.Companyname)
                .HasColumnType("text")
                .HasColumnName("companyname");
            entity.Property(e => e.Completenameofinstrument)
                .HasColumnType("text")
                .HasColumnName("completenameofinstrument");
            entity.Property(e => e.Couponrate)
                .HasColumnType("text")
                .HasColumnName("couponrate");
            entity.Property(e => e.Createdby)
                .HasColumnType("text")
                .HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasColumnType("text")
                .HasColumnName("createdon");
            entity.Property(e => e.Creditratingagency)
                .HasColumnType("text")
                .HasColumnName("creditratingagency");
            entity.Property(e => e.Dateofallotment)
                .HasColumnType("datetime")
                .HasColumnName("dateofallotment");
            entity.Property(e => e.Defaultedinredemption)
                .HasColumnType("text")
                .HasColumnName("defaultedinredemption");
            entity.Property(e => e.Descriptioninnsdl)
                .HasColumnType("text")
                .HasColumnName("descriptioninnsdl");
            entity.Property(e => e.Exchangetoken)
                .HasColumnType("text")
                .HasColumnName("exchangetoken");
            entity.Property(e => e.Expirydate)
                .HasColumnType("text")
                .HasColumnName("expirydate");
            entity.Property(e => e.Facevalue).HasColumnName("facevalue");
            entity.Property(e => e.Frequencyoftheinterestpayment)
                .HasColumnType("text")
                .HasColumnName("frequencyoftheinterestpayment");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Interestrate)
                .HasColumnType("text")
                .HasColumnName("interestrate");
            entity.Property(e => e.Isin)
                .HasColumnType("text")
                .HasColumnName("isin");
            entity.Property(e => e.Isntrument)
                .HasColumnType("text")
                .HasColumnName("isntrument");
            entity.Property(e => e.Issueprice).HasColumnName("issueprice");
            entity.Property(e => e.Lastinterestdate)
                .HasColumnType("datetime")
                .HasColumnName("lastinterestdate");
            entity.Property(e => e.Modifiedby)
                .HasColumnType("text")
                .HasColumnName("modifiedby");
            entity.Property(e => e.Modifiedon)
                .HasColumnType("text")
                .HasColumnName("modifiedon");
            entity.Property(e => e.Nameofdebenture)
                .HasColumnType("text")
                .HasColumnName("nameofdebenture");
            entity.Property(e => e.Nextinterestdate)
                .HasColumnType("datetime")
                .HasColumnName("nextinterestdate");
            entity.Property(e => e.Optiontype)
                .HasColumnType("text")
                .HasColumnName("optiontype");
            entity.Property(e => e.Putcalloption)
                .HasColumnType("text")
                .HasColumnName("putcalloption");
            entity.Property(e => e.Redemptiondate)
                .HasColumnType("datetime")
                .HasColumnName("redemptiondate");
            entity.Property(e => e.Registerwithbpidno)
                .HasColumnType("text")
                .HasColumnName("registerwithbpidno");
            entity.Property(e => e.Remarks)
                .HasColumnType("text")
                .HasColumnName("remarks");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("status");
            entity.Property(e => e.Strikeprice)
                .HasColumnType("text")
                .HasColumnName("strikeprice");
            entity.Property(e => e.Symbol)
                .HasColumnType("text")
                .HasColumnName("symbol");
            entity.Property(e => e.Timestamp)
                .HasColumnType("text")
                .HasColumnName("timestamp");
            entity.Property(e => e.Totalissuesize)
                .HasColumnType("text")
                .HasColumnName("totalissuesize");
        });

        modelBuilder.Entity<Omssecurityavailablequantity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omssecurityavailablequantity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Availablequantity)
                .HasPrecision(18, 4)
                .HasColumnName("availablequantity");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Notionalquantity)
                .HasPrecision(18, 4)
                .HasColumnName("notionalquantity");
        });

        modelBuilder.Entity<Omssecuritydetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omssecuritydetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Activeind)
                .HasMaxLength(10)
                .HasColumnName("activeind");
            entity.Property(e => e.Astclsname)
                .HasMaxLength(20)
                .HasColumnName("astclsname");
            entity.Property(e => e.Classify1)
                .HasMaxLength(100)
                .HasColumnName("classify1");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Detailtypename)
                .HasMaxLength(100)
                .HasColumnName("detailtypename");
            entity.Property(e => e.Dimcode2)
                .HasMaxLength(200)
                .HasColumnName("dimcode2");
            entity.Property(e => e.Dimcode6)
                .HasMaxLength(200)
                .HasColumnName("dimcode6");
            entity.Property(e => e.Dimcode7)
                .HasMaxLength(200)
                .HasColumnName("dimcode7");
            entity.Property(e => e.Dimname2)
                .HasMaxLength(500)
                .HasColumnName("dimname2");
            entity.Property(e => e.Dimname6)
                .HasMaxLength(500)
                .HasColumnName("dimname6");
            entity.Property(e => e.Dimname7)
                .HasMaxLength(500)
                .HasColumnName("dimname7");
            entity.Property(e => e.Facevalue)
                .HasPrecision(18, 4)
                .HasColumnName("facevalue");
            entity.Property(e => e.Instrumentid).HasColumnName("instrumentid");
            entity.Property(e => e.Internalsymbolcode)
                .HasMaxLength(200)
                .HasColumnName("internalsymbolcode");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Isin)
                .HasMaxLength(20)
                .HasColumnName("isin");
            entity.Property(e => e.Issuer)
                .HasMaxLength(500)
                .HasColumnName("issuer");
            entity.Property(e => e.Maturitydatedmp)
                .HasMaxLength(20)
                .HasColumnName("maturitydatedmp");
            entity.Property(e => e.Nseseries)
                .HasMaxLength(10)
                .HasColumnName("nseseries");
            entity.Property(e => e.Refsymbol1)
                .HasMaxLength(200)
                .HasColumnName("refsymbol1");
            entity.Property(e => e.Roundlot)
                .HasPrecision(18, 4)
                .HasColumnName("roundlot");
            entity.Property(e => e.Sectorname)
                .HasMaxLength(100)
                .HasColumnName("sectorname");
            entity.Property(e => e.Sharecapital)
                .HasPrecision(18, 4)
                .HasColumnName("sharecapital");
            entity.Property(e => e.Strikeprice)
                .HasPrecision(18, 4)
                .HasColumnName("strikeprice");
            entity.Property(e => e.Symbolid)
                .HasMaxLength(20)
                .HasColumnName("symbolid");
            entity.Property(e => e.Symbolname)
                .HasMaxLength(500)
                .HasColumnName("symbolname");
            entity.Property(e => e.Symtypename)
                .HasMaxLength(100)
                .HasColumnName("symtypename");
        });

        modelBuilder.Entity<Omsstatusdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstatusdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientconsenttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("clientconsenttimestamp");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Dealid)
                .HasMaxLength(20)
                .HasColumnName("dealid");
            entity.Property(e => e.Documentstatus)
                .HasMaxLength(20)
                .HasColumnName("documentstatus");
            entity.Property(e => e.Documentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("documentstatustimestamp");
            entity.Property(e => e.Finalstatus)
                .HasMaxLength(20)
                .HasColumnName("finalstatus");
            entity.Property(e => e.Finalstatustimetamp)
                .HasColumnType("datetime")
                .HasColumnName("finalstatustimetamp");
            entity.Property(e => e.Fmapprovaltimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("fmapprovaltimestamp");
            entity.Property(e => e.Fmapprovaluserid).HasColumnName("fmapprovaluserid");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .HasColumnName("ipaddress");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isfmapprovalpending)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isfmapprovalpending");
            entity.Property(e => e.Istrademailsent)
                .HasDefaultValueSql("'0'")
                .HasColumnName("istrademailsent");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Paymentstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("paymentstatustimestamp");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Stockstatustimestamp)
                .HasColumnType("datetime")
                .HasColumnName("stockstatustimestamp");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
        });

        modelBuilder.Entity<OmsstockapprovalequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstockapprovalequestDetail");

            entity.HasIndex(e => e.StocktransferrequestId, "omsstocktransferrequestdetail_fk");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(100)
                .HasColumnName("referencenumber")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.StocktransferrequestId).HasColumnName("stocktransferrequestId");

            entity.HasOne(d => d.Stocktransferrequest).WithMany(p => p.OmsstockapprovalequestDetails)
                .HasForeignKey(d => d.StocktransferrequestId)
                .HasConstraintName("omsstocktransferrequestdetail_fk1");
        });

        modelBuilder.Entity<Omsstockapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstockapprovallogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsstockapprovalrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstockapprovalrequest");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Totalamount)
                .HasPrecision(18, 2)
                .HasColumnName("totalamount");
        });

        modelBuilder.Entity<Omsstockcreateapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstockcreateapprovallogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
        });

        modelBuilder.Entity<Omsstockcreationlogdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstockcreationlogdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
        });

        modelBuilder.Entity<Omsstocklog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstocklogs");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsstocklogsdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstocklogsdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby).HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Tradeid).HasColumnName("tradeid");
        });

        modelBuilder.Entity<Omsstocktransferrequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstocktransferrequest");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Calltype)
                .HasMaxLength(20)
                .HasColumnName("calltype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Instrumentsid).HasColumnName("instrumentsid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.Totalamount)
                .HasPrecision(18, 2)
                .HasColumnName("totalamount");
        });

        modelBuilder.Entity<OmsstocktransferrequestDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsstocktransferrequestDetail");

            entity.HasIndex(e => e.StocktransferrequestId, "omsstocktransferrequestdetail_fk");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(100)
                .HasColumnName("referencenumber")
                .UseCollation("utf8mb3_general_ci")
                .HasCharSet("utf8mb3");
            entity.Property(e => e.StocktransferrequestId).HasColumnName("stocktransferrequestId");

            entity.HasOne(d => d.Stocktransferrequest).WithMany(p => p.OmsstocktransferrequestDetails)
                .HasForeignKey(d => d.StocktransferrequestId)
                .HasConstraintName("omsstocktransferrequestdetail_fk");
        });

        modelBuilder.Entity<Omstaxmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omstaxmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Limitamount)
                .HasPrecision(15, 4)
                .HasColumnName("limitamount");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(250)
                .HasColumnName("ordertype");
        });

        modelBuilder.Entity<Omstradestatusdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omstradestatusdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Reason)
                .HasMaxLength(500)
                .HasColumnName("reason");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Omsunlistedeqdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsunlistedeqdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Actualpriceorderd)
                .HasPrecision(18, 4)
                .HasColumnName("actualpriceorderd");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 4)
                .HasColumnName("amount");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Buyselltype)
                .HasMaxLength(20)
                .HasColumnName("buyselltype");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimestamp");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Quantitybooked).HasColumnName("quantitybooked");
            entity.Property(e => e.Reason)
                .HasMaxLength(150)
                .HasColumnName("reason");
            entity.Property(e => e.Remark)
                .HasMaxLength(200)
                .HasColumnName("remark");
            entity.Property(e => e.Scripid).HasColumnName("scripid");
            entity.Property(e => e.Stampduty)
                .HasPrecision(18, 2)
                .HasColumnName("stampduty");
            entity.Property(e => e.Taxamount)
                .HasPrecision(18, 2)
                .HasColumnName("taxamount");
            entity.Property(e => e.Taxtype)
                .HasMaxLength(20)
                .HasColumnName("taxtype");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(18, 4)
                .HasColumnName("totalconsideration");
        });

        modelBuilder.Entity<Omsviewcartdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("omsviewcartdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accounttype)
                .HasMaxLength(20)
                .HasColumnName("accounttype");
            entity.Property(e => e.Actualpriceordered)
                .HasPrecision(18, 4)
                .HasColumnName("actualpriceordered");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 4)
                .HasColumnName("amount");
            entity.Property(e => e.Approverid).HasColumnName("approverid");
            entity.Property(e => e.Approvertimestamp)
                .HasColumnType("datetime")
                .HasColumnName("approvertimestamp");
            entity.Property(e => e.Bankid).HasColumnName("bankid");
            entity.Property(e => e.Buyselltype)
                .HasMaxLength(10)
                .HasColumnName("buyselltype");
            entity.Property(e => e.Classtradecode)
                .HasMaxLength(50)
                .HasColumnName("classtradecode");
            entity.Property(e => e.Clientcode)
                .HasMaxLength(200)
                .HasColumnName("clientcode");
            entity.Property(e => e.Clientconsent)
                .HasMaxLength(20)
                .HasColumnName("clientconsent");
            entity.Property(e => e.Clientconsentdatetime)
                .HasColumnType("datetime")
                .HasColumnName("clientconsentdatetime");
            entity.Property(e => e.Clientconsentmode)
                .HasMaxLength(255)
                .HasColumnName("clientconsentmode");
            entity.Property(e => e.Clientid)
                .HasMaxLength(20)
                .HasColumnName("clientid");
            entity.Property(e => e.Clientname)
                .HasMaxLength(200)
                .HasColumnName("clientname");
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Documentdata)
                .HasColumnType("text")
                .HasColumnName("documentdata");
            entity.Property(e => e.Dpid).HasColumnName("dpid");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Facevalue)
                .HasPrecision(18, 4)
                .HasColumnName("facevalue");
            entity.Property(e => e.Flowprice)
                .HasPrecision(18, 4)
                .HasColumnName("flowprice");
            entity.Property(e => e.Groupid)
                .HasMaxLength(20)
                .HasColumnName("groupid");
            entity.Property(e => e.Interestrate)
                .HasPrecision(18, 4)
                .HasColumnName("interestrate");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.Isincode)
                .HasMaxLength(20)
                .HasColumnName("isincode");
            entity.Property(e => e.Isndpms)
                .HasDefaultValueSql("'0'")
                .HasColumnName("isndpms");
            entity.Property(e => e.Listedeqprice)
                .HasPrecision(18, 4)
                .HasColumnName("listedeqprice");
            entity.Property(e => e.Makerid).HasColumnName("makerid");
            entity.Property(e => e.Makertimetamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("makertimetamp");
            entity.Property(e => e.Marginpercentage)
                .HasPrecision(18, 4)
                .HasColumnName("marginpercentage");
            entity.Property(e => e.Marketorlimit)
                .HasMaxLength(10)
                .HasColumnName("marketorlimit");
            entity.Property(e => e.Orderby)
                .HasMaxLength(20)
                .HasColumnName("orderby");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(200)
                .HasColumnName("ordertype");
            entity.Property(e => e.Ownerid)
                .HasMaxLength(20)
                .HasColumnName("ownerid");
            entity.Property(e => e.Paymentstatus)
                .HasMaxLength(20)
                .HasColumnName("paymentstatus");
            entity.Property(e => e.Platform)
                .HasMaxLength(200)
                .HasColumnName("platform");
            entity.Property(e => e.Pmsscheme)
                .HasMaxLength(20)
                .HasColumnName("pmsscheme");
            entity.Property(e => e.Price)
                .HasPrecision(18, 4)
                .HasColumnName("price");
            entity.Property(e => e.Productid).HasColumnName("productid");
            entity.Property(e => e.Quantitybooked)
                .HasPrecision(18, 4)
                .HasColumnName("quantitybooked");
            entity.Property(e => e.Referencenumber)
                .HasMaxLength(20)
                .HasColumnName("referencenumber");
            entity.Property(e => e.Remainingquantity)
                .HasPrecision(18, 4)
                .HasColumnName("remainingquantity");
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .HasColumnName("remark");
            entity.Property(e => e.Scriptid).HasColumnName("scriptid");
            entity.Property(e => e.Securityname)
                .HasMaxLength(500)
                .HasColumnName("securityname");
            entity.Property(e => e.Sendfor)
                .HasMaxLength(200)
                .HasColumnName("sendfor");
            entity.Property(e => e.Settlment)
                .HasMaxLength(20)
                .HasColumnName("settlment");
            entity.Property(e => e.Stampduty)
                .HasPrecision(18, 4)
                .HasColumnName("stampduty");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasColumnName("status");
            entity.Property(e => e.Stockstatus)
                .HasMaxLength(20)
                .HasColumnName("stockstatus");
            entity.Property(e => e.Taxamount)
                .HasPrecision(16, 4)
                .HasDefaultValueSql("'0.0000'")
                .HasColumnName("taxamount");
            entity.Property(e => e.Taxtype)
                .HasMaxLength(20)
                .HasColumnName("taxtype");
            entity.Property(e => e.Tcwithoutstampduty)
                .HasPrecision(18, 4)
                .HasColumnName("tcwithoutstampduty");
            entity.Property(e => e.Tcwithstampduty)
                .HasPrecision(18, 4)
                .HasColumnName("tcwithstampduty");
            entity.Property(e => e.Totalconsideration)
                .HasPrecision(16, 4)
                .HasColumnName("totalconsideration");
            entity.Property(e => e.Tradedate)
                .HasColumnType("datetime")
                .HasColumnName("tradedate");
            entity.Property(e => e.Tradetime)
                .HasColumnType("timestamp")
                .HasColumnName("tradetime");
            entity.Property(e => e.Ucccode)
                .HasMaxLength(20)
                .HasColumnName("ucccode");
            entity.Property(e => e.Wsaccountcode)
                .HasMaxLength(20)
                .HasColumnName("wsaccountcode");
            entity.Property(e => e.Yield)
                .HasPrecision(18, 4)
                .HasColumnName("yield");
        });

        modelBuilder.Entity<Onbaddressdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbaddressdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Add1).HasMaxLength(500);
            entity.Property(e => e.Add2).HasMaxLength(500);
            entity.Property(e => e.CountryId).HasDefaultValueSql("'1'");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsGuardianAddress).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pin).HasMaxLength(500);
            entity.Property(e => e.Poaid).HasColumnName("POAId");
            entity.Property(e => e.PoaotherName)
                .HasMaxLength(500)
                .HasColumnName("POAOtherName");
        });

        modelBuilder.Entity<Onbclientjourneydpclientid>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbclientjourneydpclientid");

            entity.Property(e => e.ClientId).HasMaxLength(8);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DpId).HasMaxLength(8);
            entity.Property(e => e.DpName).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbcurrentstatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("onbcurrentstatus");

            entity.Property(e => e.Bucketting).HasMaxLength(250);
            entity.Property(e => e.Createdon).HasMaxLength(250);
            entity.Property(e => e.CurrentStatus).HasMaxLength(250);
            entity.Property(e => e.Currentstatusid).HasColumnName("currentstatusid");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasMaxLength(250);
            entity.Property(e => e.StageGroup).HasMaxLength(250);
            entity.Property(e => e.StatusName).HasMaxLength(250);
        });

        modelBuilder.Entity<Onbdematdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbdematdetails");

            entity.Property(e => e.AadharNo).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DematNo).HasMaxLength(500);
            entity.Property(e => e.IncomeperAnnum).HasMaxLength(500);
            entity.Property(e => e.MobileNo).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Occupation).HasMaxLength(500);
            entity.Property(e => e.PanNo).HasMaxLength(500);
            entity.Property(e => e.Peprep)
                .HasMaxLength(500)
                .HasColumnName("PEPREP");
            entity.Property(e => e.Pmladetails)
                .HasMaxLength(500)
                .HasColumnName("PMLADetails");
            entity.Property(e => e.Smsalert)
                .HasMaxLength(500)
                .HasColumnName("SMSAlert");
            entity.Property(e => e.Smsemail)
                .HasMaxLength(500)
                .HasColumnName("SMSEmail");
            entity.Property(e => e.Smsemailreceivevia)
                .HasMaxLength(500)
                .HasColumnName("SMSEMAILRECEIVEVIA");
            entity.Property(e => e.Smsemailreceiveyn)
                .HasMaxLength(500)
                .HasColumnName("SMSEMAILRECEIVEYN");
            entity.Property(e => e.Smsmobile)
                .HasMaxLength(500)
                .HasColumnName("SMSMobile");
        });

        modelBuilder.Entity<Onbfatcadetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbfatcadetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.TaxCountry).HasMaxLength(100);
            entity.Property(e => e.TaxIdentificationNumber).HasMaxLength(255);
            entity.Property(e => e.TaxIdentificationType).HasMaxLength(255);
        });

        modelBuilder.Entity<Onbformlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbformlog");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.UpdatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbholderdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbholderdetails");

            entity.Property(e => e.Aadhar).HasMaxLength(255);
            entity.Property(e => e.AnnualTurnOverNumber).HasMaxLength(50);
            entity.Property(e => e.BirthOtherCityName).HasMaxLength(100);
            entity.Property(e => e.Cin)
                .HasMaxLength(250)
                .HasColumnName("CIN");
            entity.Property(e => e.Ckynumber)
                .HasMaxLength(50)
                .HasColumnName("CKYNumber");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DarpanRegNo).HasMaxLength(250);
            entity.Property(e => e.DateofCommencementBusiness).HasMaxLength(250);
            entity.Property(e => e.DependentonEmployeeLobname)
                .HasMaxLength(50)
                .HasColumnName("DependentonEmployeeLOBName");
            entity.Property(e => e.DependentonEmployeeName).HasMaxLength(50);
            entity.Property(e => e.DesignationId).HasColumnName("DesignationID");
            entity.Property(e => e.DesignationTypeOtherValue).HasMaxLength(50);
            entity.Property(e => e.Din)
                .HasColumnType("text")
                .HasColumnName("DIN");
            entity.Property(e => e.Dob)
                .HasMaxLength(255)
                .HasColumnName("DOB");
            entity.Property(e => e.DpHoldingDate).HasMaxLength(250);
            entity.Property(e => e.DpHoldingValue).HasMaxLength(250);
            entity.Property(e => e.DpId).HasMaxLength(50);
            entity.Property(e => e.DpName).HasMaxLength(50);
            entity.Property(e => e.DpTypeId).HasColumnName("DpTypeID");
            entity.Property(e => e.EducationalQualification).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.EmployeeLobname)
                .HasMaxLength(50)
                .HasColumnName("EmployeeLOBName");
            entity.Property(e => e.EsignPreferredType).HasMaxLength(50);
            entity.Property(e => e.FatherFirstName).HasMaxLength(50);
            entity.Property(e => e.FatherLastName).HasMaxLength(50);
            entity.Property(e => e.FatherMiddleName).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.Gstin)
                .HasMaxLength(250)
                .HasColumnName("GSTIN");
            entity.Property(e => e.GuardianAddress).HasMaxLength(1000);
            entity.Property(e => e.GuardianEmail).HasMaxLength(255);
            entity.Property(e => e.GuardianMobile).HasMaxLength(255);
            entity.Property(e => e.GuardianName).HasMaxLength(150);
            entity.Property(e => e.GuardianPan)
                .HasMaxLength(255)
                .HasColumnName("GuardianPAN");
            entity.Property(e => e.IndustryCode).HasMaxLength(50);
            entity.Property(e => e.Ipvby)
                .HasMaxLength(50)
                .HasColumnName("IPVBy");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsCorrespondanceAddressDifferentFromPermenanat).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsGuardianCorrespondanceAddressDifferentFromPermenanat).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsNeoemployee)
                .HasMaxLength(50)
                .HasColumnName("IsNEOEmployee");
            entity.Property(e => e.IsTaxResidentOtherThanIndia).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsWhatsappConsent).HasMaxLength(50);
            entity.Property(e => e.KraStatusNumber).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.LiasonOfficerEmail1).HasMaxLength(45);
            entity.Property(e => e.LiasonOfficerEmail2).HasMaxLength(45);
            entity.Property(e => e.LiasonOfficerEmail3).HasMaxLength(45);
            entity.Property(e => e.LiasonOfficerMobile1).HasMaxLength(45);
            entity.Property(e => e.LiasonOfficerMobile2).HasMaxLength(45);
            entity.Property(e => e.LiasonOfficerMobile3).HasMaxLength(45);
            entity.Property(e => e.LiasonOfficerName1).HasMaxLength(100);
            entity.Property(e => e.LiasonOfficerName2).HasMaxLength(100);
            entity.Property(e => e.LiasonOfficerName3).HasMaxLength(100);
            entity.Property(e => e.MaidenFirstName).HasMaxLength(50);
            entity.Property(e => e.MaidenLastName).HasMaxLength(50);
            entity.Property(e => e.MaidenMiddleName).HasMaxLength(50);
            entity.Property(e => e.MiddleName).HasMaxLength(255);
            entity.Property(e => e.Mobile).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MonthlyIncome).HasPrecision(18, 2);
            entity.Property(e => e.MotherFirstName).HasMaxLength(500);
            entity.Property(e => e.MotherLastName).HasMaxLength(50);
            entity.Property(e => e.MotherMiddleName).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.NatureOfBusinessOtherValue).HasMaxLength(50);
            entity.Property(e => e.NatureofOrganisation).HasMaxLength(50);
            entity.Property(e => e.NatureofOrganisationOther).HasMaxLength(50);
            entity.Property(e => e.NetAnnualIncome).HasPrecision(18, 2);
            entity.Property(e => e.NetWorth).HasMaxLength(250);
            entity.Property(e => e.NetWorthInWord).HasMaxLength(50);
            entity.Property(e => e.NetworstAsOnDate).HasMaxLength(250);
            entity.Property(e => e.NetworthNri)
                .HasMaxLength(50)
                .HasColumnName("Networth_Nri");
            entity.Property(e => e.NonInvSourceIncome).HasMaxLength(250);
            entity.Property(e => e.OccupationTypeId).HasColumnName("OccupationTypeID");
            entity.Property(e => e.OccupationTypeOtherValue).HasMaxLength(50);
            entity.Property(e => e.OptionFamily).HasMaxLength(250);
            entity.Property(e => e.OtherRelatedType).HasColumnType("text");
            entity.Property(e => e.OtherStatus).HasMaxLength(200);
            entity.Property(e => e.Pan)
                .HasMaxLength(255)
                .HasColumnName("PAN");
            entity.Property(e => e.RegisterNumber).HasMaxLength(250);
            entity.Property(e => e.ResidentialStatusId).HasColumnName("ResidentialStatusID");
            entity.Property(e => e.SalutationId).HasColumnName("salutationId");
            entity.Property(e => e.SecondaryEmail).HasColumnType("text");
            entity.Property(e => e.SecondaryMobile).HasColumnType("text");
            entity.Property(e => e.SourceOfFund).HasMaxLength(50);
            entity.Property(e => e.SourceOfFundOther).HasMaxLength(50);
            entity.Property(e => e.SpouseName).HasMaxLength(50);
            entity.Property(e => e.SubEducationOtherValue).HasMaxLength(50);
            entity.Property(e => e.TrustandSociety).HasMaxLength(250);
            entity.Property(e => e.TypeAccountOtherStatus).HasColumnType("text");
            entity.Property(e => e.TypeOfIndustry).HasMaxLength(100);
        });

        modelBuilder.Entity<Onbholidaymaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("onbholidaymaster");

            entity.Property(e => e.CreatedBy).HasMaxLength(512);
            entity.Property(e => e.CreatedOn).HasMaxLength(512);
            entity.Property(e => e.HolidayDays).HasMaxLength(512);
            entity.Property(e => e.HolidayName)
                .HasMaxLength(512)
                .HasColumnName("HolidayNAme");
            entity.Property(e => e.IsActive).HasMaxLength(512);
            entity.Property(e => e.IsDeleted).HasMaxLength(512);
            entity.Property(e => e.ModifiedBy).HasMaxLength(512);
            entity.Property(e => e.ModifiedOn).HasMaxLength(512);
        });

        modelBuilder.Entity<OnbinvAmlandPepdocumentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvAMLandPEPdocumentdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentFileExtension).HasMaxLength(200);
            entity.Property(e => e.DocumentFileName).HasMaxLength(200);
            entity.Property(e => e.DocumentFilePath).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsAml).HasColumnName("IsAML");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsPep).HasColumnName("IsPEP");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbinvbarcodedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvbarcodedetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InvId).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbinvdocumentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvdocumentdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApprovalStatus).HasMaxLength(20);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DocumentExpiryDate).HasMaxLength(250);
            entity.Property(e => e.DocumentFileExtension).HasMaxLength(200);
            entity.Property(e => e.DocumentFileName).HasMaxLength(200);
            entity.Property(e => e.DocumentFilePath).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NomineeRanKid).HasColumnName("NomineeRanKId");
        });

        modelBuilder.Entity<Onbinvdpnumberdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvdpnumberdetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Dpid)
                .HasMaxLength(50)
                .HasColumnName("DPId");
            entity.Property(e => e.InvId).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbinvemailattachmentconsent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvemailattachmentconsent");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PlatformLoginPassword).HasMaxLength(50);
            entity.Property(e => e.PlatformUserId).HasMaxLength(500);
        });

        modelBuilder.Entity<Onbinvestorbankdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvestorbankdetails");

            entity.Property(e => e.AccountNo).HasMaxLength(250);
            entity.Property(e => e.ApprovalStatus).HasMaxLength(20);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.ChequeBankName).HasMaxLength(250);
            entity.Property(e => e.ChequeDate).HasMaxLength(250);
            entity.Property(e => e.ChequeNo).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsBankPoa)
                .HasDefaultValueSql("'0'")
                .HasColumnName("IsBankPOA");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModeofPayment).HasMaxLength(250);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NameAsPerBank).HasMaxLength(50);
            entity.Property(e => e.NameMatch).HasMaxLength(50);
            entity.Property(e => e.NameMatchScore).HasPrecision(5, 3);
        });

        modelBuilder.Entity<Onbinvestorbankdetailsapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvestorbankdetailsapprovallog");

            entity.Property(e => e.AccountNo).HasMaxLength(250);
            entity.Property(e => e.ApprovalStatus).HasMaxLength(20);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.NameAsPerBank).HasMaxLength(50);
            entity.Property(e => e.NameMatch).HasMaxLength(50);
            entity.Property(e => e.NameMatchScore).HasPrecision(5, 3);
        });

        modelBuilder.Entity<Onbinvestordetail>(entity =>
        {
            entity.HasKey(e => e.InvId).HasName("PRIMARY");

            entity.ToTable("onbinvestordetails");

            entity.Property(e => e.AppId).HasMaxLength(500);
            entity.Property(e => e.BankerRmemail).HasMaxLength(500);
            entity.Property(e => e.BankerRmname).HasMaxLength(500);
            entity.Property(e => e.CheckerRejectedRemarks).HasMaxLength(1000);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Cxoid).HasColumnName("CXOID");
            entity.Property(e => e.DetailsOfPastAction).HasMaxLength(500);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.EsignType).HasMaxLength(500);
            entity.Property(e => e.ExpectedCorpus).HasPrecision(18, 2);
            entity.Property(e => e.FeeType).HasMaxLength(500);
            entity.Property(e => e.FormDispatchDetails).HasMaxLength(2000);
            entity.Property(e => e.HoscanCopyRejectedRemarks)
                .HasMaxLength(1000)
                .HasColumnName("HOScanCopyRejectedRemarks");
            entity.Property(e => e.InvestmentLimits)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'0.00'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsCopyData).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsExpress).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsPhysicalDigital).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsTransfer).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NoChangeDeclaration).HasMaxLength(500);
            entity.Property(e => e.Pan)
                .HasMaxLength(50)
                .HasColumnName("PAN");
            entity.Property(e => e.PastActionDeclaration).HasMaxLength(500);
            entity.Property(e => e.Riacode)
                .HasMaxLength(500)
                .HasColumnName("RIACode");
            entity.Property(e => e.RiskRating).HasMaxLength(500);
            entity.Property(e => e.Rmid).HasColumnName("RMID");
            entity.Property(e => e.SetUpEntryFee).HasMaxLength(500);
            entity.Property(e => e.StatusId).HasDefaultValueSql("'1'");
            entity.Property(e => e.SubscriptionAmount)
                .HasPrecision(18, 2)
                .HasDefaultValueSql("'0.00'");
            entity.Property(e => e.Ucccode)
                .HasMaxLength(500)
                .HasColumnName("UCCCode");
        });

        modelBuilder.Entity<Onbinvestordocumentapprovallog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvestordocumentapprovallog");

            entity.Property(e => e.ApprovalStatus).HasMaxLength(20);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Comment).HasMaxLength(500);
        });

        modelBuilder.Entity<Onbinvestoronholddetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvestoronholddetails");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HoldDate).HasColumnType("datetime");
            entity.Property(e => e.HoldReason).HasMaxLength(300);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.UnholdDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbinvfamilymapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvfamilymapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbinvhufcoparcener>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvhufcoparcener");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Pan)
                .HasMaxLength(10)
                .HasColumnName("PAN");
            entity.Property(e => e.RelationshipOther).HasMaxLength(100);
        });

        modelBuilder.Entity<Onbinvinvestmentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvinvestmentdetail");

            entity.Property(e => e.CashAmount).HasPrecision(18, 2);
            entity.Property(e => e.CashSelection).HasDefaultValueSql("'0'");
            entity.Property(e => e.CommitmentAmount).HasPrecision(18, 2);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ExitLoadUpto1Year).HasPrecision(5, 2);
            entity.Property(e => e.ExitLoadUpto2Years).HasPrecision(5, 2);
            entity.Property(e => e.ExitLoadUpto3Months).HasPrecision(5, 2);
            entity.Property(e => e.ExitLoadUpto3Years).HasPrecision(5, 2);
            entity.Property(e => e.ExitLoadUpto6Months).HasPrecision(5, 2);
            entity.Property(e => e.InitialContribution).HasPrecision(18, 2);
            entity.Property(e => e.ManagementFees).HasPrecision(5, 2);
            entity.Property(e => e.ManagementFeesFrequency).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherChanges).HasPrecision(5, 2);
            entity.Property(e => e.OtherFrequency).HasMaxLength(50);
            entity.Property(e => e.PerformanceFees).HasPrecision(5, 2);
            entity.Property(e => e.PerformanceFeesFrequency).HasMaxLength(50);
            entity.Property(e => e.SetUpFees).HasPrecision(5, 2);
            entity.Property(e => e.StockAmount).HasPrecision(18, 2);
            entity.Property(e => e.StockSelection).HasDefaultValueSql("'0'");
        });

        modelBuilder.Entity<Onbinvriskprofileanswerdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvriskprofileanswerdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Answer).HasMaxLength(5000);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.QuestionSection).HasMaxLength(5000);
        });

        modelBuilder.Entity<Onbinvsecuritiesinvestmentlimit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvsecuritiesinvestmentlimit");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DebtMultipleAssociates).HasPrecision(5, 2);
            entity.Property(e => e.DebtSingleAssociate).HasPrecision(5, 2);
            entity.Property(e => e.EquityDebtHybrid).HasPrecision(5, 2);
            entity.Property(e => e.EquityMultipleAssociates).HasPrecision(5, 2);
            entity.Property(e => e.EquitySingleAssociate).HasPrecision(5, 2);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbinvsecuritiesrestriction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvsecuritiesrestriction");

            entity.Property(e => e.CompanyName).HasMaxLength(250);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Remark).HasMaxLength(500);
        });

        modelBuilder.Entity<Onbinvtradingdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvtradingdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Bsensecm1)
                .HasPrecision(20, 4)
                .HasColumnName("BSENSECM1");
            entity.Property(e => e.Bsensecm2)
                .HasPrecision(20, 4)
                .HasColumnName("BSENSECM2");
            entity.Property(e => e.Bsensefofuture)
                .HasPrecision(20, 4)
                .HasColumnName("BSENSEFOFuture");
            entity.Property(e => e.Bsensefooption)
                .HasPrecision(20, 4)
                .HasColumnName("BSENSEFOOption");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Nsecdfuture)
                .HasPrecision(20, 4)
                .HasColumnName("NSECDFuture");
            entity.Property(e => e.Nsecdoption)
                .HasPrecision(20, 4)
                .HasColumnName("NSECDOption");
            entity.Property(e => e.Segments)
                .HasMaxLength(50)
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.TradingParticularId).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<Onbinvtradingsegmentselection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbinvtradingsegmentselection");

            entity.Property(e => e.AllSelection).HasDefaultValueSql("'0'");
            entity.Property(e => e.CashMfSelection).HasDefaultValueSql("'0'");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrencySelection).HasDefaultValueSql("'0'");
            entity.Property(e => e.DebtSelection).HasDefaultValueSql("'0'");
            entity.Property(e => e.FnOselection)
                .HasDefaultValueSql("'0'")
                .HasColumnName("FnOSelection");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbnomineedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnomineedetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.AllocationOfSecuritiesFunds).HasPrecision(18, 2);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.DateofBirth).HasMaxLength(250);
            entity.Property(e => e.DocumentExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentIdentificationNumber).HasMaxLength(250);
            entity.Property(e => e.Dpid)
                .HasMaxLength(500)
                .HasColumnName("DPID");
            entity.Property(e => e.EmailId).HasMaxLength(500);
            entity.Property(e => e.FatherFirstName).HasMaxLength(50);
            entity.Property(e => e.FatherLastName).HasMaxLength(50);
            entity.Property(e => e.FatherMiddleName).HasMaxLength(50);
            entity.Property(e => e.FaxNo).HasMaxLength(500);
            entity.Property(e => e.FirstName).HasMaxLength(500);
            entity.Property(e => e.GaurdianAddress).HasMaxLength(500);
            entity.Property(e => e.GaurdianDocumentExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.GaurdianDocumentIdentificationNumber).HasMaxLength(250);
            entity.Property(e => e.GaurdianEmail).HasMaxLength(500);
            entity.Property(e => e.GaurdianMobileNumber).HasMaxLength(500);
            entity.Property(e => e.GaurdianName).HasMaxLength(500);
            entity.Property(e => e.Gaurdianpincode).HasMaxLength(250);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsNomineeAddressSameAsApplicant).HasDefaultValueSql("'0'");
            entity.Property(e => e.LastName).HasMaxLength(500);
            entity.Property(e => e.MaidenFirstName).HasMaxLength(50);
            entity.Property(e => e.MaidenLastName).HasMaxLength(50);
            entity.Property(e => e.MaidenMiddleName).HasMaxLength(50);
            entity.Property(e => e.MiddleName).HasMaxLength(500);
            entity.Property(e => e.Mobile).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MotherFirstName).HasMaxLength(500);
            entity.Property(e => e.MotherLastName).HasMaxLength(50);
            entity.Property(e => e.MotherMiddleName).HasMaxLength(50);
            entity.Property(e => e.NomineeRanKid).HasColumnName("NomineeRanKId");
            entity.Property(e => e.OtherDocumentName).HasMaxLength(250);
            entity.Property(e => e.Pin).HasMaxLength(500);
            entity.Property(e => e.RelationshipWithApplicant).HasMaxLength(250);
            entity.Property(e => e.ResidualSecurities).HasMaxLength(500);
            entity.Property(e => e.TelNo).HasMaxLength(500);
            entity.Property(e => e.ToBeConsideredForBankPoa).HasColumnName("ToBeConsideredForBankPOA");
        });

        modelBuilder.Entity<OnbnoninvIpsdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnoninvIPSDetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Corpus).HasMaxLength(200);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Onbnoninvcontactdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnoninvcontactdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ContactRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EmailId).HasMaxLength(200);
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.KeyContactPerson).HasMaxLength(100);
            entity.Property(e => e.MobileNo).HasMaxLength(200);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OtherDesignation).HasMaxLength(200);
            entity.Property(e => e.Remark).HasColumnType("text");
        });

        modelBuilder.Entity<Onbnoninvcontrollingperson>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnoninvcontrollingperson");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AadharNumber).HasMaxLength(250);
            entity.Property(e => e.Address).HasMaxLength(250);
            entity.Property(e => e.BirthCity).HasMaxLength(200);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasMaxLength(200);
            entity.Property(e => e.DateOfBrith).HasMaxLength(200);
            entity.Property(e => e.Email).HasColumnType("text");
            entity.Property(e => e.FatherName).HasMaxLength(250);
            entity.Property(e => e.HolderName).HasMaxLength(500);
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.IdentificationNumber).HasMaxLength(250);
            entity.Property(e => e.IdentificationType).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.MobileNumber).HasMaxLength(250);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.MotherName).HasColumnType("text");
            entity.Property(e => e.Name).HasMaxLength(250);
            entity.Property(e => e.OtherOcuupation).HasMaxLength(200);
            entity.Property(e => e.Pan)
                .HasMaxLength(250)
                .HasColumnName("PAN");
            entity.Property(e => e.SpouseName).HasMaxLength(200);
            entity.Property(e => e.TaxIdentificationType).HasMaxLength(200);
            entity.Property(e => e.TaxPayerRefId).HasMaxLength(250);
        });

        modelBuilder.Entity<Onbnoninvfatcadetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnoninvfatcadetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ActiveBusiness).HasMaxLength(200);
            entity.Property(e => e.ActivePassiveNfe).HasColumnName("ActivePassiveNFE");
            entity.Property(e => e.AppliedNotRequiredNotObt).HasMaxLength(250);
            entity.Property(e => e.BankPoaA)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_A");
            entity.Property(e => e.BankPoaE)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E");
            entity.Property(e => e.BankPoaE0)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E0");
            entity.Property(e => e.BankPoaE1)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E1");
            entity.Property(e => e.BankPoaE2)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E2");
            entity.Property(e => e.BankPoaE3)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E3");
            entity.Property(e => e.BankPoaE4)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E4");
            entity.Property(e => e.BankPoaE5)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E5");
            entity.Property(e => e.BankPoaE6)
                .HasMaxLength(250)
                .HasColumnName("BankPOA_E6");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Crsjurisdiction)
                .HasMaxLength(250)
                .HasColumnName("CRSJurisdiction");
            entity.Property(e => e.DirectReportingNfe).HasColumnName("DirectReportingNFE");
            entity.Property(e => e.EntityType).HasMaxLength(250);
            entity.Property(e => e.Giin)
                .HasMaxLength(200)
                .HasColumnName("GIIN");
            entity.Property(e => e.GiinofSponsoringEntity)
                .HasMaxLength(500)
                .HasColumnName("GIINofSponsoringEntity");
            entity.Property(e => e.HaveOwnGiin)
                .HasMaxLength(250)
                .HasColumnName("HaveOwnGIIN");
            entity.Property(e => e.HaveSponsoredEntityGiin)
                .HasMaxLength(250)
                .HasColumnName("HaveSponsoredEntityGIIN");
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.InvestmentEntity).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NameofPublictradeCompany).HasMaxLength(250);
            entity.Property(e => e.NameofSponsoringEntity).HasMaxLength(250);
            entity.Property(e => e.NameofStockExchange).HasColumnType("text");
            entity.Property(e => e.PassiveBusiness).HasMaxLength(200);
            entity.Property(e => e.PublicTradedCompany).HasMaxLength(250);
            entity.Property(e => e.RelatedEntity).HasMaxLength(250);
            entity.Property(e => e.StockExchange).HasMaxLength(200);
            entity.Property(e => e.SubsidiaryControlled).HasMaxLength(500);
        });

        modelBuilder.Entity<Onbnoninvinvestmentdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnoninvinvestmentdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Class).HasMaxLength(250);
            entity.Property(e => e.CommitmentAmount).HasMaxLength(250);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.InitialContribution).HasMaxLength(250);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pepdeclaration)
                .HasMaxLength(200)
                .HasColumnName("PEPDeclaration");
            entity.Property(e => e.SetUpFee).HasMaxLength(250);
        });

        modelBuilder.Entity<Onbnoninvotherdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("onbnoninvotherdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PepRpep).HasColumnName("PEP/RPEP");
            entity.Property(e => e.Pmladetails).HasColumnName("PMLADetails");
            entity.Property(e => e.Poa).HasColumnName("POA");
            entity.Property(e => e.RbiregDate)
                .HasMaxLength(200)
                .HasColumnName("RBIRegDate");
            entity.Property(e => e.RbiregNo)
                .HasMaxLength(250)
                .HasColumnName("RBIRegNo");
            entity.Property(e => e.SmsalertFacility).HasColumnName("SMSALertFacility");
            entity.Property(e => e.SmsemailAlert).HasColumnName("SMSEmailAlert");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Amount).HasPrecision(18, 4);
            entity.Property(e => e.BuySell).HasMaxLength(10);
            entity.Property(e => e.BuySellType).HasMaxLength(50);
            entity.Property(e => e.ClientCode).HasMaxLength(50);
            entity.Property(e => e.ClientName).HasMaxLength(255);
            entity.Property(e => e.Date).HasMaxLength(20);
            entity.Property(e => e.Dpc)
                .HasMaxLength(1)
                .HasColumnName("DPC");
            entity.Property(e => e.Dptrans)
                .HasMaxLength(50)
                .HasColumnName("DPTrans");
            entity.Property(e => e.EntryBy).HasMaxLength(50);
            entity.Property(e => e.Euin)
                .HasMaxLength(50)
                .HasColumnName("EUIN");
            entity.Property(e => e.FirstOrder).HasMaxLength(1);
            entity.Property(e => e.FolioNo).HasMaxLength(50);
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Kycflag)
                .HasMaxLength(1)
                .HasColumnName("KYCFlag");
            entity.Property(e => e.OrderNumber).HasMaxLength(50);
            entity.Property(e => e.OrderRemarks).HasMaxLength(255);
            entity.Property(e => e.OrderStatus).HasMaxLength(50);
            entity.Property(e => e.SchemeCode).HasMaxLength(50);
            entity.Property(e => e.SchemeName).HasMaxLength(255);
            entity.Property(e => e.SettNo).HasMaxLength(50);
            entity.Property(e => e.SettType).HasMaxLength(10);
            entity.Property(e => e.SipregnNo)
                .HasMaxLength(50)
                .HasColumnName("SIPRegnNo");
            entity.Property(e => e.SubOrderType).HasMaxLength(50);
            entity.Property(e => e.Time).HasMaxLength(20);
            entity.Property(e => e.Units).HasPrecision(18, 4);
        });

        modelBuilder.Entity<OrderEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.AnotherId).HasMaxLength(50);
            entity.Property(e => e.ClientCode).HasMaxLength(50);
            entity.Property(e => e.ConfirmationMessage).HasColumnType("text");
            entity.Property(e => e.ConfirmationTime).HasColumnType("datetime");
            entity.Property(e => e.EntryBy).HasMaxLength(50);
            entity.Property(e => e.OrderId).HasMaxLength(50);
            entity.Property(e => e.OrderNo).HasMaxLength(50);
            entity.Property(e => e.Scheme).HasMaxLength(100);
            entity.Property(e => e.SomeCode).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.YetAnotherId).HasMaxLength(50);
        });

        modelBuilder.Entity<Panstatusmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("panstatusmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Statuscode)
                .HasMaxLength(10)
                .HasColumnName("statuscode");
            entity.Property(e => e.Statusdescription)
                .HasColumnType("text")
                .HasColumnName("statusdescription");
        });

        modelBuilder.Entity<Partnerentitymaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("partnerentitymaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EntityName).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<PdffixedImage>(entity =>
        {
            entity.HasKey(e => e.IncrementId).HasName("PRIMARY");

            entity.ToTable("PDFFixedImage");

            entity.Property(e => e.LogoImg)
                .HasColumnType("text")
                .HasColumnName("logoImg");
            entity.Property(e => e.PhotoImg)
                .HasColumnType("text")
                .HasColumnName("photoImg");
            entity.Property(e => e.SignImg)
                .HasColumnType("text")
                .HasColumnName("signImg");
            entity.Property(e => e.TimeStamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
        });

        modelBuilder.Entity<Pennydropverifydatarequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("Pennydropverifydatarequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BeneficiaryName)
                .HasMaxLength(500)
                .HasColumnName("beneficiaryName");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.IsActive)
                .HasDefaultValueSql("b'1'")
                .HasColumnType("bit(1)")
                .HasColumnName("isActive");
            entity.Property(e => e.Isaccountactive)
                .HasMaxLength(10)
                .HasColumnName("isaccountactive");
            entity.Property(e => e.Namematchscore)
                .HasMaxLength(200)
                .HasColumnName("namematchscore");
            entity.Property(e => e.Peenydropresponse)
                .HasColumnType("text")
                .HasColumnName("peenydropresponse");
            entity.Property(e => e.Pennydroprequest)
                .HasColumnType("text")
                .HasColumnName("pennydroprequest");
            entity.Property(e => e.Reason)
                .HasMaxLength(200)
                .HasColumnName("reason");
            entity.Property(e => e.Timestamprequest)
                .HasColumnType("datetime")
                .HasColumnName("timestamprequest");
            entity.Property(e => e.Timestampresponse)
                .HasColumnType("datetime")
                .HasColumnName("timestampresponse");
        });

        modelBuilder.Entity<Pincodemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("pincodemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CountryId).HasMaxLength(512);
            entity.Property(e => e.CreatedOn).HasMaxLength(512);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasMaxLength(512);
            entity.Property(e => e.Pincode)
                .HasMaxLength(50)
                .HasColumnName("PINCode");
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<Portfolioholding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("portfolioholding");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedint)
                .HasPrecision(18, 2)
                .HasColumnName("accruedint");
            entity.Property(e => e.Assetsperc)
                .HasPrecision(18, 2)
                .HasColumnName("assetsperc");
            entity.Property(e => e.Astcls)
                .HasMaxLength(255)
                .HasColumnName("astcls");
            entity.Property(e => e.Astclsname)
                .HasMaxLength(255)
                .HasColumnName("astclsname");
            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .HasColumnName("category");
            entity.Property(e => e.Categoryname)
                .HasMaxLength(255)
                .HasColumnName("categoryname");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Filterby)
                .HasMaxLength(255)
                .HasColumnName("filterby");
            entity.Property(e => e.Filtervalue)
                .HasMaxLength(255)
                .HasColumnName("filtervalue");
            entity.Property(e => e.Gainperc)
                .HasPrecision(18, 2)
                .HasColumnName("gainperc");
            entity.Property(e => e.Income)
                .HasPrecision(18, 2)
                .HasColumnName("income");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.Mintrandate)
                .HasMaxLength(255)
                .HasColumnName("mintrandate");
            entity.Property(e => e.Mktval)
                .HasPrecision(18, 2)
                .HasColumnName("mktval");
            entity.Property(e => e.Nav)
                .HasPrecision(18, 2)
                .HasColumnName("nav");
            entity.Property(e => e.Ondate)
                .HasColumnType("datetime")
                .HasColumnName("ondate");
            entity.Property(e => e.Symbolcode)
                .HasMaxLength(255)
                .HasColumnName("symbolcode");
            entity.Property(e => e.Symbolname)
                .HasMaxLength(255)
                .HasColumnName("symbolname");
            entity.Property(e => e.Thirdpartyflag)
                .HasMaxLength(255)
                .HasColumnName("thirdpartyflag");
            entity.Property(e => e.Totalcost)
                .HasPrecision(18, 2)
                .HasColumnName("totalcost");
            entity.Property(e => e.Totalgain)
                .HasPrecision(18, 2)
                .HasColumnName("totalgain");
            entity.Property(e => e.Units)
                .HasPrecision(18, 2)
                .HasColumnName("units");
            entity.Property(e => e.Wtdavgday)
                .HasPrecision(18, 2)
                .HasColumnName("wtdavgday");
            entity.Property(e => e.Xirryield)
                .HasPrecision(18, 2)
                .HasColumnName("xirryield");
        });

        modelBuilder.Entity<ProductEsignPdfMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ProductEsignPdfMapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductTatmaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProductTATMaster");

            entity.Property(e => e.AcCode).HasMaxLength(512);
            entity.Property(e => e.AcType).HasMaxLength(512);
            entity.Property(e => e.CreatedBy).HasMaxLength(512);
            entity.Property(e => e.CreatedOn).HasMaxLength(512);
            entity.Property(e => e.Ind).HasColumnName("IND");
            entity.Property(e => e.IsActive).HasMaxLength(512);
            entity.Property(e => e.IsDeleted).HasMaxLength(512);
            entity.Property(e => e.ModifiedBy).HasMaxLength(512);
            entity.Property(e => e.ModifiedOn).HasMaxLength(512);
            entity.Property(e => e.Nind).HasColumnName("NInd");
        });

        modelBuilder.Entity<Productapivendormapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("productapivendormappings");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Productmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("productmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AcType).HasMaxLength(50);
            entity.Property(e => e.BusinessName).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.MaxSetupFees).HasPrecision(18);
            entity.Property(e => e.MinimumInvsestment).HasPrecision(18);
            entity.Property(e => e.MinimumRedumption).HasPrecision(18);
            entity.Property(e => e.MinimumTopup).HasPrecision(18);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Product).HasMaxLength(500);
            entity.Property(e => e.ShortName).HasMaxLength(500);
        });

        modelBuilder.Entity<Qctracker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("qctracker");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amlalertcount).HasColumnName("amlalertcount");
            entity.Property(e => e.Amllink)
                .HasColumnType("text")
                .HasColumnName("amllink");
            entity.Property(e => e.Amlrejectionmessage)
                .HasMaxLength(500)
                .HasColumnName("amlrejectionmessage");
            entity.Property(e => e.Amlstatus)
                .HasMaxLength(200)
                .HasColumnName("amlstatus");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isaadharverified).HasColumnName("isaadharverified");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isamldone).HasColumnName("isamldone");
            entity.Property(e => e.Isbankverified).HasColumnName("isbankverified");
            entity.Property(e => e.Isdedupecheck).HasColumnName("isdedupecheck");
            entity.Property(e => e.Isemailverified).HasColumnName("isemailverified");
            entity.Property(e => e.Isipv).HasColumnName("isipv");
            entity.Property(e => e.Iskrafetch).HasColumnName("iskrafetch");
            entity.Property(e => e.Ismobileverified).HasColumnName("ismobileverified");
            entity.Property(e => e.Isnammatchedwithkraadharpenny).HasColumnName("isnammatchedwithkraadharpenny");
            entity.Property(e => e.Ispanverified).HasColumnName("ispanverified");
            entity.Property(e => e.Ispep).HasColumnName("ispep");
            entity.Property(e => e.Isphotomatched).HasColumnName("isphotomatched");
            entity.Property(e => e.Isriskrating).HasColumnName("isriskrating");
            entity.Property(e => e.Riskratingvalue)
                .HasMaxLength(200)
                .HasColumnName("riskratingvalue");
        });

        modelBuilder.Entity<Readyfortradeattachment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("readyfortradeattachments");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FileName).HasMaxLength(100);
            entity.Property(e => e.FilePath).HasMaxLength(500);
            entity.Property(e => e.ModfiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Readyfortradestatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("readyfortradestatus");

            entity.Property(e => e.BseStarStatus).HasColumnName("BseStarSTatus");
            entity.Property(e => e.BseStarStatusDate).HasColumnType("datetime");
            entity.Property(e => e.BseStatusDate).HasColumnType("datetime");
            entity.Property(e => e.CdslStatusDate).HasColumnType("datetime");
            entity.Property(e => e.ClassDpStatusDate).HasColumnType("datetime");
            entity.Property(e => e.ClassStatusDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IbeatsStatus).HasColumnName("IBeatsStatus");
            entity.Property(e => e.IbeatsStatusDate)
                .HasColumnType("datetime")
                .HasColumnName("IBeatsStatusDate");
            entity.Property(e => e.MailSentOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.NseStatusDate).HasColumnType("datetime");
            entity.Property(e => e.WealthSpectrumStatusDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Riskprofilequestionmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("riskprofilequestionmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsChildQuestionPresent).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Question).HasMaxLength(5000);
            entity.Property(e => e.QuestionSection).HasMaxLength(5000);
        });

        modelBuilder.Entity<Riskratingrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("riskratingrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Isriskverified)
                .HasColumnType("bit(1)")
                .HasColumnName("isriskverified");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestemp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestemp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
            entity.Property(e => e.Riskrating)
                .HasMaxLength(100)
                .HasColumnName("riskrating");
        });

        modelBuilder.Entity<Rolemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("rolemaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Rolename).HasMaxLength(50);
        });

        modelBuilder.Entity<RunningsequenceforKyc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("runningsequenceforKYC");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Sequence)
                .HasMaxLength(500)
                .HasColumnName("sequence");
        });

        modelBuilder.Entity<SchedulerApiLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Request).HasMaxLength(5000);
            entity.Property(e => e.RequestTime).HasColumnType("datetime");
            entity.Property(e => e.Response).HasMaxLength(10000);
            entity.Property(e => e.ResponseTime).HasColumnType("datetime");
            entity.Property(e => e.Url).HasMaxLength(500);
        });

        modelBuilder.Entity<SchedulerServiceErrorLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ExceptionMessage).HasMaxLength(5000);
            entity.Property(e => e.ExceptionType).HasMaxLength(500);
            entity.Property(e => e.MethodName).HasMaxLength(250);
            entity.Property(e => e.SchedulerName).HasMaxLength(250);
            entity.Property(e => e.StackTrace).HasMaxLength(10000);
        });

        modelBuilder.Entity<SignzyPanVerifyDataRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("SignzyPanVerifyDataRequest");

            entity.Property(e => e.Id)
                .HasMaxLength(200)
                .HasColumnName("id");
            entity.Property(e => e.AadhaarSeedingStatus)
                .HasMaxLength(50)
                .HasColumnName("aadhaarSeedingStatus");
            entity.Property(e => e.AadhaarSeedingStatusCode)
                .HasMaxLength(50)
                .HasColumnName("aadhaarSeedingStatusCode");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("firstName");
            entity.Property(e => e.IsIndividual).HasColumnName("isIndividual");
            entity.Property(e => e.IsValid).HasColumnName("isValid");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("lastName");
            entity.Property(e => e.LastUpdatedOn)
                .HasMaxLength(50)
                .HasColumnName("lastUpdatedOn");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .HasColumnName("middleName");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasMaxLength(50)
                .HasColumnName("number");
            entity.Property(e => e.PanStatus)
                .HasMaxLength(50)
                .HasColumnName("panStatus");
            entity.Property(e => e.PanStatusCode)
                .HasMaxLength(50)
                .HasColumnName("panStatusCode");
            entity.Property(e => e.PatronId)
                .HasMaxLength(50)
                .HasColumnName("patronId");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasColumnName("title");
            entity.Property(e => e.TypeOfHolder)
                .HasMaxLength(50)
                .HasColumnName("typeOfHolder");
        });

        modelBuilder.Entity<SignzyPanVerifyDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Id)
                .HasMaxLength(200)
                .HasColumnName("id");
            entity.Property(e => e.AadhaarSeedingStatus)
                .HasMaxLength(50)
                .HasColumnName("aadhaarSeedingStatus");
            entity.Property(e => e.AadhaarSeedingStatusCode)
                .HasMaxLength(50)
                .HasColumnName("aadhaarSeedingStatusCode");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .HasColumnName("firstName");
            entity.Property(e => e.IsIndividual).HasColumnName("isIndividual");
            entity.Property(e => e.IsValid).HasColumnName("isValid");
            entity.Property(e => e.LastName)
                .HasMaxLength(100)
                .HasColumnName("lastName");
            entity.Property(e => e.LastUpdatedOn)
                .HasMaxLength(50)
                .HasColumnName("lastUpdatedOn");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(100)
                .HasColumnName("middleName");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Number)
                .HasMaxLength(50)
                .HasColumnName("number");
            entity.Property(e => e.PanStatus)
                .HasMaxLength(50)
                .HasColumnName("panStatus");
            entity.Property(e => e.PanStatusCode)
                .HasMaxLength(50)
                .HasColumnName("panStatusCode");
            entity.Property(e => e.PatronId)
                .HasMaxLength(50)
                .HasColumnName("patronId");
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasColumnName("title");
            entity.Property(e => e.TypeOfHolder)
                .HasMaxLength(50)
                .HasColumnName("typeOfHolder");
        });

        modelBuilder.Entity<Signzyesignattachmentcoordinate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyesignattachmentcoordinates");

            entity.Property(e => e.SignaturePosition).HasMaxLength(20);
            entity.Property(e => e.Xcoordinate).HasColumnName("XCoordinate");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCoordinate");
        });

        modelBuilder.Entity<Signzyesigncallbackwebhook>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyesigncallbackwebhook");

            entity.Property(e => e.AuditCertificateUrl).HasMaxLength(1000);
            entity.Property(e => e.CallbackRequest).HasColumnType("text");
            entity.Property(e => e.ContractId).HasMaxLength(100);
            entity.Property(e => e.ContractName).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FinalSignedContract).HasMaxLength(1000);
        });

        modelBuilder.Entity<Signzyesigncoordinatesmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyesigncoordinatesmaster");

            entity.Property(e => e.ClientTypeId).HasDefaultValueSql("'1'");
            entity.Property(e => e.PdfType).HasDefaultValueSql("'1'");
            entity.Property(e => e.SignaturePosition).HasMaxLength(20);
            entity.Property(e => e.Xcoordinate).HasColumnName("XCoordinate");
            entity.Property(e => e.Ycoordinate).HasColumnName("YCoordinate");
        });

        modelBuilder.Entity<Signzyesignestamppaper>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyesignestamppaper");

            entity.Property(e => e.ArticleCode).HasMaxLength(20);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustmonDefacement).HasMaxLength(1000);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.PurposeOfStampDuty).HasMaxLength(500);
            entity.Property(e => e.StateCode).HasMaxLength(10);
        });

        modelBuilder.Entity<Signzyesignrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyesignrequestresponse");

            entity.Property(e => e.ContractId).HasMaxLength(100);
            entity.Property(e => e.FilName).HasMaxLength(500);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.PdfType).HasDefaultValueSql("'1'");
            entity.Property(e => e.Request).HasColumnType("text");
            entity.Property(e => e.RequestTimestamp).HasColumnType("datetime");
            entity.Property(e => e.Response).HasColumnType("text");
            entity.Property(e => e.ResponseTimestamp).HasColumnType("datetime");
            entity.Property(e => e.SignerLinkDetails).HasColumnType("text");
        });

        modelBuilder.Entity<Signzyesignsignercallbackwebhook>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyesignsignercallbackwebhook");

            entity.Property(e => e.CallbackRequest).HasColumnType("text");
            entity.Property(e => e.ContractId).HasMaxLength(100);
            entity.Property(e => e.ContractLastSignTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage).HasMaxLength(500);
            entity.Property(e => e.SignerEmail).HasMaxLength(100);
            entity.Property(e => e.SignerId).HasMaxLength(100);
            entity.Property(e => e.SignerIp)
                .HasMaxLength(30)
                .HasColumnName("SignerIP");
            entity.Property(e => e.SignerMobile).HasMaxLength(20);
            entity.Property(e => e.SignerName).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<Signzyidentityextractionrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyidentityextractionrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Aadhaarnumber)
                .HasMaxLength(200)
                .HasColumnName("aadhaarnumber");
            entity.Property(e => e.Accesstoken)
                .HasMaxLength(500)
                .HasColumnName("accesstoken");
            entity.Property(e => e.Accountnumber)
                .HasMaxLength(200)
                .HasColumnName("accountnumber");
            entity.Property(e => e.Accounttype)
                .HasMaxLength(200)
                .HasColumnName("accounttype");
            entity.Property(e => e.Branch)
                .HasMaxLength(500)
                .HasColumnName("branch");
            entity.Property(e => e.Dob)
                .HasMaxLength(200)
                .HasColumnName("dob");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(200)
                .HasColumnName("documenttype");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Ifsccode)
                .HasMaxLength(200)
                .HasColumnName("ifsccode");
            entity.Property(e => e.Imageurl)
                .HasColumnType("text")
                .HasColumnName("imageurl");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.IsMasked).HasMaxLength(10);
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Itemid)
                .HasMaxLength(500)
                .HasColumnName("itemid");
            entity.Property(e => e.MaskedImage)
                .HasMaxLength(1000)
                .HasColumnName("maskedImage");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Pan)
                .HasMaxLength(100)
                .HasColumnName("pan");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
        });

        modelBuilder.Entity<Signzyidentityrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyidentityrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accesstoken)
                .HasMaxLength(500)
                .HasColumnName("accesstoken");
            entity.Property(e => e.Holderrankid).HasColumnName("holderrankid");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Itemid)
                .HasMaxLength(500)
                .HasColumnName("itemid");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
        });

        modelBuilder.Entity<Signzynamematchrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzynamematchrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Name1VsName2MatchReason)
                .HasMaxLength(200)
                .HasColumnName("name1_vs_name2_matchReason");
            entity.Property(e => e.Name1VsName2MatchResult)
                .HasMaxLength(200)
                .HasColumnName("name1_vs_name2_matchResult");
            entity.Property(e => e.Name1VsName2MatchScore)
                .HasMaxLength(200)
                .HasColumnName("name1_vs_name2_matchScore");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
        });

        modelBuilder.Entity<Signzypanstatusresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzypanstatusresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.Pan)
                .HasMaxLength(15)
                .HasColumnName("pan");
            entity.Property(e => e.Panstatusdescription)
                .HasColumnType("text")
                .HasColumnName("panstatusdescription");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Seedingstatus)
                .HasMaxLength(10)
                .HasColumnName("seedingstatus");
        });

        modelBuilder.Entity<Signzyvideokycrequestresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyvideokycrequestresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.HolderRankId).HasDefaultValueSql("'1'");
            entity.Property(e => e.IdRes)
                .HasColumnType("text")
                .HasColumnName("id_res");
            entity.Property(e => e.Invid).HasColumnName("invid");
            entity.Property(e => e.IsSent).HasColumnName("is_sent");
            entity.Property(e => e.Isactive)
                .HasColumnType("bit(1)")
                .HasColumnName("isactive");
            entity.Property(e => e.Patronid)
                .HasMaxLength(500)
                .HasColumnName("patronid");
            entity.Property(e => e.Request)
                .HasColumnType("text")
                .HasColumnName("request");
            entity.Property(e => e.Requesttimestamp)
                .HasColumnType("datetime")
                .HasColumnName("requesttimestamp");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responssetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responssetimestamp");
            entity.Property(e => e.Token)
                .HasMaxLength(500)
                .HasColumnName("token");
            entity.Property(e => e.Vidourl)
                .HasColumnType("text")
                .HasColumnName("vidourl");
        });

        modelBuilder.Entity<Signzyvideokycresponsewebhook>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyvideokycresponsewebhook");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CallbackUrl).HasColumnType("text");
            entity.Property(e => e.CoVariance).HasColumnType("text");
            entity.Property(e => e.FaceFound).HasColumnType("text");
            entity.Property(e => e.FaceLandmarks).HasColumnType("text");
            entity.Property(e => e.FinalMatchImage).HasColumnType("text");
            entity.Property(e => e.IsAudioProcessed).HasColumnType("bit(1)");
            entity.Property(e => e.IsUsed).HasColumnType("text");
            entity.Property(e => e.IsVideoProcessed).HasColumnType("bit(1)");
            entity.Property(e => e.Latitude).HasColumnType("text");
            entity.Property(e => e.Liveliness).HasColumnType("text");
            entity.Property(e => e.Longitude).HasColumnType("text");
            entity.Property(e => e.MatchAudioScore).HasColumnType("text");
            entity.Property(e => e.MatchPercentage).HasColumnType("text");
            entity.Property(e => e.MatchStatistics).HasColumnType("text");
            entity.Property(e => e.Message).HasColumnType("text");
            entity.Property(e => e.Otp).HasColumnType("text");
            entity.Property(e => e.PrerecordedRisk).HasColumnType("text");
            entity.Property(e => e.StaticRisk).HasColumnType("text");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Token).HasColumnType("text");
            entity.Property(e => e.Verified).HasColumnType("text");
            entity.Property(e => e.Video).HasColumnType("text");
            entity.Property(e => e.VideoImages).HasColumnType("text");
            entity.Property(e => e.VideoLandmarks).HasColumnType("text");
            entity.Property(e => e.VideoUrl).HasColumnType("text");
        });

        modelBuilder.Entity<Signzyvideokycresponsewebhookresponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("signzyvideokycresponsewebhookresponse");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CallbackUrl).HasColumnType("text");
            entity.Property(e => e.CoVariance).HasColumnType("text");
            entity.Property(e => e.FaceFound).HasColumnType("text");
            entity.Property(e => e.FaceLandmarks).HasColumnType("text");
            entity.Property(e => e.FinalMatchImage).HasColumnType("text");
            entity.Property(e => e.IdRes)
                .HasColumnType("text")
                .HasColumnName("id_res");
            entity.Property(e => e.Image1)
                .HasColumnType("text")
                .HasColumnName("image1");
            entity.Property(e => e.Image2)
                .HasColumnType("text")
                .HasColumnName("image2");
            entity.Property(e => e.Image3)
                .HasColumnType("text")
                .HasColumnName("image3");
            entity.Property(e => e.IsUsed).HasColumnType("text");
            entity.Property(e => e.Latitude).HasColumnType("text");
            entity.Property(e => e.Liveliness).HasColumnType("text");
            entity.Property(e => e.Longitude).HasColumnType("text");
            entity.Property(e => e.MatchAudioScore).HasColumnType("text");
            entity.Property(e => e.MatchPercentage).HasColumnType("text");
            entity.Property(e => e.MatchStatistics).HasColumnType("text");
            entity.Property(e => e.Message).HasColumnType("text");
            entity.Property(e => e.Otp).HasColumnType("text");
            entity.Property(e => e.Photo)
                .HasColumnType("text")
                .HasColumnName("photo");
            entity.Property(e => e.PrerecordedRisk).HasColumnType("text");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("text")
                .HasColumnName("responsetimestamp");
            entity.Property(e => e.Responsevideourl)
                .HasColumnType("text")
                .HasColumnName("responsevideourl");
            entity.Property(e => e.StaticRisk).HasColumnType("text");
            entity.Property(e => e.Timestamp)
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Token).HasColumnType("text");
            entity.Property(e => e.Verified).HasColumnType("text");
            entity.Property(e => e.Video).HasColumnType("text");
            entity.Property(e => e.VideoImages).HasColumnType("text");
            entity.Property(e => e.VideoLandmarks).HasColumnType("text");
            entity.Property(e => e.VideoUrl).HasColumnType("text");
        });

        modelBuilder.Entity<Slog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("slog");

            entity.Property(e => e.Id)
                .HasColumnType("mediumint")
                .HasColumnName("id");
            entity.Property(e => e.Dt).HasColumnType("datetime");
            entity.Property(e => e.ErrorString).HasMaxLength(1000);
        });

        modelBuilder.Entity<SmsRequestDatum>(entity =>
        {
            entity.HasKey(e => e.IncrementId).HasName("PRIMARY");

            entity.Property(e => e.Format).HasMaxLength(50);
            entity.Property(e => e.Message).HasColumnType("text");
            entity.Property(e => e.MessageType).HasMaxLength(200);
            entity.Property(e => e.Method).HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.SendTo).HasMaxLength(20);
            entity.Property(e => e.TimeStamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.UserId).HasMaxLength(50);
            entity.Property(e => e.Version).HasMaxLength(50);
        });

        modelBuilder.Entity<SmsResponseDatum>(entity =>
        {
            entity.HasKey(e => e.IncrementId).HasName("PRIMARY");

            entity.Property(e => e.Details).HasMaxLength(300);
            entity.Property(e => e.Id).HasMaxLength(200);
            entity.Property(e => e.PhoneNumber).HasMaxLength(12);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TimeStamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
        });

        modelBuilder.Entity<Statemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("statemaster");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsoCode).HasMaxLength(10);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.StateName).HasMaxLength(500);
        });

        modelBuilder.Entity<Sublobfamilymapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("sublobfamilymapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GroupContactName).HasMaxLength(100);
            entity.Property(e => e.GroupName).HasMaxLength(100);
            entity.Property(e => e.GroupShortCode).HasMaxLength(20);
            entity.Property(e => e.LobName).HasMaxLength(100);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SubLobName).HasMaxLength(100);
        });

        modelBuilder.Entity<Trackwizzmastermapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("trackwizzmastermapping");

            entity.Property(e => e.CategoryType).HasMaxLength(50);
            entity.Property(e => e.Code).HasMaxLength(50);
        });

        modelBuilder.Entity<Tradingdefaultvaluemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("tradingdefaultvaluemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Bsensecm1)
                .HasPrecision(18, 2)
                .HasColumnName("BSENSECM1");
            entity.Property(e => e.Bsensecm2)
                .HasPrecision(18, 2)
                .HasColumnName("BSENSECM2");
            entity.Property(e => e.Bsensefofuture)
                .HasPrecision(18, 2)
                .HasColumnName("BSENSEFOFuture");
            entity.Property(e => e.Bsensefooption)
                .HasPrecision(18, 2)
                .HasColumnName("BSENSEFOOption");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Nsecdfuture)
                .HasPrecision(18, 2)
                .HasColumnName("NSECDFuture");
            entity.Property(e => e.Nsecdoption)
                .HasPrecision(18, 2)
                .HasColumnName("NSECDOption");
            entity.Property(e => e.TradingParticularId).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<Userotpdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("userotpdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.GeneratedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.RandomOtpnumber).HasColumnName("RandomOTPNumber");
            entity.Property(e => e.Token).HasMaxLength(100);
        });

        modelBuilder.Entity<Validatevideokyc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("validatevideokyc");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Isvalidated).HasColumnName("isvalidated");
            entity.Property(e => e.Patronid)
                .HasMaxLength(500)
                .HasColumnName("patronid");
            entity.Property(e => e.Reqid)
                .HasMaxLength(500)
                .HasColumnName("reqid");
            entity.Property(e => e.Response)
                .HasColumnType("text")
                .HasColumnName("response");
            entity.Property(e => e.Responsetimestamp)
                .HasColumnType("datetime")
                .HasColumnName("responsetimestamp");
            entity.Property(e => e.Token)
                .HasMaxLength(500)
                .HasColumnName("token");
        });

        modelBuilder.Entity<Videokycapprovaldetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("videokycapprovaldetails");

            entity.Property(e => e.ApprovalStatus).HasMaxLength(20);
            entity.Property(e => e.ApprovedOn).HasColumnType("datetime");
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.VideoKycid).HasColumnName("VideoKYCId");
        });

        modelBuilder.Entity<Viewcarddataformfhistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("viewcarddataformfhistory");

            entity.Property(e => e.AccountStatus).HasMaxLength(20);
            entity.Property(e => e.AccountType).HasMaxLength(20);
            entity.Property(e => e.AccountType1)
                .HasMaxLength(20)
                .HasColumnName("AccountType_1");
            entity.Property(e => e.AmcName).HasMaxLength(500);
            entity.Property(e => e.Amount).HasPrecision(18, 2);
            entity.Property(e => e.AvailableAmount).HasPrecision(18, 2);
            entity.Property(e => e.AvailableUnits).HasPrecision(18, 2);
            entity.Property(e => e.BankAccountno).HasMaxLength(50);
            entity.Property(e => e.BankName).HasMaxLength(500);
            entity.Property(e => e.BankerName).HasMaxLength(100);
            entity.Property(e => e.ClientCode).HasMaxLength(20);
            entity.Property(e => e.ClientConsentMode).HasMaxLength(255);
            entity.Property(e => e.ClientId).HasMaxLength(20);
            entity.Property(e => e.ClientName).HasMaxLength(200);
            entity.Property(e => e.Consentwaiver).HasColumnName("consentwaiver");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.CxonNme).HasMaxLength(100);
            entity.Property(e => e.DematNo).HasMaxLength(50);
            entity.Property(e => e.DematStatus).HasMaxLength(20);
            entity.Property(e => e.Documentdata)
                .HasColumnType("text")
                .HasColumnName("documentdata");
            entity.Property(e => e.DpId).HasMaxLength(200);
            entity.Property(e => e.EiunCode).HasMaxLength(20);
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FolioNo).HasMaxLength(20);
            entity.Property(e => e.GroupId).HasMaxLength(20);
            entity.Property(e => e.HoldingPattern).HasMaxLength(20);
            entity.Property(e => e.Ifsccode).HasMaxLength(20);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.IsNdpms).HasDefaultValueSql("'0'");
            entity.Property(e => e.Isallredeem).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsinCode).HasMaxLength(20);
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.Mode).HasMaxLength(20);
            entity.Property(e => e.OrderType).HasMaxLength(20);
            entity.Property(e => e.Orderby).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(20);
            entity.Property(e => e.Pan).HasMaxLength(10);
            entity.Property(e => e.PmsSchemeName).HasMaxLength(500);
            entity.Property(e => e.SchemeCode).HasMaxLength(20);
            entity.Property(e => e.SchemeName).HasMaxLength(500);
            entity.Property(e => e.TradeDate).HasColumnType("datetime");
            entity.Property(e => e.TransactionTypeName).HasMaxLength(20);
            entity.Property(e => e.TrxType).HasMaxLength(20);
            entity.Property(e => e.UccCode).HasMaxLength(20);
            entity.Property(e => e.Units)
                .HasPrecision(18, 4)
                .HasColumnName("units");
            entity.Property(e => e.WsAccountCode).HasMaxLength(20);
        });

        modelBuilder.Entity<VwIbeatsWboaddr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WBOAddr");

            entity.Property(e => e.AadhaarEnrollmentNo)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.AccountName).HasMaxLength(16);
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.AddressTypeFatca)
                .HasMaxLength(30)
                .HasColumnName("AddressType_FATCA");
            entity.Property(e => e.AltEmailId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.BoacOpenSource).HasColumnName("BOAcOpenSource");
            entity.Property(e => e.Boid)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("BOId");
            entity.Property(e => e.Cbecode)
                .HasMaxLength(8)
                .HasDefaultValueSql("''")
                .HasColumnName("CBECode");
            entity.Property(e => e.CdslcitySeqNo)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("CDSLCitySeqNo");
            entity.Property(e => e.CdslpcitySeqNo)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("CDSLPCitySeqNo");
            entity.Property(e => e.City).HasMaxLength(500);
            entity.Property(e => e.CkycNo)
                .HasMaxLength(50)
                .HasColumnName("CKycNo");
            entity.Property(e => e.CorrsAddrAsPermanent)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Cstate)
                .HasMaxLength(500)
                .HasColumnName("CState");
            entity.Property(e => e.CstateCode).HasColumnName("CStateCode");
            entity.Property(e => e.DateOfDeath)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.DeleteReasonCode)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.District).HasMaxLength(500);
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.EducationCode).HasMaxLength(30);
            entity.Property(e => e.EmailId).HasMaxLength(500);
            entity.Property(e => e.FatherHusName).HasMaxLength(152);
            entity.Property(e => e.Fax)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FaxList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FirstName).HasMaxLength(500);
            entity.Property(e => e.FlagFs)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("FlagFS");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.FsfirstName)
                .HasMaxLength(50)
                .HasColumnName("FSFirstName");
            entity.Property(e => e.FslastName)
                .HasMaxLength(50)
                .HasColumnName("FSLastName");
            entity.Property(e => e.FsmiddleName)
                .HasMaxLength(50)
                .HasColumnName("FSMiddleName");
            entity.Property(e => e.Fsprefix)
                .HasMaxLength(30)
                .HasColumnName("FSPrefix");
            entity.Property(e => e.Gender).HasMaxLength(30);
            entity.Property(e => e.GrossAnnualIncRange).HasMaxLength(30);
            entity.Property(e => e.GrossAnnualIncRangeCode).HasMaxLength(30);
            entity.Property(e => e.GurdianMap).HasMaxLength(14);
            entity.Property(e => e.Huid)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("HUid");
            entity.Property(e => e.Isdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ISDCode");
            entity.Property(e => e.Itcircle)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("ITCircle");
            entity.Property(e => e.KrakycMode).HasColumnName("KRAKycMode");
            entity.Property(e => e.LastName).HasMaxLength(500);
            entity.Property(e => e.MaidenFirstName).HasMaxLength(50);
            entity.Property(e => e.MaidenLastName).HasMaxLength(50);
            entity.Property(e => e.MaidenMiddleName).HasMaxLength(50);
            entity.Property(e => e.MaidenPrefix).HasMaxLength(30);
            entity.Property(e => e.MaritalStatusCode).HasMaxLength(30);
            entity.Property(e => e.MaturityDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.MbirthDate)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("MBirthDate");
            entity.Property(e => e.Mdobdate).HasColumnName("MDOBDate");
            entity.Property(e => e.MiddleName).HasMaxLength(500);
            entity.Property(e => e.MotherFirstName).HasMaxLength(500);
            entity.Property(e => e.MotherLastName).HasMaxLength(50);
            entity.Property(e => e.MotherMiddleName).HasMaxLength(50);
            entity.Property(e => e.MotherPrefix).HasMaxLength(30);
            entity.Property(e => e.NameChangeReason)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.Nationality)
                .HasMaxLength(6)
                .HasDefaultValueSql("''");
            entity.Property(e => e.NationalityCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.NmRegistrationNo)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("Nm_RegistrationNo");
            entity.Property(e => e.NomineePercentage).HasPrecision(18, 2);
            entity.Property(e => e.NomineeRelationShip).HasMaxLength(30);
            entity.Property(e => e.NomineeResidual).HasMaxLength(1);
            entity.Property(e => e.Occupation).HasMaxLength(100);
            entity.Property(e => e.OccupationCode).HasMaxLength(30);
            entity.Property(e => e.Paddress)
                .HasMaxLength(500)
                .HasColumnName("PAddress");
            entity.Property(e => e.PaddressTypeFatca)
                .HasMaxLength(30)
                .HasColumnName("PAddressType_FATCA");
            entity.Property(e => e.Panex)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANEx");
            entity.Property(e => e.PanexemptionCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("PANExemptionCode");
            entity.Property(e => e.Panname)
                .HasColumnType("text")
                .HasColumnName("PANName");
            entity.Property(e => e.Panno)
                .HasMaxLength(255)
                .HasColumnName("PANNo");
            entity.Property(e => e.PanverificationCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("PANVerificationCode");
            entity.Property(e => e.Pcity)
                .HasMaxLength(500)
                .HasColumnName("PCity");
            entity.Property(e => e.Pcountry)
                .HasMaxLength(5)
                .HasDefaultValueSql("''")
                .HasColumnName("PCountry");
            entity.Property(e => e.PcountryCode).HasColumnName("PCountryCode");
            entity.Property(e => e.Pdistrict)
                .HasMaxLength(500)
                .HasColumnName("PDistrict");
            entity.Property(e => e.Pepcode).HasColumnName("PEPCode");
            entity.Property(e => e.PfaxList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PFaxList");
            entity.Property(e => e.Phone1).HasMaxLength(500);
            entity.Property(e => e.Phone2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PhoneAddn)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PhoneIndicator1)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.PhoneIndicator2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PhoneList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PinCode).HasMaxLength(500);
            entity.Property(e => e.Pisdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PISDCode");
            entity.Property(e => e.Pphone1)
                .HasMaxLength(500)
                .HasColumnName("PPhone1");
            entity.Property(e => e.Pphone2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PPhone2");
            entity.Property(e => e.PphoneIndicator1)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("PPhoneIndicator1");
            entity.Property(e => e.PphoneIndicator2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PPhoneIndicator2");
            entity.Property(e => e.PphoneList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PPhoneList");
            entity.Property(e => e.PpinCode)
                .HasMaxLength(500)
                .HasColumnName("PPinCode");
            entity.Property(e => e.Pstate)
                .HasMaxLength(500)
                .HasColumnName("PState");
            entity.Property(e => e.PstateCode).HasColumnName("PStateCode");
            entity.Property(e => e.Pstdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PSTDCode");
            entity.Property(e => e.SmartCardNo)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.SmartCardPin)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.SmartRegInd)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Stdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("STDCode");
            entity.Property(e => e.Title).HasMaxLength(30);
            entity.Property(e => e.UccbatchNo).HasColumnName("UCCBatchNo");
            entity.Property(e => e.UdinotUpdateReason)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("UDINotUpdateReason");
            entity.Property(e => e.UdiverifyFlag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("UDIVerifyFlag");
            entity.Property(e => e.UserText1)
                .HasMaxLength(0)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIbeatsWbocdsl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WBOCdsl");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.AddrPreferenceFlag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.AncestralFlag)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.BoaccCategory).HasColumnName("BOAccCategory");
            entity.Property(e => e.BofeesType).HasColumnName("BOFeesType");
            entity.Property(e => e.Boid)
                .HasMaxLength(50)
                .HasColumnName("BOId");
            entity.Property(e => e.BoidPan)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BOId_PAN");
            entity.Property(e => e.BonafideFlag)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.BosettlmentPlanning).HasColumnName("BOSettlmentPlanning");
            entity.Property(e => e.Bostatus).HasColumnName("BOStatus");
            entity.Property(e => e.BostmtCycleCode)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("BOStmtCycleCode");
            entity.Property(e => e.BostmtDispatchMode)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("BOStmtDispatchMode");
            entity.Property(e => e.BosubStatus)
                .HasMaxLength(30)
                .HasColumnName("BOSubStatus");
            entity.Property(e => e.BosubType).HasColumnName("BOSubType");
            entity.Property(e => e.Botype)
                .HasMaxLength(30)
                .HasColumnName("BOType");
            entity.Property(e => e.Bsdaflag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("BSDAFlag");
            entity.Property(e => e.Casmode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CASMode");
            entity.Property(e => e.Cbecode)
                .HasMaxLength(8)
                .HasDefaultValueSql("''")
                .HasColumnName("CBECode");
            entity.Property(e => e.Chid)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CHId");
            entity.Property(e => e.ClearingPanno)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ClearingPANNo");
            entity.Property(e => e.ClientPoa).HasColumnName("ClientPOA");
            entity.Property(e => e.ClosureReasonCode)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.CommToBeSent).HasColumnName("CommToBeSent ");
            entity.Property(e => e.CustdPmsEmailId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CustodianFlag)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.DbankAccType)
                .HasMaxLength(30)
                .HasColumnName("DBankAccType");
            entity.Property(e => e.DbankAccountNo)
                .HasMaxLength(250)
                .HasColumnName("DBankAccountNo");
            entity.Property(e => e.DbankAddr)
                .HasMaxLength(500)
                .HasColumnName("DBankAddr");
            entity.Property(e => e.DbankBranchNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DBankBranchNo");
            entity.Property(e => e.DbankCity)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DBankCity");
            entity.Property(e => e.DbankCountry)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DBankCountry");
            entity.Property(e => e.DbankCurrency).HasColumnName("DBankCurrency");
            entity.Property(e => e.DbankIfsccode)
                .HasMaxLength(500)
                .HasColumnName("DBankIFSCCode");
            entity.Property(e => e.DbankMicr)
                .HasMaxLength(500)
                .HasColumnName("DBankMICR");
            entity.Property(e => e.DbankName)
                .HasMaxLength(200)
                .HasColumnName("DBankName");
            entity.Property(e => e.DbankPinCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DBankPinCode");
            entity.Property(e => e.DbankState)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DBankState");
            entity.Property(e => e.DematGateway)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.Dpamccode)
                .HasMaxLength(4)
                .HasDefaultValueSql("''")
                .HasColumnName("DPAMCCode");
            entity.Property(e => e.DpclientGroup4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DPClientGroup4");
            entity.Property(e => e.DpclntId)
                .HasMaxLength(8)
                .HasDefaultValueSql("''")
                .HasColumnName("DPClntId");
            entity.Property(e => e.Dpcmid)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DPCMId");
            entity.Property(e => e.DpexcId).HasColumnName("DPExcId");
            entity.Property(e => e.Dpid)
                .HasMaxLength(8)
                .HasDefaultValueSql("''")
                .HasColumnName("DPId");
            entity.Property(e => e.DpintRefNo)
                .HasMaxLength(500)
                .HasColumnName("DPIntRefNo");
            entity.Property(e => e.DpintRefNo2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DPIntRefNo2");
            entity.Property(e => e.DpkycSw).HasColumnName("DPKycSw");
            entity.Property(e => e.DppurposeType).HasColumnName("DPPurposeType");
            entity.Property(e => e.DppurposeTypeCode).HasColumnName("DPPurposeTypeCode");
            entity.Property(e => e.DptrustFlag).HasColumnName("DPTrustFlag");
            entity.Property(e => e.EmailRtadnFlag).HasColumnName("EmailRTADnFlag");
            entity.Property(e => e.EmailStmtFlag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.EntryChannel)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ExcClientId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.GeoAreaCode)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.IsSelected)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.IssueDisbook).HasColumnName("IssueDISBook");
            entity.Property(e => e.Leicode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("LEICode");
            entity.Property(e => e.LeiexpDate)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("LEIExpDate");
            entity.Property(e => e.LifeStyleCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MentalDisability)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.ModChange)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PayOutDefaultCx).HasColumnName("PayOutDefaultCX");
            entity.Property(e => e.Pmsflag).HasColumnName("PMSFlag");
            entity.Property(e => e.PmsmanagerName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PMSManagerName");
            entity.Property(e => e.PmssebiregNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PMSSEBIRegNo");
            entity.Property(e => e.Pmstype)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("PMSType");
            entity.Property(e => e.PreferredDpflag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("PreferredDPFlag");
            entity.Property(e => e.ProductNo).HasMaxLength(30);
            entity.Property(e => e.Rgessflag).HasColumnName("RGESSFlag");
            entity.Property(e => e.SchemeAmcchrgMap)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SchemeAMCChrgMap");
            entity.Property(e => e.ServicingDpbranch)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("ServicingDPBranch");
            entity.Property(e => e.SmsEmailId)
                .HasMaxLength(255)
                .HasColumnName("SMS_EmailId");
            entity.Property(e => e.SmsMobileNo)
                .HasMaxLength(255)
                .HasColumnName("SMS_MobileNo");
            entity.Property(e => e.SmsUploadFlag).HasColumnName("SMS_UploadFlag");
            entity.Property(e => e.StaffCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.StaffRelativeOfDp)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("StaffRelativeOfDP");
            entity.Property(e => e.StmtCycleCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.SuggDpscheme)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("SuggDPScheme");
            entity.Property(e => e.SuspReason)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.Tdstatus)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("TDStatus");
            entity.Property(e => e.TradingId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Upiid)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("UPIID");
        });

        modelBuilder.Entity<VwIbeatsWkycRequest>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WKycRequests");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.FormNo).HasMaxLength(500);
        });

        modelBuilder.Entity<VwIbeatsWpartyCbe>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyCBE");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.ActiveDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.AgreementDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Bsestatus)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("BSEStatus");
            entity.Property(e => e.Cbecode)
                .HasMaxLength(8)
                .HasDefaultValueSql("''")
                .HasColumnName("CBECode");
            entity.Property(e => e.ClientCategory)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.DeactiveDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.DealerAcCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ESignKyc).HasColumnName("eSignKyc");
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ExConfirmDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.ExSentDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.ExcClientId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FirstTradeDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.FrontMapInId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Mfssmode).HasColumnName("MFSSMode");
            entity.Property(e => e.PhyDocRecvdDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.SigningDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.StampDate)
                .HasMaxLength(10)
                .HasDefaultValueSql("''");
            entity.Property(e => e.TermId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIbeatsWpartyContact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyContacts");

            entity.Property(e => e.AadhaarEnrollmentNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.Addr).HasMaxLength(500);
            entity.Property(e => e.Addr1).HasMaxLength(500);
            entity.Property(e => e.Addr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AppointasKarta)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AuthOrderFlag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.BirthDate).HasMaxLength(255);
            entity.Property(e => e.City).HasMaxLength(500);
            entity.Property(e => e.ContactPersonDesignationCode).HasMaxLength(30);
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Cstate)
                .HasMaxLength(500)
                .HasColumnName("CState");
            entity.Property(e => e.CstateCode).HasColumnName("CStateCode");
            entity.Property(e => e.Designation).HasMaxLength(100);
            entity.Property(e => e.Din)
                .HasColumnType("mediumtext")
                .HasColumnName("DIN");
            entity.Property(e => e.DirectorPan)
                .HasMaxLength(255)
                .HasColumnName("DirectorPAN");
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailList).HasMaxLength(255);
            entity.Property(e => e.FatherName).HasMaxLength(152);
            entity.Property(e => e.Gender).HasMaxLength(30);
            entity.Property(e => e.HufancestralFlag).HasColumnName("HUFAncestralFlag");
            entity.Property(e => e.HufdateofFormation)
                .HasMaxLength(255)
                .HasColumnName("HUFDateofFormation");
            entity.Property(e => e.HufsetupNsdl)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("HUFSetup_NSDL");
            entity.Property(e => e.KartaChangeReasonNsdl)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("KartaChangeReason_NSDL");
            entity.Property(e => e.NameChangeKartaNsdl)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("NameChangeKarta_NSDL");
            entity.Property(e => e.PanexemptCode).HasColumnName("PANExemptCode");
            entity.Property(e => e.PanexemptFlag).HasColumnName("PANExemptFlag");
            entity.Property(e => e.Panno)
                .HasMaxLength(50)
                .HasColumnName("PANNo");
            entity.Property(e => e.PassportNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Pepcode).HasColumnName("PEPCode");
            entity.Property(e => e.PersonName).HasColumnType("text");
            entity.Property(e => e.PhoneList).HasMaxLength(255);
            entity.Property(e => e.PinCode).HasMaxLength(500);
            entity.Property(e => e.RelationWithKarta)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.UdiverifyFlag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("UDIVerifyFlag");
            entity.Property(e => e.Uid)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("UID");
            entity.Property(e => e.Vidno)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("VIDNo");
        });

        modelBuilder.Entity<VwIbeatsWpartyDpauthSignLob>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyDPAuthSignLOB");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.Addr).HasMaxLength(500);
            entity.Property(e => e.AttachFileName).HasColumnType("text");
            entity.Property(e => e.Boid)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("BOId");
            entity.Property(e => e.Cbecode).HasColumnName("CBECode");
            entity.Property(e => e.Designation).HasMaxLength(100);
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.NewFileName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.OldFileName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PersonName).HasColumnType("text");
            entity.Property(e => e.PhoneList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Remarks1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIbeatsWpartyKyc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyKyc");

            entity.Property(e => e.AadhaarEnrollmentNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AccClosChgAmt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.AccOpenChgAmt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.AccStatusCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.AccStatusRemarks)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AccSuspensionFlag)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.AccountType)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AcquisitionName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AcquisitionRlmcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("AcquisitionRLMCode");
            entity.Property(e => e.ActivationDtm)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.AddressTypeFatca)
                .HasMaxLength(30)
                .HasColumnName("AddressType_FATCA");
            entity.Property(e => e.AmlriskGroup).HasColumnName("AMLRiskGroup");
            entity.Property(e => e.AuthPerson)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.BirthDate).HasMaxLength(255);
            entity.Property(e => e.BosuspensionDate)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("BOSuspensionDate");
            entity.Property(e => e.Cdcnumber)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CDCNumber");
            entity.Property(e => e.Cdsbrok1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CDSBrok1");
            entity.Property(e => e.Cdsbrok2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CDSBrok2");
            entity.Property(e => e.Cdsbrok3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CDSBrok3");
            entity.Property(e => e.CdsbrokCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CDSBrokCode");
            entity.Property(e => e.ChequePrintName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Cin)
                .HasMaxLength(250)
                .HasColumnName("CIN");
            entity.Property(e => e.CkycNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CKycNo");
            entity.Property(e => e.CkycupdateFlagList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CKYCUpdateFlagList");
            entity.Property(e => e.ClientNameDesc)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ClosureApprovalDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.ClosureDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.ClosureInitiatedBy)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CommencementDate).HasMaxLength(250);
            entity.Property(e => e.CompanyBusiness)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CompanyRegNo).HasMaxLength(250);
            entity.Property(e => e.ControllingPersonTypeFatca)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ControllingPersonType_FATCA");
            entity.Property(e => e.CorrsAddrAsPermanent)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.CountryCodeF61b)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CountryCode_F61B");
            entity.Property(e => e.Cpcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CPCode");
            entity.Property(e => e.Cscategory).HasColumnName("CSCategory");
            entity.Property(e => e.CsriskCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CSRiskCode");
            entity.Property(e => e.CustId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Cxbrok1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CXBrok1");
            entity.Property(e => e.Cxbrok2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CXBrok2");
            entity.Property(e => e.Cxbrok3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CXBrok3");
            entity.Property(e => e.CxbrokCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CXBrokCode");
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.Education).HasMaxLength(100);
            entity.Property(e => e.Efe)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EFE");
            entity.Property(e => e.Egr).HasColumnName("EGR");
            entity.Property(e => e.EmplAddr)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplAddr1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplAddr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplAddr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplAddr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplAddressTypeF61b)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EmplAddressType_F61B");
            entity.Property(e => e.EmplBusiness)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplCity)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplContact).HasMaxLength(500);
            entity.Property(e => e.EmplCountry)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplCountryCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplDistrict)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplName).HasMaxLength(500);
            entity.Property(e => e.EmplPinCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplState)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmplStateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EntryDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.Eqbrok1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EQBrok1");
            entity.Property(e => e.Eqbrok2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EQBrok2");
            entity.Property(e => e.Eqbrok3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EQBrok3");
            entity.Property(e => e.EqbrokCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EQBrokCode");
            entity.Property(e => e.EqmaxOrderBrokAmt).HasColumnName("EQMaxOrderBrokAmt");
            entity.Property(e => e.EqminOrderBrokAmt)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("EQMinOrderBrokAmt");
            entity.Property(e => e.Faddr)
                .HasMaxLength(500)
                .HasColumnName("FAddr");
            entity.Property(e => e.Faddr1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FAddr1");
            entity.Property(e => e.Faddr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FAddr2");
            entity.Property(e => e.Faddr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FAddr3");
            entity.Property(e => e.Faddr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FAddr4");
            entity.Property(e => e.FaddressTypeF61b)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FAddressType_F61B");
            entity.Property(e => e.FaddressTypeF61bDesc)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FAddressType_F61B_Desc");
            entity.Property(e => e.FatherName).HasMaxLength(152);
            entity.Property(e => e.Fcity)
                .HasMaxLength(500)
                .HasColumnName("FCity");
            entity.Property(e => e.Fcountry)
                .HasMaxLength(5)
                .HasDefaultValueSql("''")
                .HasColumnName("FCountry");
            entity.Property(e => e.FcountryCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FCountryCode");
            entity.Property(e => e.Fdistrict)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FDistrict");
            entity.Property(e => e.FemailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FEmailList");
            entity.Property(e => e.FfaxList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FFaxList");
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.Fisdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FISDCode");
            entity.Property(e => e.FlagFs)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("FlagFS");
            entity.Property(e => e.Fobrok1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FOBrok1");
            entity.Property(e => e.Fobrok2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FOBrok2");
            entity.Property(e => e.Fobrok3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FOBrok3");
            entity.Property(e => e.FobrokCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FOBrokCode");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.Fostatus)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FOStatus");
            entity.Property(e => e.FphoneList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FPhoneList");
            entity.Property(e => e.FpinCode)
                .HasMaxLength(500)
                .HasColumnName("FPinCode");
            entity.Property(e => e.FsfirstName)
                .HasMaxLength(50)
                .HasColumnName("FSFirstName");
            entity.Property(e => e.FslastName)
                .HasMaxLength(50)
                .HasColumnName("FSLastName");
            entity.Property(e => e.FsmiddleName)
                .HasMaxLength(50)
                .HasColumnName("FSMiddleName");
            entity.Property(e => e.Fsprefix)
                .HasMaxLength(30)
                .HasColumnName("FSPrefix");
            entity.Property(e => e.Fstate)
                .HasMaxLength(500)
                .HasColumnName("FState");
            entity.Property(e => e.FstateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FStateCode");
            entity.Property(e => e.Fstdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FSTDCode");
            entity.Property(e => e.FullAcName).HasColumnType("text");
            entity.Property(e => e.GenderCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.GrossAnnualIncDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.GrossAnnualIncRangeCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.GstInNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.IgnoreUcc).HasColumnName("IgnoreUCC");
            entity.Property(e => e.IncorporationDate).HasMaxLength(255);
            entity.Property(e => e.InpersonVerification)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.IntroAddr)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.IntroContact)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.IntroDpaccount)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("IntroDPAccount");
            entity.Property(e => e.IntroFirstName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.IntroLastName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.IntroMiddleName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.IntroUcc)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("IntroUCC");
            entity.Property(e => e.IpvDesg)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("IPV_DESG");
            entity.Property(e => e.IpvName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("IPV_NAME");
            entity.Property(e => e.IpvOrgan)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("IPV_ORGAN");
            entity.Property(e => e.IsCin).HasColumnName("IsCIN");
            entity.Property(e => e.IsdcodeOffice)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ISDCodeOffice");
            entity.Property(e => e.IssueDateofProof)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.IssuePlaceofProof)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.KrakycMode).HasColumnName("KRAKycMode");
            entity.Property(e => e.KraregCbecode).HasColumnName("KRARegCBECode");
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.Leicode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("LEICode");
            entity.Property(e => e.LifeStyleCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MaidenFirstName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MaidenFullAcName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MaidenLastName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MaidenMiddleName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MaidenPrefix)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MaritalStatusCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.MbirthDate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("MBirthDate");
            entity.Property(e => e.McommencementDate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("MCommencementDate");
            entity.Property(e => e.MdobincDate).HasColumnName("MDOBIncDate");
            entity.Property(e => e.MiddleName).HasMaxLength(255);
            entity.Property(e => e.MincorporationDate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("MIncorporationDate");
            entity.Property(e => e.MotherFirstName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MotherFullAcName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MotherLastName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MotherMiddleName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MotherPrefix)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MrocregDate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("MROCRegDate");
            entity.Property(e => e.Nationality)
                .HasMaxLength(6)
                .HasDefaultValueSql("''");
            entity.Property(e => e.NationalityCode)
                .HasMaxLength(3)
                .HasDefaultValueSql("''");
            entity.Property(e => e.NetWorthDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.Networth)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.NonIndividualName).HasMaxLength(250);
            entity.Property(e => e.NrisubType).HasColumnName("NRISubType");
            entity.Property(e => e.Nritype).HasColumnName("NRIType");
            entity.Property(e => e.NrivisaDate)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("NRIVisaDate");
            entity.Property(e => e.Occupation).HasMaxLength(100);
            entity.Property(e => e.OccupationCode)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.OptForUpi).HasColumnName("OptForUPI");
            entity.Property(e => e.Paddr1)
                .HasMaxLength(500)
                .HasColumnName("PAddr1");
            entity.Property(e => e.Paddr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PAddr2");
            entity.Property(e => e.Paddr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PAddr3");
            entity.Property(e => e.Paddr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PAddr4");
            entity.Property(e => e.PaddressTypeF61b)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PAddressType_F61B");
            entity.Property(e => e.PaddressTypeF61bDesc)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PAddressType_F61B_Desc");
            entity.Property(e => e.PanexemptionCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANExemptionCode");
            entity.Property(e => e.PanverificationCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANVerificationCode");
            entity.Property(e => e.Pcity)
                .HasMaxLength(500)
                .HasColumnName("PCity");
            entity.Property(e => e.PcityCtr).HasColumnName("PCityCTR");
            entity.Property(e => e.Pcountry)
                .HasMaxLength(5)
                .HasDefaultValueSql("''")
                .HasColumnName("PCountry");
            entity.Property(e => e.PcountryCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PCountryCode");
            entity.Property(e => e.Pdistrict).HasColumnName("PDistrict");
            entity.Property(e => e.Pepcode).HasColumnName("PEPCode");
            entity.Property(e => e.PfaxList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PFaxList");
            entity.Property(e => e.PhoneListOffice)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Pisdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PISDCode");
            entity.Property(e => e.PlaceOfBirth)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PlaceOfIncorporation)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PlaceOfRegistration)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PphoneList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PPhoneList");
            entity.Property(e => e.PpinCode)
                .HasMaxLength(500)
                .HasColumnName("PPinCode");
            entity.Property(e => e.Prefix).HasMaxLength(100);
            entity.Property(e => e.ProofNumber)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ProofType)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Pstate)
                .HasMaxLength(500)
                .HasColumnName("PState");
            entity.Property(e => e.PstateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PStateCode");
            entity.Property(e => e.Pstdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PSTDCode");
            entity.Property(e => e.RbiapprovalDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("RBIApprovalDate");
            entity.Property(e => e.RbirefNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("RBIRefNo");
            entity.Property(e => e.RcityCtr).HasColumnName("RCityCTR");
            entity.Property(e => e.RegAddr1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegAddr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegAddr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegAddr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegAddressTypeF61b)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("RegAddressType_F61B");
            entity.Property(e => e.RegCity)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegCountry)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegDistrict)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegPinCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegState)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegStateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegdOffAddr)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RegisteringAuthority)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Relationship1Rlmcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("Relationship1RLMCode");
            entity.Property(e => e.RelationshipRlmcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("RelationshipRLMCode");
            entity.Property(e => e.ResidentStatus)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.RocregDate)
                .HasMaxLength(255)
                .HasColumnName("ROCRegDate");
            entity.Property(e => e.Sebimtfflag).HasColumnName("SEBIMTFFlag");
            entity.Property(e => e.SebiregDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("SEBIRegDate");
            entity.Property(e => e.SebiregEndDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime")
                .HasColumnName("SEBIRegEndDate");
            entity.Property(e => e.SebiregNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SEBIRegNo");
            entity.Property(e => e.SebisubAccRegNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SEBISubAccRegNo");
            entity.Property(e => e.ServiceTypeCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ServicingBranch)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ServicingSubBroker)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.SetDpidprefix).HasColumnName("SetDPIDPrefix");
            entity.Property(e => e.SfirstName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SFirstName");
            entity.Property(e => e.SlastName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SLastName");
            entity.Property(e => e.SmiddleName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SMiddleName");
            entity.Property(e => e.Sprefix)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SPrefix");
            entity.Property(e => e.SrvChg1Amt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.SrvChg2Amt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.SrvChg3Amt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.SrvChg4Amt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.SrvChg5Amt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.Sstate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SState");
            entity.Property(e => e.SstateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SStateCode");
            entity.Property(e => e.StdcodeOffice)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("STDCodeOffice");
            entity.Property(e => e.StpreceiverId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("STPReceiverId");
            entity.Property(e => e.SuggBrokSlab)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.SuggDpscheme)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("SuggDPScheme");
            entity.Property(e => e.SuggestedCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.SuspInitiatedBy)
                .HasMaxLength(2)
                .HasDefaultValueSql("''");
            entity.Property(e => e.TaxResDeclrF61b).HasColumnName("TaxResDeclr_F61B");
            entity.Property(e => e.TradeMethod)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.TradingPoadateFund)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("TradingPOADateFund");
            entity.Property(e => e.TradingPoadateSec)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("TradingPOADateSec");
            entity.Property(e => e.TradingPoasw).HasColumnName("TradingPOASw");
            entity.Property(e => e.TradingPoasw2).HasColumnName("TradingPOASw2");
            entity.Property(e => e.Vidno)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("VIDNo");
        });

        modelBuilder.Entity<VwIbeatsWpartyKycDoc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyKycDoc");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.AddrTypeList).HasMaxLength(1);
            entity.Property(e => e.Becode).HasColumnName("BECode");
            entity.Property(e => e.DocEndDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.DocExpiryDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.DocIdList).HasMaxLength(10);
            entity.Property(e => e.DocIssueDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.DocNo).HasMaxLength(255);
            entity.Property(e => e.DocPlace)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.DocStartDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.ImageFlag)
                .HasMaxLength(2)
                .HasDefaultValueSql("''");
            entity.Property(e => e.ImageName).HasColumnType("text");
            entity.Property(e => e.ImagePath).HasMaxLength(200);
            entity.Property(e => e.OrgImageName).HasMaxLength(8);
            entity.Property(e => e.PanNo).HasMaxLength(255);
            entity.Property(e => e.Remarks).HasMaxLength(100);
        });

        modelBuilder.Entity<VwIbeatsWpartyMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyMaster");

            entity.Property(e => e.AccessType)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.AccountName).HasMaxLength(511);
            entity.Property(e => e.AddnBccEmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AddnCcEmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr1).HasMaxLength(500);
            entity.Property(e => e.Addr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AddressTypeF61b)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("AddressType_F61B");
            entity.Property(e => e.AddressTypeF61bDesc)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("AddressType_F61B_Desc");
            entity.Property(e => e.AdharNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.BccEmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CashFlowGroup)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CcEmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CcityCtr).HasColumnName("CCityCTR");
            entity.Property(e => e.Channel1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Channel2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Channel3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Channel4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.City).HasMaxLength(500);
            entity.Property(e => e.ClientGroup1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ClientGroup2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ClientGroup3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ClientGroup4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .HasDefaultValueSql("''");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Cstate)
                .HasMaxLength(500)
                .HasColumnName("CState");
            entity.Property(e => e.CstateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CStateCode");
            entity.Property(e => e.DateofDeclaration)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.DealerAcCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.District)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.EmailRelationPaccCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("EmailRelationPAccCode");
            entity.Property(e => e.EmailRelationshipCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EmailRelationshipName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EntryChannel)
                .HasMaxLength(5)
                .HasDefaultValueSql("''");
            entity.Property(e => e.FamilyCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FaxList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.FloginId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("FLoginID");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.Isdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ISDCode");
            entity.Property(e => e.KaccType)
                .HasMaxLength(30)
                .HasColumnName("KAccType");
            entity.Property(e => e.KaccType1).HasColumnName("KAccType1");
            entity.Property(e => e.KaccType2).HasColumnName("KAccType2");
            entity.Property(e => e.KycverificationBranch)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("KYCVerificationBranch");
            entity.Property(e => e.KycverificationDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("KYCVerificationDate");
            entity.Property(e => e.KycverificationEmpcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("KYCVerificationEMPcode");
            entity.Property(e => e.LinkAcCode1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.LinkAcCode2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MakerDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.MapInId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MobileList).HasMaxLength(255);
            entity.Property(e => e.MobileRelationPaccCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("MobileRelationPAccCode");
            entity.Property(e => e.MobileRelationshipCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MobileRelationshipName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.MstSchemeCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.OrganisationCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Paccountcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PAccountcode");
            entity.Property(e => e.Panex)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANEx");
            entity.Property(e => e.PanfullAcName)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANFullAcName");
            entity.Property(e => e.Panno)
                .HasMaxLength(255)
                .HasColumnName("PANNo");
            entity.Property(e => e.PanresponseStatus)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANResponseStatus");
            entity.Property(e => e.ParentAcCode).HasMaxLength(500);
            entity.Property(e => e.PhoneList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.PinCode).HasMaxLength(500);
            entity.Property(e => e.PlaceofDeclaration)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.SmsmobileList)
                .HasMaxLength(255)
                .HasColumnName("SMSMobileList");
            entity.Property(e => e.Stdcode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("STDCode");
            entity.Property(e => e.TclientGroup1)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("TClientGroup1");
            entity.Property(e => e.TclientGroup2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("TClientGroup2");
            entity.Property(e => e.TclientGroup3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("TClientGroup3");
            entity.Property(e => e.TclientGroup4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("TClientGroup4");
            entity.Property(e => e.TclientGroup5)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("TClientGroup5");
            entity.Property(e => e.TclientGroup6)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("TClientGroup6");
            entity.Property(e => e.ToEmailList).HasMaxLength(255);
            entity.Property(e => e.TypeofDocumentSubmitted)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIbeatsWpartyPoa>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyPOA");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.Cbecode).HasColumnName("CBECode");
            entity.Property(e => e.DpclntId)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DPClntId");
            entity.Property(e => e.Dpid)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("DPId");
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.PoacacharFld)
                .HasMaxLength(1)
                .HasColumnName("POACACharFld");
            entity.Property(e => e.PoaendDate).HasColumnName("POAEndDate");
            entity.Property(e => e.PoagpaorBpaflag)
                .HasMaxLength(1)
                .HasColumnName("POAGPAorBPAFlag");
            entity.Property(e => e.Poaid)
                .HasMaxLength(8)
                .HasDefaultValueSql("''")
                .HasColumnName("POAId");
            entity.Property(e => e.PoamasterPoaid)
                .HasMaxLength(16)
                .HasDefaultValueSql("''")
                .HasColumnName("POAMasterPOAId");
            entity.Property(e => e.PoaregistrarNo)
                .HasMaxLength(500)
                .HasColumnName("POARegistrarNo");
            entity.Property(e => e.PoasrNo).HasColumnName("POASrNo");
            entity.Property(e => e.PoastartDate)
                .HasDefaultValueSql("'0000-00-00'")
                .HasColumnName("POAStartDate");
            entity.Property(e => e.PoatoOperateAc).HasColumnName("POAToOperateAc");
            entity.Property(e => e.PoatrxTypeCdsl)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("POATrxType_CDSL");
            entity.Property(e => e.Poatype)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("POAType");
            entity.Property(e => e.PoatypeFlag)
                .HasMaxLength(1)
                .HasDefaultValueSql("''")
                .HasColumnName("POATypeFlag");
        });

        modelBuilder.Entity<VwIbeatsWpartySubBank>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartySubBank");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.BankAccountNo).HasMaxLength(250);
            entity.Property(e => e.BankAccountType).HasMaxLength(30);
            entity.Property(e => e.BankBranch).HasMaxLength(500);
            entity.Property(e => e.BankClassification)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.BankId)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.BankIfsccode)
                .HasMaxLength(500)
                .HasColumnName("BankIFSCCode");
            entity.Property(e => e.BankLocation).HasMaxLength(500);
            entity.Property(e => e.BankMicrcode)
                .HasMaxLength(500)
                .HasColumnName("BankMICRCode");
            entity.Property(e => e.BankName).HasMaxLength(200);
            entity.Property(e => e.BankPoadate)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("BankPOADate");
            entity.Property(e => e.BankPoano)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BankPOANo");
            entity.Property(e => e.BankPoasw).HasColumnName("BankPOASw");
            entity.Property(e => e.BankType).HasMaxLength(30);
            entity.Property(e => e.Ecs).HasColumnName("ECS");
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.EntryDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.Mfcbecode).HasColumnName("MFCBECode");
            entity.Property(e => e.NachDrType)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.NachEndDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.NachFreq)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.NachLimitAmt)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.NachStartDate)
                .HasMaxLength(0)
                .IsFixedLength();
            entity.Property(e => e.NachUmrn)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("NachUMRN");
            entity.Property(e => e.OnlyDp).HasColumnName("OnlyDP");
            entity.Property(e => e.PayOutDefaultCx).HasColumnName("PayOutDefaultCX");
            entity.Property(e => e.PayOutDefaultMf)
                .HasMaxLength(0)
                .IsFixedLength()
                .HasColumnName("PayOutDefaultMF");
            entity.Property(e => e.Pissw).HasColumnName("PISSw");
            entity.Property(e => e.Pocbecode).HasColumnName("POCBECode");
            entity.Property(e => e.SubAccountCode).HasMaxLength(500);
        });

        modelBuilder.Entity<VwIbeatsWpartyTrdNom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_IBeats_WPartyTrdNom");

            entity.Property(e => e.AccountCode).HasMaxLength(500);
            entity.Property(e => e.Addr1).HasMaxLength(500);
            entity.Property(e => e.Addr2)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr3)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Addr4)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.AdharNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.BirthDate).HasMaxLength(250);
            entity.Property(e => e.City).HasMaxLength(500);
            entity.Property(e => e.CkycNo)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CKycNo");
            entity.Property(e => e.Country)
                .HasMaxLength(5)
                .HasDefaultValueSql("''");
            entity.Property(e => e.CountryCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Cstate)
                .HasMaxLength(500)
                .HasColumnName("CState");
            entity.Property(e => e.CstateCode)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CStateCode");
            entity.Property(e => e.District)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.EditDtm)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.FirstName).HasMaxLength(500);
            entity.Property(e => e.FormNo).HasMaxLength(500);
            entity.Property(e => e.FullAcName).HasColumnType("text");
            entity.Property(e => e.Gender)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.GurdianMap).HasMaxLength(14);
            entity.Property(e => e.LastName).HasMaxLength(500);
            entity.Property(e => e.MiddleName).HasMaxLength(500);
            entity.Property(e => e.NomStatus)
                .HasMaxLength(1)
                .HasDefaultValueSql("''");
            entity.Property(e => e.NomineeRelationShip).HasMaxLength(100);
            entity.Property(e => e.Panno)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("PANNo");
            entity.Property(e => e.PinCode).HasMaxLength(500);
            entity.Property(e => e.SetupDate)
                .HasDefaultValueSql("'0000-00-00 00:00:00'")
                .HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(100);
            entity.Property(e => e.ToEmailList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.ToMobileList)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
        });

        modelBuilder.Entity<VwInvestorDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_InvestorDetails");

            entity.Property(e => e.BankerName).HasMaxLength(50);
            entity.Property(e => e.ClientType).HasMaxLength(5000);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Distributor).HasMaxLength(500);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.IsExpress)
                .HasMaxLength(7)
                .HasDefaultValueSql("''");
            entity.Property(e => e.IsPhysicalDigital)
                .HasMaxLength(8)
                .HasDefaultValueSql("''");
            entity.Property(e => e.LastName).HasMaxLength(255);
            entity.Property(e => e.MiddleName).HasMaxLength(255);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pan)
                .HasMaxLength(50)
                .HasColumnName("PAN");
            entity.Property(e => e.ProductName).HasMaxLength(500);
            entity.Property(e => e.Rmname)
                .HasMaxLength(500)
                .HasColumnName("RMName");
            entity.Property(e => e.Status).HasMaxLength(5000);
            entity.Property(e => e.Ucccode)
                .HasMaxLength(500)
                .HasColumnName("UCCCode");
        });

        modelBuilder.Entity<VwManagementMi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_Management_MIS");

            entity.Property(e => e.ActivatedToday).HasColumnType("datetime");
            entity.Property(e => e.BankerName).HasMaxLength(50);
            entity.Property(e => e.Cso).HasColumnName("CSO");
            entity.Property(e => e.Csoname)
                .HasMaxLength(500)
                .HasColumnName("CSOName");
            entity.Property(e => e.CurrentStatus).HasMaxLength(250);
            entity.Property(e => e.InProcess).HasColumnType("datetime");
            entity.Property(e => e.InvestorCode)
                .HasMaxLength(500)
                .HasDefaultValueSql("''");
            entity.Property(e => e.InvestorName).HasColumnType("text");
            entity.Property(e => e.ModeOfApplication)
                .HasMaxLength(8)
                .HasDefaultValueSql("''");
            entity.Property(e => e.MoreThan10Days).HasColumnName("MoreThan10_Days");
            entity.Property(e => e.NewInWard).HasColumnType("datetime");
            entity.Property(e => e.OnboardedDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("Onboarded_Date");
            entity.Property(e => e.OnboardedMonth)
                .HasMaxLength(9)
                .HasColumnName("onboarded_Month");
            entity.Property(e => e.Stage).HasMaxLength(5000);
            entity.Property(e => e.StageId).HasDefaultValueSql("'1'");
            entity.Property(e => e.SubLob)
                .HasMaxLength(250)
                .HasColumnName("SubLOB");
            entity.Property(e => e.SubLobid).HasColumnName("SubLOBId");
            entity.Property(e => e.Tat)
                .HasMaxLength(11)
                .HasDefaultValueSql("''")
                .HasColumnName("TAT");
            entity.Property(e => e.Type).HasMaxLength(500);
            entity.Property(e => e._0to2Days).HasColumnName("0to2_days");
            entity.Property(e => e._3to5Days).HasColumnName("3to5_days");
            entity.Property(e => e._6to10Days).HasColumnName("6to10_days");
        });

        modelBuilder.Entity<VwMonthlyMisEvaluate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_MonthlyMIS_Evaluate");

            entity.Property(e => e.LobId).HasDefaultValueSql("'0'");
            entity.Property(e => e.Product).HasMaxLength(500);
        });

        modelBuilder.Entity<VwStageMi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_StageMIS");

            entity.Property(e => e.AccountType).HasMaxLength(500);
            entity.Property(e => e.BankPoageneratedDate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BankPOAGeneratedDate");
            entity.Property(e => e.BankPoawelcomeLetter)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BankPOAwelcomeLetter");
            entity.Property(e => e.Banker).HasMaxLength(50);
            entity.Property(e => e.Bsecmpush)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BSECMPush");
            entity.Property(e => e.Bsecmreverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BSECMReverse");
            entity.Property(e => e.Bsesegment)
                .HasMaxLength(18)
                .HasDefaultValueSql("''")
                .HasColumnName("BSESegment");
            entity.Property(e => e.BsestarDematReverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BSEStarDematReverse");
            entity.Property(e => e.BsestarNwmDemat)
                .HasMaxLength(22)
                .HasDefaultValueSql("''")
                .HasColumnName("BSEStar_NWM_Demat");
            entity.Property(e => e.BsestarNwmPhysical)
                .HasMaxLength(22)
                .HasDefaultValueSql("''")
                .HasColumnName("BSEStar_NWM_Physical");
            entity.Property(e => e.BsestarNwp)
                .HasMaxLength(22)
                .HasDefaultValueSql("''")
                .HasColumnName("BSEStar_NWP");
            entity.Property(e => e.BsestarPhysicalReverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("BSEStarPhysicalReverse");
            entity.Property(e => e.Bseucc)
                .HasMaxLength(22)
                .HasColumnName("BSEUCC");
            entity.Property(e => e.CdslpushDate)
                .HasMaxLength(22)
                .HasDefaultValueSql("''")
                .HasColumnName("CDSLPushDate");
            entity.Property(e => e.CdslreverseDate)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CDSLReverseDate");
            entity.Property(e => e.Ckyc)
                .HasMaxLength(19)
                .HasColumnName("CKYC");
            entity.Property(e => e.ClassDppush)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ClassDPPush");
            entity.Property(e => e.ClassDpreverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("ClassDPReverse");
            entity.Property(e => e.ClassTradingPush)
                .HasMaxLength(22)
                .HasDefaultValueSql("''");
            entity.Property(e => e.ClassTradingReverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.CvlkradatePush)
                .HasMaxLength(23)
                .HasDefaultValueSql("''")
                .HasColumnName("CVLKRADatePush");
            entity.Property(e => e.CvlkradateReverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("CVLKRADateReverse");
            entity.Property(e => e.Cvlkrastatus)
                .HasMaxLength(50)
                .HasColumnName("CVLKRAStatus");
            entity.Property(e => e.Cxo)
                .HasMaxLength(500)
                .HasColumnName("CXO");
            entity.Property(e => e.FormNo)
                .HasMaxLength(500)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Icicibank)
                .HasMaxLength(2)
                .HasDefaultValueSql("''")
                .HasColumnName("ICICIBank");
            entity.Property(e => e.InvestmentCorpus).HasPrecision(18, 2);
            entity.Property(e => e.InvestorName).HasColumnType("text");
            entity.Property(e => e.InvestorPan)
                .HasMaxLength(50)
                .HasDefaultValueSql("''")
                .HasColumnName("InvestorPAN");
            entity.Property(e => e.InvestorType)
                .HasMaxLength(14)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Lob)
                .HasMaxLength(500)
                .HasColumnName("LOB");
            entity.Property(e => e.ModeOfApplication)
                .HasMaxLength(8)
                .HasDefaultValueSql("''");
            entity.Property(e => e.Nsecmpush)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("NSECMPush");
            entity.Property(e => e.Nsecmreverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("NSECMReverse");
            entity.Property(e => e.Nsesegment)
                .HasMaxLength(18)
                .HasDefaultValueSql("''")
                .HasColumnName("NSESegment");
            entity.Property(e => e.Nseucc)
                .HasMaxLength(22)
                .HasColumnName("NSEUCC");
            entity.Property(e => e.ReadyToTrade)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.Tat)
                .HasMaxLength(11)
                .HasDefaultValueSql("''")
                .HasColumnName("TAT");
            entity.Property(e => e.WealthSpectrumPush)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.WealthSpectrumReverse)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength();
            entity.Property(e => e.WltoInvestor)
                .HasMaxLength(0)
                .HasDefaultValueSql("''")
                .IsFixedLength()
                .HasColumnName("WLtoInvestor");
        });

        modelBuilder.Entity<Wealthspectclientmasterdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectclientmasterdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountClosingReason)
                .HasColumnType("text")
                .HasColumnName("Account_Closing_Reason");
            entity.Property(e => e.AccountOpenDate)
                .HasColumnType("text")
                .HasColumnName("Account_Open_Date");
            entity.Property(e => e.AccountingTxn).HasColumnType("text");
            entity.Property(e => e.AccounttClosureDate)
                .HasColumnType("text")
                .HasColumnName("Accountt_Closure_Date");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Address1)
                .HasColumnType("text")
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasColumnType("text")
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Advisorid).HasColumnName("ADVISORID");
            entity.Property(e => e.Advisorname)
                .HasColumnType("text")
                .HasColumnName("ADVISORNAME");
            entity.Property(e => e.ArnName)
                .HasColumnType("text")
                .HasColumnName("ARN_Name");
            entity.Property(e => e.Arnid).HasColumnName("ARNID");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE");
            entity.Property(e => e.Branchid).HasColumnName("BRANCHID");
            entity.Property(e => e.Branchname)
                .HasColumnType("text")
                .HasColumnName("BRANCHNAME");
            entity.Property(e => e.Brokeraccountid)
                .HasColumnType("text")
                .HasColumnName("BROKERACCOUNTID");
            entity.Property(e => e.CapitalCommitted).HasColumnName("CAPITAL_COMMITTED");
            entity.Property(e => e.Chargeupto)
                .HasColumnType("text")
                .HasColumnName("CHARGEUPTO");
            entity.Property(e => e.Circle)
                .HasColumnType("text")
                .HasColumnName("CIRCLE");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.ClientBankAccount)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Account");
            entity.Property(e => e.ClientBankCode)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Code");
            entity.Property(e => e.ClientCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_AccountId");
            entity.Property(e => e.ClientCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Code");
            entity.Property(e => e.ClientCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_DP");
            entity.Property(e => e.ClientCustodySchemeCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Scheme_Code");
            entity.Property(e => e.Clientcategory)
                .HasColumnType("text")
                .HasColumnName("CLIENTCATEGORY");
            entity.Property(e => e.Clientcode)
                .HasColumnType("text")
                .HasColumnName("CLIENTCODE");
            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Clientname)
                .HasColumnType("text")
                .HasColumnName("CLIENTNAME");
            entity.Property(e => e.Clienttype)
                .HasColumnType("text")
                .HasColumnName("CLIENTTYPE");
            entity.Property(e => e.Contactname)
                .HasColumnType("text")
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Dailyexpenseaccrual)
                .HasColumnType("text")
                .HasColumnName("DAILYEXPENSEACCRUAL");
            entity.Property(e => e.Dir1mapin)
                .HasColumnType("text")
                .HasColumnName("DIR1MAPIN");
            entity.Property(e => e.Dir1name)
                .HasColumnType("text")
                .HasColumnName("DIR1NAME");
            entity.Property(e => e.Dir2mapin)
                .HasColumnType("text")
                .HasColumnName("DIR2MAPIN");
            entity.Property(e => e.Dir2name)
                .HasColumnType("text")
                .HasColumnName("DIR2NAME");
            entity.Property(e => e.Dir3mapin)
                .HasColumnType("text")
                .HasColumnName("DIR3MAPIN");
            entity.Property(e => e.Dir3name)
                .HasColumnType("text")
                .HasColumnName("DIR3NAME");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.FatherHusband)
                .HasColumnType("text")
                .HasColumnName("FATHER_HUSBAND");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Feepaymentmode)
                .HasColumnType("text")
                .HasColumnName("FEEPAYMENTMODE");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firmname)
                .HasColumnType("text")
                .HasColumnName("FIRMNAME");
            entity.Property(e => e.FirstHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("First_Holder_AADHAR");
            entity.Property(e => e.FirstHolderFatca)
                .HasColumnType("text")
                .HasColumnName("First_Holder_FATCA");
            entity.Property(e => e.FirstHolderGender)
                .HasColumnType("text")
                .HasColumnName("First_Holder_Gender");
            entity.Property(e => e.FirstHolderKyc)
                .HasColumnType("text")
                .HasColumnName("First_Holder_KYC");
            entity.Property(e => e.FirstHolderUbo)
                .HasColumnType("text")
                .HasColumnName("First_Holder_UBO");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fundmgrid).HasColumnName("FUNDMGRID");
            entity.Property(e => e.Fundmgrname)
                .HasColumnType("text")
                .HasColumnName("FUNDMGRNAME");
            entity.Property(e => e.Groupid).HasColumnName("GROUPID");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.HeadOfFamily)
                .HasColumnType("text")
                .HasColumnName("Head_of_Family");
            entity.Property(e => e.Incentive)
                .HasColumnType("text")
                .HasColumnName("INCENTIVE");
            entity.Property(e => e.IncentiveRate)
                .HasColumnType("text")
                .HasColumnName("Incentive_Rate");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediaryid).HasColumnName("INTERMEDIARYID");
            entity.Property(e => e.Intermediaryname)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARYNAME");
            entity.Property(e => e.Joint1FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT1_FATHER_HUSBAND");
            entity.Property(e => e.Joint1Name)
                .HasColumnType("text")
                .HasColumnName("JOINT1_NAME");
            entity.Property(e => e.Joint1Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT1_PAN");
            entity.Property(e => e.Joint2FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT2_FATHER_HUSBAND");
            entity.Property(e => e.Joint2Name)
                .HasColumnType("text")
                .HasColumnName("JOINT2_NAME");
            entity.Property(e => e.Joint2Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT2_PAN");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.MailAddress1)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS1");
            entity.Property(e => e.MailAddress2)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS2");
            entity.Property(e => e.MailCity)
                .HasColumnType("text")
                .HasColumnName("MAIL_CITY");
            entity.Property(e => e.MailEmailid)
                .HasColumnType("text")
                .HasColumnName("MAIL_EMAILID");
            entity.Property(e => e.MailFax)
                .HasColumnType("text")
                .HasColumnName("MAIL_FAX");
            entity.Property(e => e.MailMobile)
                .HasColumnType("text")
                .HasColumnName("MAIL_MOBILE");
            entity.Property(e => e.MailPhonehome)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEHOME");
            entity.Property(e => e.MailPhonework)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEWORK");
            entity.Property(e => e.MailPincode)
                .HasColumnType("text")
                .HasColumnName("MAIL_PINCODE");
            entity.Property(e => e.MailState)
                .HasColumnType("text")
                .HasColumnName("MAIL_STATE");
            entity.Property(e => e.Mandatebankaccountno)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTNO");
            entity.Property(e => e.Mandatebankaccounttype)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTTYPE");
            entity.Property(e => e.Mandatebankbranchname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKBRANCHNAME");
            entity.Property(e => e.Mandatebankname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKNAME");
            entity.Property(e => e.Mandatedepository)
                .HasColumnType("text")
                .HasColumnName("MANDATEDEPOSITORY");
            entity.Property(e => e.Mandatedp)
                .HasColumnType("text")
                .HasColumnName("MANDATEDP");
            entity.Property(e => e.Mandatedpclientid)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPCLIENTID");
            entity.Property(e => e.Mandatedpname)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPNAME");
            entity.Property(e => e.Mandatemicr)
                .HasColumnType("text")
                .HasColumnName("MANDATEMICR");
            entity.Property(e => e.Mandateneft)
                .HasColumnType("text")
                .HasColumnName("MANDATENEFT");
            entity.Property(e => e.Mandatertgs)
                .HasColumnType("text")
                .HasColumnName("MANDATERTGS");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.ModeOfHolding)
                .HasColumnType("text")
                .HasColumnName("Mode_of_Holding");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Ownerid).HasColumnName("OWNERID");
            entity.Property(e => e.Ownername)
                .HasColumnType("text")
                .HasColumnName("OWNERNAME");
            entity.Property(e => e.Pannumber)
                .HasColumnType("text")
                .HasColumnName("PANNUMBER");
            entity.Property(e => e.Performancereportingdate)
                .HasColumnType("text")
                .HasColumnName("PERFORMANCEREPORTINGDATE");
            entity.Property(e => e.Phonehome)
                .HasColumnType("text")
                .HasColumnName("PHONEHOME");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relmgrid).HasColumnName("RELMGRID");
            entity.Property(e => e.Rmname)
                .HasColumnType("text")
                .HasColumnName("RMNAME");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Schemeid).HasColumnName("SCHEMEID");
            entity.Property(e => e.Schemename)
                .HasColumnType("text")
                .HasColumnName("SCHEMENAME");
            entity.Property(e => e.Scope)
                .HasMaxLength(100)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid)
                .HasMaxLength(100)
                .HasColumnName("scopeid");
            entity.Property(e => e.SecondHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_AADHAR");
            entity.Property(e => e.SecondHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_AccType");
            entity.Property(e => e.SecondHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Account_No");
            entity.Property(e => e.SecondHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Name");
            entity.Property(e => e.SecondHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Branch_Name");
            entity.Property(e => e.SecondHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Depository");
            entity.Property(e => e.SecondHolderDob)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DOB");
            entity.Property(e => e.SecondHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Client_Id");
            entity.Property(e => e.SecondHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Id");
            entity.Property(e => e.SecondHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Name");
            entity.Property(e => e.SecondHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_FATCA");
            entity.Property(e => e.SecondHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Father_Husband");
            entity.Property(e => e.SecondHolderGender)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Gender");
            entity.Property(e => e.SecondHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_KYC");
            entity.Property(e => e.SecondHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Micr_Number");
            entity.Property(e => e.SecondHolderName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Name");
            entity.Property(e => e.SecondHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_NEFT_Code");
            entity.Property(e => e.SecondHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Occupation");
            entity.Property(e => e.SecondHolderPan)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Pan");
            entity.Property(e => e.SecondHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Relation");
            entity.Property(e => e.SecondHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_RTGS_Code");
            entity.Property(e => e.SecondHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Status");
            entity.Property(e => e.SecondHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_UBO");
            entity.Property(e => e.Sharereportsflag)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTSFLAG");
            entity.Property(e => e.SkipFromMfCorporateAction)
                .HasColumnType("text")
                .HasColumnName("Skip_from_MF_corporate_action");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.StttakenAs)
                .HasColumnType("text")
                .HasColumnName("STTTaken_As");
            entity.Property(e => e.Tannumber)
                .HasColumnType("text")
                .HasColumnName("TANNUMBER");
            entity.Property(e => e.Tdsonfees)
                .HasColumnType("text")
                .HasColumnName("TDSONFEES");
            entity.Property(e => e.ThirdHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_AADHAR");
            entity.Property(e => e.ThirdHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_AccType");
            entity.Property(e => e.ThirdHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Account_No");
            entity.Property(e => e.ThirdHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Name");
            entity.Property(e => e.ThirdHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Branch_Name");
            entity.Property(e => e.ThirdHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Depository");
            entity.Property(e => e.ThirdHolderDob)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DOB");
            entity.Property(e => e.ThirdHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Client_Id");
            entity.Property(e => e.ThirdHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Id");
            entity.Property(e => e.ThirdHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Name");
            entity.Property(e => e.ThirdHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_FATCA");
            entity.Property(e => e.ThirdHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Father_Husband");
            entity.Property(e => e.ThirdHolderGender)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Gender");
            entity.Property(e => e.ThirdHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_KYC");
            entity.Property(e => e.ThirdHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Micr_Number_");
            entity.Property(e => e.ThirdHolderName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Name");
            entity.Property(e => e.ThirdHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_NEFT_Code");
            entity.Property(e => e.ThirdHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Occupation");
            entity.Property(e => e.ThirdHolderPanNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Pan_No");
            entity.Property(e => e.ThirdHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Relation");
            entity.Property(e => e.ThirdHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_RTGS_Code");
            entity.Property(e => e.ThirdHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Status");
            entity.Property(e => e.ThirdHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_UBO");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.TradingBankAccount)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Account");
            entity.Property(e => e.TradingBankCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Code");
            entity.Property(e => e.TradingCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_AccountId");
            entity.Property(e => e.TradingCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_Code");
            entity.Property(e => e.TradingCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_DP");
            entity.Property(e => e.TrxnTakenAs)
                .HasColumnType("text")
                .HasColumnName("TrxnTaken_As");
            entity.Property(e => e.Username)
                .HasColumnType("text")
                .HasColumnName("USERNAME");
            entity.Property(e => e.Ward)
                .HasColumnType("text")
                .HasColumnName("WARD");
            entity.Property(e => e.WealthAdvisorName)
                .HasColumnType("text")
                .HasColumnName("WealthAdvisor_Name");
        });

        modelBuilder.Entity<Wealthspectrumaccountactivationlog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumaccountactivationlogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefCode1).HasMaxLength(20);
            entity.Property(e => e.Response).HasColumnType("text");
        });

        modelBuilder.Entity<Wealthspectrumaccounttype>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wealthspectrumaccounttype");

            entity.Property(e => e.AccountType).HasColumnType("text");
            entity.Property(e => e.Assest)
                .HasColumnType("text")
                .HasColumnName("assest");
            entity.Property(e => e.Banker).HasColumnType("text");
            entity.Property(e => e.ClientCode).HasColumnType("text");
            entity.Property(e => e.Cso)
                .HasColumnType("text")
                .HasColumnName("CSO");
            entity.Property(e => e.DirectWscode)
                .HasColumnType("text")
                .HasColumnName("DirectWSCode");
            entity.Property(e => e.Dpmswscode)
                .HasColumnType("text")
                .HasColumnName("DPMSWSCode");
            entity.Property(e => e.HeldawayWscode)
                .HasColumnType("text")
                .HasColumnName("HeldawayWSCode");
            entity.Property(e => e.Lob).HasColumnType("text");
            entity.Property(e => e.Name).HasColumnType("text");
            entity.Property(e => e.Ndpmswscode)
                .HasColumnType("text")
                .HasColumnName("NDPMSWScode");
            entity.Property(e => e.NonPoawscodes)
                .HasColumnType("text")
                .HasColumnName("NonPOAWSCodes");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("PAN");
            entity.Property(e => e.Poawscodes)
                .HasColumnType("text")
                .HasColumnName("POAWSCodes");
            entity.Property(e => e.Remarks).HasColumnType("text");
            entity.Property(e => e.SubLob).HasColumnType("text");
            entity.Property(e => e.Type).HasColumnType("text");
        });

        modelBuilder.Entity<Wealthspectrumcientdeleteapilog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumcientdeleteapilogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.RefNumber).HasColumnName("refNumber");
            entity.Property(e => e.Response).HasMaxLength(5000);
        });

        modelBuilder.Entity<Wealthspectrumclientid>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumclientids");

            entity.Property(e => e.AccountType).HasMaxLength(50);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Pan)
                .HasMaxLength(10)
                .HasColumnName("PAN");
            entity.Property(e => e.Wstype)
                .HasMaxLength(20)
                .HasColumnName("WSType");
        });

        modelBuilder.Entity<Wealthspectrumclientmasterdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wealthspectrumclientmasterdata");

            entity.Property(e => e.Accountclosuredate).HasColumnName("accountclosuredate");
            entity.Property(e => e.Accreditedinvestor)
                .HasMaxLength(100)
                .HasColumnName("accreditedinvestor");
            entity.Property(e => e.Agent)
                .HasMaxLength(100)
                .HasColumnName("agent");
            entity.Property(e => e.Arnname)
                .HasMaxLength(100)
                .HasColumnName("arnname");
            entity.Property(e => e.Bankaccount)
                .HasColumnType("text")
                .HasColumnName("bankaccount");
            entity.Property(e => e.Billgroup)
                .HasMaxLength(100)
                .HasColumnName("billgroup");
            entity.Property(e => e.Branchid).HasColumnName("branchid");
            entity.Property(e => e.Brokeraccountid)
                .HasMaxLength(100)
                .HasColumnName("brokeraccountid");
            entity.Property(e => e.Clientbankaccount)
                .HasMaxLength(100)
                .HasColumnName("clientbankaccount");
            entity.Property(e => e.Clientcustodyaccountid)
                .HasMaxLength(100)
                .HasColumnName("clientcustodyaccountid");
            entity.Property(e => e.Clientcustodycode)
                .HasMaxLength(255)
                .HasColumnName("clientcustodycode");
            entity.Property(e => e.Clientcustodyschemecode)
                .HasMaxLength(100)
                .HasColumnName("clientcustodyschemecode");
            entity.Property(e => e.Clientid).HasColumnName("clientid");
            entity.Property(e => e.Clienttype)
                .HasMaxLength(100)
                .HasColumnName("clienttype");
            entity.Property(e => e.Contactname)
                .HasMaxLength(100)
                .HasColumnName("contactname");
            entity.Property(e => e.Ddofb)
                .HasMaxLength(100)
                .HasColumnName("ddofb");
            entity.Property(e => e.Dir1mapin)
                .HasMaxLength(100)
                .HasColumnName("dir1mapin");
            entity.Property(e => e.Dir2name)
                .HasMaxLength(100)
                .HasColumnName("dir2name");
            entity.Property(e => e.Dir3mapin)
                .HasMaxLength(100)
                .HasColumnName("dir3mapin");
            entity.Property(e => e.Feepaymentmode)
                .HasMaxLength(100)
                .HasColumnName("feepaymentmode");
            entity.Property(e => e.Firmid).HasColumnName("firmid");
            entity.Property(e => e.Firmname)
                .HasMaxLength(100)
                .HasColumnName("firmname");
            entity.Property(e => e.Firstholderaddress)
                .HasColumnType("text")
                .HasColumnName("firstholderaddress");
            entity.Property(e => e.Firstholderkyc)
                .HasMaxLength(100)
                .HasColumnName("firstholderkyc");
            entity.Property(e => e.Firstholderpan)
                .HasMaxLength(100)
                .HasColumnName("firstholderpan");
            entity.Property(e => e.Firstholderubo)
                .HasMaxLength(100)
                .HasColumnName("firstholderubo");
            entity.Property(e => e.Firstname)
                .HasMaxLength(100)
                .HasColumnName("firstname");
            entity.Property(e => e.Fundmgrind).HasColumnName("fundmgrind");
            entity.Property(e => e.Guardianname)
                .HasMaxLength(100)
                .HasColumnName("guardianname");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Intermediaryname)
                .HasMaxLength(100)
                .HasColumnName("intermediaryname");
            entity.Property(e => e.Joint1name)
                .HasMaxLength(255)
                .HasColumnName("joint1name");
            entity.Property(e => e.Joint2aadhar)
                .HasMaxLength(255)
                .HasColumnName("joint2aadhar");
            entity.Property(e => e.Joint2name)
                .HasMaxLength(100)
                .HasColumnName("joint2name");
            entity.Property(e => e.Joint2pan)
                .HasMaxLength(100)
                .HasColumnName("joint2pan");
            entity.Property(e => e.Mailaddress)
                .HasColumnType("text")
                .HasColumnName("mailaddress");
            entity.Property(e => e.Mailfax)
                .HasMaxLength(100)
                .HasColumnName("mailfax");
            entity.Property(e => e.Mailmobile)
                .HasMaxLength(100)
                .HasColumnName("mailmobile");
            entity.Property(e => e.Mailphonehome)
                .HasMaxLength(100)
                .HasColumnName("mailphonehome");
            entity.Property(e => e.Mailphonework)
                .HasMaxLength(100)
                .HasColumnName("mailphonework");
            entity.Property(e => e.Mailpincode)
                .HasMaxLength(20)
                .HasColumnName("mailpincode");
            entity.Property(e => e.Mailstate)
                .HasMaxLength(100)
                .HasColumnName("mailstate");
            entity.Property(e => e.Manager)
                .HasMaxLength(100)
                .HasColumnName("manager");
            entity.Property(e => e.Mandatebankbranchname)
                .HasMaxLength(100)
                .HasColumnName("mandatebankbranchname");
            entity.Property(e => e.Mandatebankname)
                .HasMaxLength(100)
                .HasColumnName("mandatebankname");
            entity.Property(e => e.Mandatedpclientid)
                .HasMaxLength(100)
                .HasColumnName("mandatedpclientid");
            entity.Property(e => e.Mandatedpname)
                .HasMaxLength(100)
                .HasColumnName("mandatedpname");
            entity.Property(e => e.Mandatemicr)
                .HasMaxLength(100)
                .HasColumnName("mandatemicr");
            entity.Property(e => e.Mandatertgs)
                .HasMaxLength(100)
                .HasColumnName("mandatertgs");
            entity.Property(e => e.Modeofholding)
                .HasMaxLength(100)
                .HasColumnName("modeofholding");
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .HasColumnName("nationality");
            entity.Property(e => e.Nominee1)
                .HasColumnType("text")
                .HasColumnName("nominee1");
            entity.Property(e => e.Nominee2)
                .HasColumnType("text")
                .HasColumnName("nominee2");
            entity.Property(e => e.Nominee3)
                .HasColumnType("text")
                .HasColumnName("nominee3");
            entity.Property(e => e.Nominee4)
                .HasColumnType("text")
                .HasColumnName("nominee4");
            entity.Property(e => e.Nominee5)
                .HasColumnType("text")
                .HasColumnName("nominee5");
            entity.Property(e => e.Ownerid).HasColumnName("ownerid");
            entity.Property(e => e.Pincode)
                .HasMaxLength(20)
                .HasColumnName("pincode");
            entity.Property(e => e.Poa)
                .HasColumnType("text")
                .HasColumnName("poa");
            entity.Property(e => e.Pot)
                .HasColumnType("text")
                .HasColumnName("pot");
            entity.Property(e => e.Refcode1)
                .HasMaxLength(100)
                .HasColumnName("refcode1");
            entity.Property(e => e.Refcode2)
                .HasMaxLength(100)
                .HasColumnName("refcode2");
            entity.Property(e => e.Refcode3)
                .HasMaxLength(100)
                .HasColumnName("refcode3");
            entity.Property(e => e.Refcode4)
                .HasMaxLength(100)
                .HasColumnName("refcode4");
            entity.Property(e => e.Refcode5)
                .HasMaxLength(100)
                .HasColumnName("refcode5");
            entity.Property(e => e.Refcode6)
                .HasMaxLength(100)
                .HasColumnName("refcode6");
            entity.Property(e => e.Refcode7)
                .HasMaxLength(100)
                .HasColumnName("refcode7");
            entity.Property(e => e.Refcode8)
                .HasMaxLength(100)
                .HasColumnName("refcode8");
            entity.Property(e => e.Refcode9)
                .HasMaxLength(100)
                .HasColumnName("refcode9");
            entity.Property(e => e.Relmgrid).HasColumnName("relmgrid");
            entity.Property(e => e.Rmname)
                .HasMaxLength(100)
                .HasColumnName("rmname");
            entity.Property(e => e.Scope)
                .HasMaxLength(100)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid)
                .HasMaxLength(100)
                .HasColumnName("scopeid");
            entity.Property(e => e.Secondholderaadhar)
                .HasMaxLength(255)
                .HasColumnName("secondholderaadhar");
            entity.Property(e => e.Secondholderaddress)
                .HasColumnType("text")
                .HasColumnName("secondholderaddress");
            entity.Property(e => e.Secondholderbankaccttype)
                .HasMaxLength(100)
                .HasColumnName("secondholderbankaccttype");
            entity.Property(e => e.Secondholderbankname)
                .HasMaxLength(100)
                .HasColumnName("secondholderbankname");
            entity.Property(e => e.Secondholderdepository)
                .HasMaxLength(100)
                .HasColumnName("secondholderdepository");
            entity.Property(e => e.Secondholderdob).HasColumnName("secondholderdob");
            entity.Property(e => e.Secondholderdpclientid)
                .HasMaxLength(100)
                .HasColumnName("secondholderdpclientid");
            entity.Property(e => e.Secondholderfatca)
                .HasMaxLength(100)
                .HasColumnName("secondholderfatca");
            entity.Property(e => e.Secondholderfatherhusband)
                .HasMaxLength(100)
                .HasColumnName("secondholderfatherhusband");
            entity.Property(e => e.Secondholdermicrnumber)
                .HasMaxLength(100)
                .HasColumnName("secondholdermicrnumber");
            entity.Property(e => e.Secondholdername)
                .HasMaxLength(100)
                .HasColumnName("secondholdername");
            entity.Property(e => e.Secondholderneftcode)
                .HasMaxLength(100)
                .HasColumnName("secondholderneftcode");
            entity.Property(e => e.Secondholderrelation)
                .HasMaxLength(100)
                .HasColumnName("secondholderrelation");
            entity.Property(e => e.Secondholderrtgscode)
                .HasMaxLength(100)
                .HasColumnName("secondholderrtgscode");
            entity.Property(e => e.Stttakenas)
                .HasMaxLength(100)
                .HasColumnName("stttakenas");
            entity.Property(e => e.Subdistributor)
                .HasMaxLength(100)
                .HasColumnName("subdistributor");
            entity.Property(e => e.Thirdholderaadhar)
                .HasMaxLength(100)
                .HasColumnName("thirdholderaadhar");
            entity.Property(e => e.Thirdholderaddress)
                .HasColumnType("text")
                .HasColumnName("thirdholderaddress");
            entity.Property(e => e.Thirdholderbankaccountno)
                .HasMaxLength(100)
                .HasColumnName("thirdholderbankaccountno");
            entity.Property(e => e.Thirdholderbankaccttype)
                .HasMaxLength(100)
                .HasColumnName("thirdholderbankaccttype");
            entity.Property(e => e.Thirdholderdepository)
                .HasMaxLength(100)
                .HasColumnName("thirdholderdepository");
            entity.Property(e => e.Thirdholderdob).HasColumnName("thirdholderdob");
            entity.Property(e => e.Thirdholderdpclientid)
                .HasMaxLength(255)
                .HasColumnName("thirdholderdpclientid");
            entity.Property(e => e.Thirdholderdpid)
                .HasMaxLength(100)
                .HasColumnName("thirdholderdpid");
            entity.Property(e => e.Thirdholdermicrnumber)
                .HasMaxLength(100)
                .HasColumnName("thirdholdermicrnumber");
            entity.Property(e => e.Thirdholdername)
                .HasMaxLength(100)
                .HasColumnName("thirdholdername");
            entity.Property(e => e.Thirdholderoccupation)
                .HasMaxLength(100)
                .HasColumnName("thirdholderoccupation");
            entity.Property(e => e.Thirdholderpan)
                .HasMaxLength(255)
                .HasColumnName("thirdholderpan");
            entity.Property(e => e.Thirdholderrelation)
                .HasMaxLength(100)
                .HasColumnName("thirdholderrelation");
            entity.Property(e => e.Thirdholderrtgscode)
                .HasMaxLength(100)
                .HasColumnName("thirdholderrtgscode");
            entity.Property(e => e.Thirdholderstatus)
                .HasMaxLength(100)
                .HasColumnName("thirdholderstatus");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Tradingbankaccount)
                .HasMaxLength(100)
                .HasColumnName("tradingbankaccount");
            entity.Property(e => e.Trxtakenas)
                .HasMaxLength(100)
                .HasColumnName("trxtakenas");
            entity.Property(e => e.Ucc)
                .HasMaxLength(100)
                .HasColumnName("ucc");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .HasColumnName("username");
            entity.Property(e => e.Ward)
                .HasMaxLength(100)
                .HasColumnName("ward");
        });

        modelBuilder.Entity<Wealthspectrumgroupmapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumgroupmapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GroupCode).HasMaxLength(50);
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Wealthspectrummappingmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrummappingmaster");

            entity.Property(e => e.CategoryType)
                .HasMaxLength(100)
                .HasColumnName("categoryType");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.SystemId).HasColumnName("systemId");
            entity.Property(e => e.WealthText)
                .HasMaxLength(100)
                .HasColumnName("wealthText");
            entity.Property(e => e.WealthValue)
                .HasMaxLength(45)
                .HasColumnName("wealthValue");
        });

        modelBuilder.Entity<Wealthspectrumrefcode1mapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumrefcode1mapping");

            entity.Property(e => e.AccountingTxn).HasMaxLength(2);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.OperationType).HasMaxLength(1);
            entity.Property(e => e.RefCode1).HasMaxLength(50);
        });

        modelBuilder.Entity<Wealthspectrumschemenamemapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumschemenamemapping");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.SchemeName).HasMaxLength(500);
        });

        modelBuilder.Entity<Wealthspectrumupdateclientapilog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumupdateclientapilogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(10000);
            entity.Property(e => e.Response).HasMaxLength(5000);
        });

        modelBuilder.Entity<Wealthspectrumupdateholdersapilog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumupdateholdersapilogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(10000);
            entity.Property(e => e.Response).HasMaxLength(5000);
        });

        modelBuilder.Entity<Wealthspectrumupdatenomineesapilog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wealthspectrumupdatenomineesapilogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ModifiedOn).HasColumnType("datetime");
            entity.Property(e => e.Request).HasMaxLength(10000);
            entity.Property(e => e.Response).HasMaxLength(5000);
        });

        modelBuilder.Entity<WhatsappResponseLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("WhatsappResponseLog");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Dt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("dt");
            entity.Property(e => e.Response)
                .HasMaxLength(1000)
                .HasColumnName("response");
        });

        modelBuilder.Entity<WsApiurl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_apiurls");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApiName).HasMaxLength(255);
            entity.Property(e => e.ApiUrl).HasMaxLength(255);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<WsBankdetailsdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_bankdetailsdata");

            entity.HasIndex(e => e.ClientCode, "_idxClientCode");

            entity.Property(e => e.BankAccountNumber).HasMaxLength(30);
            entity.Property(e => e.BankAccountType).HasMaxLength(20);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankIfsc).HasMaxLength(20);
            entity.Property(e => e.BankMicr).HasMaxLength(20);
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BankRtgs).HasMaxLength(30);
            entity.Property(e => e.ClientCode).HasMaxLength(10);
            entity.Property(e => e.ClientId).HasMaxLength(10);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.GroupId).HasMaxLength(10);
            entity.Property(e => e.IsPoa).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsPrimary).HasDefaultValueSql("'1'");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.OwnerId).HasMaxLength(10);
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<WsBankdpdetailsdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_bankdpdetailsdata");

            entity.Property(e => e.Amc)
                .HasColumnType("text")
                .HasColumnName("AMC");
            entity.Property(e => e.Amcname)
                .HasColumnType("text")
                .HasColumnName("AMCNAME");
            entity.Property(e => e.BankBranch)
                .HasColumnType("text")
                .HasColumnName("BANK_BRANCH");
            entity.Property(e => e.Bankaccount)
                .HasColumnType("text")
                .HasColumnName("BANKACCOUNT");
            entity.Property(e => e.Bankaccountdtl)
                .HasColumnType("text")
                .HasColumnName("BANKACCOUNTDTL");
            entity.Property(e => e.Bankactype)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankcode)
                .HasColumnType("text")
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankname)
                .HasColumnType("text")
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Cashsymbol)
                .HasColumnType("text")
                .HasColumnName("CASHSYMBOL");
            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Clientname)
                .HasColumnType("text")
                .HasColumnName("CLIENTNAME");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Custodyschemecode)
                .HasColumnType("text")
                .HasColumnName("CUSTODYSCHEMECODE");
            entity.Property(e => e.Defaultamc)
                .HasColumnType("text")
                .HasColumnName("DEFAULTAMC");
            entity.Property(e => e.Depository)
                .HasColumnType("text")
                .HasColumnName("DEPOSITORY");
            entity.Property(e => e.Despositoryname)
                .HasColumnType("text")
                .HasColumnName("DESPOSITORYNAME");
            entity.Property(e => e.Dpclientid)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpid)
                .HasColumnType("text")
                .HasColumnName("DPID");
            entity.Property(e => e.Dpname)
                .HasColumnType("text")
                .HasColumnName("DPNAME");
            entity.Property(e => e.Folio)
                .HasColumnType("text")
                .HasColumnName("FOLIO");
            entity.Property(e => e.Folioactive)
                .HasColumnType("text")
                .HasColumnName("FOLIOACTIVE");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Registrar)
                .HasColumnType("text")
                .HasColumnName("REGISTRAR");
            entity.Property(e => e.Registrarname)
                .HasColumnType("text")
                .HasColumnName("REGISTRARNAME");
            entity.Property(e => e.Subfolio)
                .HasColumnType("text")
                .HasColumnName("SUBFOLIO");
            entity.Property(e => e.Type)
                .HasColumnType("text")
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<WsBankercsomappingdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_bankercsomappingdata");

            entity.Property(e => e.BankerCode)
                .HasColumnType("text")
                .HasColumnName("banker_code");
            entity.Property(e => e.CsoCode)
                .HasColumnType("text")
                .HasColumnName("cso_code");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
        });

        modelBuilder.Entity<WsBseDataurl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.FlagDesc).HasMaxLength(200);
            entity.Property(e => e.ServiceProvider).HasMaxLength(200);
            entity.Property(e => e.Url).HasMaxLength(500);
        });

        modelBuilder.Entity<WsBseschememaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_bseschememaster");

            entity.Property(e => e.AddPurchaseAmount).HasColumnName("ADD_PURCHASE_AMOUNT");
            entity.Property(e => e.AmcInd)
                .HasColumnType("text")
                .HasColumnName("AMC_IND");
            entity.Property(e => e.Amcactiveflag).HasColumnName("AMCACTIVEFLAG");
            entity.Property(e => e.Amccode)
                .HasColumnType("text")
                .HasColumnName("AMCCODE");
            entity.Property(e => e.Amcschemecode)
                .HasColumnType("text")
                .HasColumnName("AMCSCHEMECODE");
            entity.Property(e => e.ChannelPartCode)
                .HasColumnType("text")
                .HasColumnName("CHANNEL_PART_CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DivReinvestmentFlag)
                .HasColumnType("text")
                .HasColumnName("DIV_REINVESTMENT_FLAG");
            entity.Property(e => e.Enddate)
                .HasColumnType("text")
                .HasColumnName("ENDDATE");
            entity.Property(e => e.Exitload)
                .HasColumnType("text")
                .HasColumnName("EXITLOAD");
            entity.Property(e => e.Exitloadflag)
                .HasColumnType("text")
                .HasColumnName("EXITLOADFLAG");
            entity.Property(e => e.Facevalue).HasColumnName("FACEVALUE");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isin)
                .HasColumnType("text")
                .HasColumnName("ISIN");
            entity.Property(e => e.LockinPeriod).HasColumnName("LOCKIN_PERIOD");
            entity.Property(e => e.LockinPeriodFlag)
                .HasColumnType("text")
                .HasColumnName("LOCKIN_PERIOD_FLAG");
            entity.Property(e => e.MaxPurchaseAmount).HasColumnName("MAX_PURCHASE_AMOUNT");
            entity.Property(e => e.MaxRedemptionQty).HasColumnName("MAX_REDEMPTION_QTY");
            entity.Property(e => e.MinPurchaseAmount).HasColumnName("MIN_PURCHASE_AMOUNT");
            entity.Property(e => e.MinRedemptionQty).HasColumnName("MIN_REDEMPTION_QTY");
            entity.Property(e => e.PurAmountMultiplier).HasColumnName("PUR_AMOUNT_MULTIPLIER");
            entity.Property(e => e.PurchaseTranMode)
                .HasColumnType("text")
                .HasColumnName("PURCHASE_TRAN_MODE");
            entity.Property(e => e.Purchaseallowed)
                .HasColumnType("text")
                .HasColumnName("PURCHASEALLOWED");
            entity.Property(e => e.Purchasecutofftime)
                .HasColumnType("text")
                .HasColumnName("PURCHASECUTOFFTIME");
            entity.Property(e => e.RedemptionAmtMax).HasColumnName("REDEMPTION_AMT_MAX");
            entity.Property(e => e.RedemptionAmtMin).HasColumnName("REDEMPTION_AMT_MIN");
            entity.Property(e => e.RedemptionAmtMultiple).HasColumnName("REDEMPTION_AMT_MULTIPLE");
            entity.Property(e => e.RedemptionQtyMultiplier).HasColumnName("REDEMPTION_QTY_MULTIPLIER");
            entity.Property(e => e.RedemptionTransMode)
                .HasColumnType("text")
                .HasColumnName("REDEMPTION_TRANS_MODE");
            entity.Property(e => e.Redemptionallowed)
                .HasColumnType("text")
                .HasColumnName("REDEMPTIONALLOWED");
            entity.Property(e => e.Redemptioncutofftime)
                .HasColumnType("text")
                .HasColumnName("REDEMPTIONCUTOFFTIME");
            entity.Property(e => e.Rtaagentcode)
                .HasColumnType("text")
                .HasColumnName("RTAAGENTCODE");
            entity.Property(e => e.Rtaschemecode)
                .HasColumnType("text")
                .HasColumnName("RTASCHEMECODE");
            entity.Property(e => e.Schemecode)
                .HasColumnType("text")
                .HasColumnName("SCHEMECODE");
            entity.Property(e => e.Schemename)
                .HasColumnType("text")
                .HasColumnName("SCHEMENAME");
            entity.Property(e => e.Schemeplan)
                .HasColumnType("text")
                .HasColumnName("SCHEMEPLAN");
            entity.Property(e => e.Schemetype)
                .HasColumnType("text")
                .HasColumnName("SCHEMETYPE");
            entity.Property(e => e.SettlementType)
                .HasColumnType("text")
                .HasColumnName("SETTLEMENT_TYPE");
            entity.Property(e => e.Sipflag)
                .HasColumnType("text")
                .HasColumnName("SIPFLAG");
            entity.Property(e => e.Startdate)
                .HasColumnType("text")
                .HasColumnName("STARTDATE");
            entity.Property(e => e.Stpflag)
                .HasColumnType("text")
                .HasColumnName("STPFLAG");
            entity.Property(e => e.Switchflag)
                .HasColumnType("text")
                .HasColumnName("SWITCHFLAG");
            entity.Property(e => e.Swpflag)
                .HasColumnType("text")
                .HasColumnName("SWPFLAG");
            entity.Property(e => e.Uniqueno)
                .HasColumnType("text")
                .HasColumnName("UNIQUENO");
            entity.Property(e => e.Wssymbolcode)
                .HasColumnType("text")
                .HasColumnName("WSSYMBOLCODE");
        });

        modelBuilder.Entity<WsBseuccstarformat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_bseuccstarformat");

            entity.Property(e => e.BseUccCode)
                .HasColumnType("text")
                .HasColumnName("BSE_UCC_Code");
            entity.Property(e => e.ClientAccno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO1");
            entity.Property(e => e.ClientAccno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO2");
            entity.Property(e => e.ClientAccno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO3");
            entity.Property(e => e.ClientAccno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO4");
            entity.Property(e => e.ClientAccno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO5");
            entity.Property(e => e.ClientAcctype1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE1");
            entity.Property(e => e.ClientAcctype2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE2");
            entity.Property(e => e.ClientAcctype3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE3");
            entity.Property(e => e.ClientAcctype4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE4");
            entity.Property(e => e.ClientAcctype5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE5");
            entity.Property(e => e.ClientAdd1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD1");
            entity.Property(e => e.ClientAdd2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD2");
            entity.Property(e => e.ClientAdd3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD3");
            entity.Property(e => e.ClientCdslcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLCLTID");
            entity.Property(e => e.ClientCdsldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLDPID");
            entity.Property(e => e.ClientChequename5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CHEQUENAME5");
            entity.Property(e => e.ClientCity)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CITY");
            entity.Property(e => e.ClientCode).HasColumnName("CLIENT_CODE");
            entity.Property(e => e.ClientCommmode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COMMMODE");
            entity.Property(e => e.ClientCountry)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COUNTRY");
            entity.Property(e => e.ClientDefaultDp)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DEFAULT_DP");
            entity.Property(e => e.ClientDivpaymode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DIVPAYMODE_");
            entity.Property(e => e.ClientEmail)
                .HasColumnType("text")
                .HasColumnName("CLIENT_EMAIL");
            entity.Property(e => e.ClientFatherHusbGuard)
                .HasColumnType("text")
                .HasColumnName("CLIENT_FATHER_HUSB_GUARD");
            entity.Property(e => e.ClientGuardianPan)
                .HasColumnType("text")
                .HasColumnName("CLIENT_GUARDIAN_PAN");
            entity.Property(e => e.ClientHolding)
                .HasColumnType("text")
                .HasColumnName("CLIENT_HOLDING");
            entity.Property(e => e.ClientMicrno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO1");
            entity.Property(e => e.ClientMicrno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO2");
            entity.Property(e => e.ClientMicrno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO3");
            entity.Property(e => e.ClientMicrno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO4");
            entity.Property(e => e.ClientMicrno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO5");
            entity.Property(e => e.ClientNeftifsccode1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE1");
            entity.Property(e => e.ClientNeftifsccode2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE2");
            entity.Property(e => e.ClientNeftifsccode3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE3");
            entity.Property(e => e.ClientNeftifsccode4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE4");
            entity.Property(e => e.ClientNeftifsccode5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE5");
            entity.Property(e => e.ClientNominee)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE");
            entity.Property(e => e.ClientNomineeRelation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE_RELATION");
            entity.Property(e => e.ClientNsdlcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLCLTID");
            entity.Property(e => e.ClientNsdldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLDPID");
            entity.Property(e => e.ClientOccupation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OCCUPATION");
            entity.Property(e => e.ClientOfficefax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEFAX");
            entity.Property(e => e.ClientOfficephone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEPHONE");
            entity.Property(e => e.ClientPincode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_PINCODE");
            entity.Property(e => e.ClientResifax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIFAX");
            entity.Property(e => e.ClientResiphone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIPHONE");
            entity.Property(e => e.ClientState)
                .HasColumnType("text")
                .HasColumnName("CLIENT_STATE");
            entity.Property(e => e.ClientTaxstatus)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TAXSTATUS");
            entity.Property(e => e.ClientType)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TYPE");
            entity.Property(e => e.CmForadd1)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD1");
            entity.Property(e => e.CmForadd2)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD2");
            entity.Property(e => e.CmForadd3)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD3");
            entity.Property(e => e.CmForcity)
                .HasColumnType("text")
                .HasColumnName("CM_FORCITY");
            entity.Property(e => e.CmForcountry)
                .HasColumnType("text")
                .HasColumnName("CM_FORCOUNTRY");
            entity.Property(e => e.CmForofffax)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFFAX");
            entity.Property(e => e.CmForoffphone)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFPHONE");
            entity.Property(e => e.CmForpincode)
                .HasColumnType("text")
                .HasColumnName("CM_FORPINCODE");
            entity.Property(e => e.CmForresifax)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIFAX");
            entity.Property(e => e.CmForresiphone)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIPHONE");
            entity.Property(e => e.CmForstate)
                .HasColumnType("text")
                .HasColumnName("CM_FORSTATE");
            entity.Property(e => e.CmMobile)
                .HasColumnType("text")
                .HasColumnName("CM_MOBILE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DefaultBankFlag)
                .HasColumnType("text")
                .HasColumnName("Default_bank_flag");
            entity.Property(e => e.FirstApllicantDob)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_DOB");
            entity.Property(e => e.FirstApllicantPan)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_PAN");
            entity.Property(e => e.FirstApplicantGender)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_GENDER");
            entity.Property(e => e.FirstApplicantName)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_NAME");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.MapinNo)
                .HasColumnType("text")
                .HasColumnName("MAPIN_NO");
            entity.Property(e => e.SecondApplicantName)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_NAME");
            entity.Property(e => e.SecondApplicantPan)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_PAN");
            entity.Property(e => e.ThirdApllicantName)
                .HasColumnType("text")
                .HasColumnName("THIRD_APLLICANT_NAME");
            entity.Property(e => e.ThirdApplicantPan)
                .HasColumnType("text")
                .HasColumnName("THIRD_APPLICANT_PAN");
        });

        modelBuilder.Entity<WsBseuccstarformatTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_bseuccstarformat_test");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BseUccCode)
                .HasColumnType("text")
                .HasColumnName("BSE_UCC_Code");
            entity.Property(e => e.ClientAccno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO1");
            entity.Property(e => e.ClientAccno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO2");
            entity.Property(e => e.ClientAccno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO3");
            entity.Property(e => e.ClientAccno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO4");
            entity.Property(e => e.ClientAccno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO5");
            entity.Property(e => e.ClientAcctype1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE1");
            entity.Property(e => e.ClientAcctype2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE2");
            entity.Property(e => e.ClientAcctype3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE3");
            entity.Property(e => e.ClientAcctype4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE4");
            entity.Property(e => e.ClientAcctype5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE5");
            entity.Property(e => e.ClientAdd1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD1");
            entity.Property(e => e.ClientAdd2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD2");
            entity.Property(e => e.ClientAdd3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD3");
            entity.Property(e => e.ClientCdslcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLCLTID");
            entity.Property(e => e.ClientCdsldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLDPID");
            entity.Property(e => e.ClientChequename5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CHEQUENAME5");
            entity.Property(e => e.ClientCity)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CITY");
            entity.Property(e => e.ClientCode).HasColumnName("CLIENT_CODE");
            entity.Property(e => e.ClientCommmode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COMMMODE");
            entity.Property(e => e.ClientCountry)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COUNTRY");
            entity.Property(e => e.ClientDefaultDp)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DEFAULT_DP");
            entity.Property(e => e.ClientDivpaymode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DIVPAYMODE_");
            entity.Property(e => e.ClientEmail)
                .HasColumnType("text")
                .HasColumnName("CLIENT_EMAIL");
            entity.Property(e => e.ClientFatherHusbGuard)
                .HasColumnType("text")
                .HasColumnName("CLIENT_FATHER_HUSB_GUARD");
            entity.Property(e => e.ClientGuardianPan)
                .HasColumnType("text")
                .HasColumnName("CLIENT_GUARDIAN_PAN");
            entity.Property(e => e.ClientHolding)
                .HasColumnType("text")
                .HasColumnName("CLIENT_HOLDING");
            entity.Property(e => e.ClientMicrno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO1");
            entity.Property(e => e.ClientMicrno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO2");
            entity.Property(e => e.ClientMicrno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO3");
            entity.Property(e => e.ClientMicrno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO4");
            entity.Property(e => e.ClientMicrno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO5");
            entity.Property(e => e.ClientNeftifsccode1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE1");
            entity.Property(e => e.ClientNeftifsccode2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE2");
            entity.Property(e => e.ClientNeftifsccode3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE3");
            entity.Property(e => e.ClientNeftifsccode4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE4");
            entity.Property(e => e.ClientNeftifsccode5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE5");
            entity.Property(e => e.ClientNominee)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE");
            entity.Property(e => e.ClientNomineeRelation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE_RELATION");
            entity.Property(e => e.ClientNsdlcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLCLTID");
            entity.Property(e => e.ClientNsdldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLDPID");
            entity.Property(e => e.ClientOccupation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OCCUPATION");
            entity.Property(e => e.ClientOfficefax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEFAX");
            entity.Property(e => e.ClientOfficephone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEPHONE");
            entity.Property(e => e.ClientPincode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_PINCODE");
            entity.Property(e => e.ClientResifax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIFAX");
            entity.Property(e => e.ClientResiphone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIPHONE");
            entity.Property(e => e.ClientState)
                .HasColumnType("text")
                .HasColumnName("CLIENT_STATE");
            entity.Property(e => e.ClientTaxstatus)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TAXSTATUS");
            entity.Property(e => e.ClientType)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TYPE");
            entity.Property(e => e.CmForadd1)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD1");
            entity.Property(e => e.CmForadd2)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD2");
            entity.Property(e => e.CmForadd3)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD3");
            entity.Property(e => e.CmForcity)
                .HasColumnType("text")
                .HasColumnName("CM_FORCITY");
            entity.Property(e => e.CmForcountry)
                .HasColumnType("text")
                .HasColumnName("CM_FORCOUNTRY");
            entity.Property(e => e.CmForofffax)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFFAX");
            entity.Property(e => e.CmForoffphone)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFPHONE");
            entity.Property(e => e.CmForpincode)
                .HasColumnType("text")
                .HasColumnName("CM_FORPINCODE");
            entity.Property(e => e.CmForresifax)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIFAX");
            entity.Property(e => e.CmForresiphone)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIPHONE");
            entity.Property(e => e.CmForstate)
                .HasColumnType("text")
                .HasColumnName("CM_FORSTATE");
            entity.Property(e => e.CmMobile)
                .HasColumnType("text")
                .HasColumnName("CM_MOBILE");
            entity.Property(e => e.DefaultBankFlag)
                .HasColumnType("text")
                .HasColumnName("Default_bank_flag");
            entity.Property(e => e.FirstApllicantDob)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_DOB");
            entity.Property(e => e.FirstApllicantPan)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_PAN");
            entity.Property(e => e.FirstApplicantGender)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_GENDER");
            entity.Property(e => e.FirstApplicantName)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_NAME");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.MapinNo)
                .HasColumnType("text")
                .HasColumnName("MAPIN_NO");
            entity.Property(e => e.SecondApplicantName)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_NAME");
            entity.Property(e => e.SecondApplicantPan)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_PAN");
            entity.Property(e => e.ThirdApllicantName)
                .HasColumnType("text")
                .HasColumnName("THIRD_APLLICANT_NAME");
            entity.Property(e => e.ThirdApplicantPan)
                .HasColumnType("text")
                .HasColumnName("THIRD_APPLICANT_PAN");
        });

        modelBuilder.Entity<WsClientasset>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_clientasset");

            entity.Property(e => e.Aaccruedint).HasColumnName("AACCRUEDINT");
            entity.Property(e => e.Advisorid).HasColumnName("ADVISORID");
            entity.Property(e => e.Advisorname)
                .HasColumnType("text")
                .HasColumnName("ADVISORNAME");
            entity.Property(e => e.Arn)
                .HasColumnType("text")
                .HasColumnName("ARN");
            entity.Property(e => e.Arnid).HasColumnName("ARNID");
            entity.Property(e => e.Astcls)
                .HasColumnType("text")
                .HasColumnName("ASTCLS");
            entity.Property(e => e.Astclsname)
                .HasColumnType("text")
                .HasColumnName("ASTCLSNAME");
            entity.Property(e => e.Branchid).HasColumnName("BRANCHID");
            entity.Property(e => e.Branchname)
                .HasColumnType("text")
                .HasColumnName("BRANCHNAME");
            entity.Property(e => e.Classify).HasColumnType("text");
            entity.Property(e => e.ClientName)
                .HasColumnType("text")
                .HasColumnName("Client_name");
            entity.Property(e => e.Cost).HasColumnName("COST");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DepositoryCodeRegistrar)
                .HasColumnType("text")
                .HasColumnName("Depository_code_Registrar");
            entity.Property(e => e.Detailtype)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPE");
            entity.Property(e => e.Detailtypename)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPENAME");
            entity.Property(e => e.DpClientIdFolio)
                .HasColumnType("text")
                .HasColumnName("DP_Client_id__Folio");
            entity.Property(e => e.DpIdAmc)
                .HasColumnType("text")
                .HasColumnName("DP_id__AMC");
            entity.Property(e => e.FundName)
                .HasColumnType("text")
                .HasColumnName("Fund_Name");
            entity.Property(e => e.Groupid).HasColumnName("GROUPID");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.HoldingQty).HasColumnName("Holding_Qty");
            entity.Property(e => e.Holdingdate)
                .HasColumnType("text")
                .HasColumnName("HOLDINGDATE");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.IssuerName)
                .HasColumnType("text")
                .HasColumnName("Issuer_Name");
            entity.Property(e => e.LastPriceDate)
                .HasColumnType("text")
                .HasColumnName("Last_Price_Date");
            entity.Property(e => e.Mktprice).HasColumnName("MKTPRICE");
            entity.Property(e => e.Mktvalue).HasColumnName("MKTVALUE");
            entity.Property(e => e.Ownerid).HasColumnName("OWNERID");
            entity.Property(e => e.Ownername)
                .HasColumnType("text")
                .HasColumnName("OWNERNAME");
            entity.Property(e => e.Rmid).HasColumnName("RMID");
            entity.Property(e => e.Rmname)
                .HasColumnType("text")
                .HasColumnName("RMNAME");
            entity.Property(e => e.Schemeid).HasColumnName("SCHEMEID");
            entity.Property(e => e.Schemename)
                .HasColumnType("text")
                .HasColumnName("SCHEMENAME");
            entity.Property(e => e.SecurityCode)
                .HasColumnType("text")
                .HasColumnName("Security_Code");
            entity.Property(e => e.SecurityName)
                .HasColumnType("text")
                .HasColumnName("Security_Name");
            entity.Property(e => e.SecurityType)
                .HasColumnType("text")
                .HasColumnName("Security_Type");
            entity.Property(e => e.SecurityTypeDescription)
                .HasColumnType("text")
                .HasColumnName("Security_Type_Description");
            entity.Property(e => e.Trfcost).HasColumnName("TRFCOST");
            entity.Property(e => e.UnitTrfcost).HasColumnName("UNIT_TRFCOST");
            entity.Property(e => e.Unitcost).HasColumnName("UNITCOST");
            entity.Property(e => e.WealthAdvisorName)
                .HasColumnType("text")
                .HasColumnName("WealthAdvisor_Name");
            entity.Property(e => e.WsAccountCode)
                .HasColumnType("text")
                .HasColumnName("WS_Account_Code");
            entity.Property(e => e.WsClientId).HasColumnName("WS_client_id");
        });

        modelBuilder.Entity<WsClientbankermappingdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_clientbankermappingdata");

            entity.Property(e => e.BankerCode)
                .HasColumnType("text")
                .HasColumnName("banker_code");
            entity.Property(e => e.EmailId)
                .HasColumnType("text")
                .HasColumnName("email_id");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.MobileNo)
                .HasColumnType("text")
                .HasColumnName("mobile_no");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("pan");
            entity.Property(e => e.WswAccountCode)
                .HasColumnType("text")
                .HasColumnName("wsw_account_code");
        });

        modelBuilder.Entity<WsClientkradetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_clientkradetails");

            entity.Property(e => e.Aadhar).HasMaxLength(12);
            entity.Property(e => e.AccountStatus).HasMaxLength(20);
            entity.Property(e => e.AccountType).HasMaxLength(100);
            entity.Property(e => e.Add1).HasMaxLength(100);
            entity.Property(e => e.Add2).HasMaxLength(100);
            entity.Property(e => e.Add3).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(20);
            entity.Property(e => e.ClientCode).HasMaxLength(30);
            entity.Property(e => e.ClientId).HasMaxLength(30);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.Fullname).HasMaxLength(300);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.GroupId).HasMaxLength(30);
            entity.Property(e => e.IsInternal).HasDefaultValueSql("'0'");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.MiddleName).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(30);
            entity.Property(e => e.Pan).HasMaxLength(20);
            entity.Property(e => e.Pin).HasMaxLength(10);
            entity.Property(e => e.RmName).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(20);
            entity.Property(e => e.Ucccode)
                .HasMaxLength(30)
                .HasColumnName("UCCCode");
        });

        modelBuilder.Entity<WsClientmasterdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_clientmasterdata");

            entity.Property(e => e.AccountClosingReason)
                .HasColumnType("text")
                .HasColumnName("Account_Closing_Reason");
            entity.Property(e => e.AccountOpenDate)
                .HasColumnType("text")
                .HasColumnName("Account_Open_Date");
            entity.Property(e => e.AccountingTxn).HasColumnType("text");
            entity.Property(e => e.AccounttClosureDate)
                .HasColumnType("text")
                .HasColumnName("Accountt_Closure_Date");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Address1)
                .HasColumnType("text")
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasColumnType("text")
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Advisorid).HasColumnName("ADVISORID");
            entity.Property(e => e.Advisorname)
                .HasColumnType("text")
                .HasColumnName("ADVISORNAME");
            entity.Property(e => e.ArnName)
                .HasColumnType("text")
                .HasColumnName("ARN_Name");
            entity.Property(e => e.Arnid).HasColumnName("ARNID");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE");
            entity.Property(e => e.Branchid).HasColumnName("BRANCHID");
            entity.Property(e => e.Branchname)
                .HasColumnType("text")
                .HasColumnName("BRANCHNAME");
            entity.Property(e => e.Brokeraccountid)
                .HasColumnType("text")
                .HasColumnName("BROKERACCOUNTID");
            entity.Property(e => e.CapitalCommitted).HasColumnName("CAPITAL_COMMITTED");
            entity.Property(e => e.Chargeupto)
                .HasColumnType("text")
                .HasColumnName("CHARGEUPTO");
            entity.Property(e => e.Circle)
                .HasColumnType("text")
                .HasColumnName("CIRCLE");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.ClientBankAccount)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Account");
            entity.Property(e => e.ClientBankCode)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Code");
            entity.Property(e => e.ClientCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_AccountId");
            entity.Property(e => e.ClientCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Code");
            entity.Property(e => e.ClientCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_DP");
            entity.Property(e => e.ClientCustodySchemeCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Scheme_Code");
            entity.Property(e => e.Clientcategory)
                .HasColumnType("text")
                .HasColumnName("CLIENTCATEGORY");
            entity.Property(e => e.Clientcode)
                .HasColumnType("text")
                .HasColumnName("CLIENTCODE");
            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Clientname)
                .HasColumnType("text")
                .HasColumnName("CLIENTNAME");
            entity.Property(e => e.Clienttype)
                .HasColumnType("text")
                .HasColumnName("CLIENTTYPE");
            entity.Property(e => e.Contactname)
                .HasColumnType("text")
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Dailyexpenseaccrual)
                .HasColumnType("text")
                .HasColumnName("DAILYEXPENSEACCRUAL");
            entity.Property(e => e.Dir1mapin)
                .HasColumnType("text")
                .HasColumnName("DIR1MAPIN");
            entity.Property(e => e.Dir1name)
                .HasColumnType("text")
                .HasColumnName("DIR1NAME");
            entity.Property(e => e.Dir2mapin)
                .HasColumnType("text")
                .HasColumnName("DIR2MAPIN");
            entity.Property(e => e.Dir2name)
                .HasColumnType("text")
                .HasColumnName("DIR2NAME");
            entity.Property(e => e.Dir3mapin)
                .HasColumnType("text")
                .HasColumnName("DIR3MAPIN");
            entity.Property(e => e.Dir3name)
                .HasColumnType("text")
                .HasColumnName("DIR3NAME");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.FatherHusband)
                .HasColumnType("text")
                .HasColumnName("FATHER_HUSBAND");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Feepaymentmode)
                .HasColumnType("text")
                .HasColumnName("FEEPAYMENTMODE");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firmname)
                .HasColumnType("text")
                .HasColumnName("FIRMNAME");
            entity.Property(e => e.FirstHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("First_Holder_AADHAR");
            entity.Property(e => e.FirstHolderFatca)
                .HasColumnType("text")
                .HasColumnName("First_Holder_FATCA");
            entity.Property(e => e.FirstHolderGender)
                .HasColumnType("text")
                .HasColumnName("First_Holder_Gender");
            entity.Property(e => e.FirstHolderKyc)
                .HasColumnType("text")
                .HasColumnName("First_Holder_KYC");
            entity.Property(e => e.FirstHolderUbo)
                .HasColumnType("text")
                .HasColumnName("First_Holder_UBO");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fundmgrid).HasColumnName("FUNDMGRID");
            entity.Property(e => e.Fundmgrname)
                .HasColumnType("text")
                .HasColumnName("FUNDMGRNAME");
            entity.Property(e => e.Groupid).HasColumnName("GROUPID");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.HeadOfFamily)
                .HasColumnType("text")
                .HasColumnName("Head_of_Family");
            entity.Property(e => e.Incentive)
                .HasColumnType("text")
                .HasColumnName("INCENTIVE");
            entity.Property(e => e.IncentiveRate)
                .HasColumnType("text")
                .HasColumnName("Incentive_Rate");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediaryid).HasColumnName("INTERMEDIARYID");
            entity.Property(e => e.Intermediaryname)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARYNAME");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Joint1FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT1_FATHER_HUSBAND");
            entity.Property(e => e.Joint1Name)
                .HasColumnType("text")
                .HasColumnName("JOINT1_NAME");
            entity.Property(e => e.Joint1Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT1_PAN");
            entity.Property(e => e.Joint2FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT2_FATHER_HUSBAND");
            entity.Property(e => e.Joint2Name)
                .HasColumnType("text")
                .HasColumnName("JOINT2_NAME");
            entity.Property(e => e.Joint2Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT2_PAN");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.MailAddress1)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS1");
            entity.Property(e => e.MailAddress2)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS2");
            entity.Property(e => e.MailCity)
                .HasColumnType("text")
                .HasColumnName("MAIL_CITY");
            entity.Property(e => e.MailEmailid)
                .HasColumnType("text")
                .HasColumnName("MAIL_EMAILID");
            entity.Property(e => e.MailFax)
                .HasColumnType("text")
                .HasColumnName("MAIL_FAX");
            entity.Property(e => e.MailMobile)
                .HasColumnType("text")
                .HasColumnName("MAIL_MOBILE");
            entity.Property(e => e.MailPhonehome)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEHOME");
            entity.Property(e => e.MailPhonework)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEWORK");
            entity.Property(e => e.MailPincode)
                .HasColumnType("text")
                .HasColumnName("MAIL_PINCODE");
            entity.Property(e => e.MailState)
                .HasColumnType("text")
                .HasColumnName("MAIL_STATE");
            entity.Property(e => e.Mandatebankaccountno)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTNO");
            entity.Property(e => e.Mandatebankaccounttype)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTTYPE");
            entity.Property(e => e.Mandatebankbranchname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKBRANCHNAME");
            entity.Property(e => e.Mandatebankname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKNAME");
            entity.Property(e => e.Mandatedepository)
                .HasColumnType("text")
                .HasColumnName("MANDATEDEPOSITORY");
            entity.Property(e => e.Mandatedp)
                .HasColumnType("text")
                .HasColumnName("MANDATEDP");
            entity.Property(e => e.Mandatedpclientid)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPCLIENTID");
            entity.Property(e => e.Mandatedpname)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPNAME");
            entity.Property(e => e.Mandatemicr)
                .HasColumnType("text")
                .HasColumnName("MANDATEMICR");
            entity.Property(e => e.Mandateneft)
                .HasColumnType("text")
                .HasColumnName("MANDATENEFT");
            entity.Property(e => e.Mandatertgs)
                .HasColumnType("text")
                .HasColumnName("MANDATERTGS");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.ModeOfHolding)
                .HasColumnType("text")
                .HasColumnName("Mode_of_Holding");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Ownerid).HasColumnName("OWNERID");
            entity.Property(e => e.Ownername)
                .HasColumnType("text")
                .HasColumnName("OWNERNAME");
            entity.Property(e => e.Pannumber)
                .HasColumnType("text")
                .HasColumnName("PANNUMBER");
            entity.Property(e => e.Performancereportingdate)
                .HasColumnType("text")
                .HasColumnName("PERFORMANCEREPORTINGDATE");
            entity.Property(e => e.Phonehome)
                .HasColumnType("text")
                .HasColumnName("PHONEHOME");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relmgrid).HasColumnName("RELMGRID");
            entity.Property(e => e.Rmname)
                .HasColumnType("text")
                .HasColumnName("RMNAME");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Schemeid).HasColumnName("SCHEMEID");
            entity.Property(e => e.Schemename)
                .HasColumnType("text")
                .HasColumnName("SCHEMENAME");
            entity.Property(e => e.SecondHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_AADHAR");
            entity.Property(e => e.SecondHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_AccType");
            entity.Property(e => e.SecondHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Account_No");
            entity.Property(e => e.SecondHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Name");
            entity.Property(e => e.SecondHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Branch_Name");
            entity.Property(e => e.SecondHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Depository");
            entity.Property(e => e.SecondHolderDob)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DOB");
            entity.Property(e => e.SecondHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Client_Id");
            entity.Property(e => e.SecondHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Id");
            entity.Property(e => e.SecondHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Name");
            entity.Property(e => e.SecondHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_FATCA");
            entity.Property(e => e.SecondHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Father_Husband");
            entity.Property(e => e.SecondHolderGender)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Gender");
            entity.Property(e => e.SecondHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_KYC");
            entity.Property(e => e.SecondHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Micr_Number");
            entity.Property(e => e.SecondHolderName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Name");
            entity.Property(e => e.SecondHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_NEFT_Code");
            entity.Property(e => e.SecondHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Occupation");
            entity.Property(e => e.SecondHolderPan)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Pan");
            entity.Property(e => e.SecondHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Relation");
            entity.Property(e => e.SecondHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_RTGS_Code");
            entity.Property(e => e.SecondHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Status");
            entity.Property(e => e.SecondHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_UBO");
            entity.Property(e => e.Sharereportsflag)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTSFLAG");
            entity.Property(e => e.SkipFromMfCorporateAction)
                .HasColumnType("text")
                .HasColumnName("Skip_from_MF_corporate_action");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.StttakenAs)
                .HasColumnType("text")
                .HasColumnName("STTTaken_As");
            entity.Property(e => e.Tannumber)
                .HasColumnType("text")
                .HasColumnName("TANNUMBER");
            entity.Property(e => e.Tdsonfees)
                .HasColumnType("text")
                .HasColumnName("TDSONFEES");
            entity.Property(e => e.ThirdHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_AADHAR");
            entity.Property(e => e.ThirdHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_AccType");
            entity.Property(e => e.ThirdHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Account_No");
            entity.Property(e => e.ThirdHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Name");
            entity.Property(e => e.ThirdHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Branch_Name");
            entity.Property(e => e.ThirdHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Depository");
            entity.Property(e => e.ThirdHolderDob)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DOB");
            entity.Property(e => e.ThirdHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Client_Id");
            entity.Property(e => e.ThirdHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Id");
            entity.Property(e => e.ThirdHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Name");
            entity.Property(e => e.ThirdHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_FATCA");
            entity.Property(e => e.ThirdHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Father_Husband");
            entity.Property(e => e.ThirdHolderGender)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Gender");
            entity.Property(e => e.ThirdHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_KYC");
            entity.Property(e => e.ThirdHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Micr_Number_");
            entity.Property(e => e.ThirdHolderName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Name");
            entity.Property(e => e.ThirdHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_NEFT_Code");
            entity.Property(e => e.ThirdHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Occupation");
            entity.Property(e => e.ThirdHolderPanNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Pan_No");
            entity.Property(e => e.ThirdHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Relation");
            entity.Property(e => e.ThirdHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_RTGS_Code");
            entity.Property(e => e.ThirdHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Status");
            entity.Property(e => e.ThirdHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_UBO");
            entity.Property(e => e.TradingBankAccount)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Account");
            entity.Property(e => e.TradingBankCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Code");
            entity.Property(e => e.TradingCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_AccountId");
            entity.Property(e => e.TradingCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_Code");
            entity.Property(e => e.TradingCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_DP");
            entity.Property(e => e.TrxnTakenAs)
                .HasColumnType("text")
                .HasColumnName("TrxnTaken_As");
            entity.Property(e => e.Username)
                .HasColumnType("text")
                .HasColumnName("USERNAME");
            entity.Property(e => e.Ward)
                .HasColumnType("text")
                .HasColumnName("WARD");
            entity.Property(e => e.WealthAdvisorName)
                .HasColumnType("text")
                .HasColumnName("WealthAdvisor_Name");
        });

        modelBuilder.Entity<WsClientmasteruploaddatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_clientmasteruploaddata");

            entity.Property(e => e.Accountcode)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTCODE");
            entity.Property(e => e.Accountingtxn)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTINGTXN");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Add1)
                .HasColumnType("text")
                .HasColumnName("ADD1");
            entity.Property(e => e.Add2)
                .HasColumnType("text")
                .HasColumnName("ADD2");
            entity.Property(e => e.Advisor)
                .HasColumnType("text")
                .HasColumnName("ADVISOR");
            entity.Property(e => e.Advisorrights)
                .HasColumnType("text")
                .HasColumnName("ADVISORRIGHTS");
            entity.Property(e => e.Arnno)
                .HasColumnType("text")
                .HasColumnName("ARNNO");
            entity.Property(e => e.Automail)
                .HasColumnType("text")
                .HasColumnName("AUTOMAIL");
            entity.Property(e => e.Bankacid)
                .HasColumnType("text")
                .HasColumnName("BANKACID");
            entity.Property(e => e.Bankacid1)
                .HasColumnType("text")
                .HasColumnName("BANKACID1");
            entity.Property(e => e.Bankacid2)
                .HasColumnType("text")
                .HasColumnName("BANKACID2");
            entity.Property(e => e.Bankacid3)
                .HasColumnType("text")
                .HasColumnName("BANKACID3");
            entity.Property(e => e.Bankactype)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankactype1)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE1");
            entity.Property(e => e.Bankactype2)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE2");
            entity.Property(e => e.Bankactype3)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE3");
            entity.Property(e => e.Bankbranch1)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH1");
            entity.Property(e => e.Bankbranch2)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH2");
            entity.Property(e => e.Bankbranch3)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH3");
            entity.Property(e => e.Bankbranchname)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCHNAME");
            entity.Property(e => e.Bankcode)
                .HasColumnType("text")
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankcode2)
                .HasColumnType("text")
                .HasColumnName("BANKCODE2");
            entity.Property(e => e.Bankname)
                .HasColumnType("text")
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bankname1)
                .HasColumnType("text")
                .HasColumnName("BANKNAME1");
            entity.Property(e => e.Bankname2)
                .HasColumnType("text")
                .HasColumnName("BANKNAME2");
            entity.Property(e => e.Bankname3)
                .HasColumnType("text")
                .HasColumnName("BANKNAME3");
            entity.Property(e => e.Basefundid).HasColumnName("BASEFUNDID");
            entity.Property(e => e.Basenav)
                .HasColumnType("text")
                .HasColumnName("BASENAV");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate1)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE1");
            entity.Property(e => e.Birthdate2)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE2");
            entity.Property(e => e.Birthdate3)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE3");
            entity.Property(e => e.BondDeb)
                .HasColumnType("text")
                .HasColumnName("BOND_DEB");
            entity.Property(e => e.Branch)
                .HasColumnType("text")
                .HasColumnName("BRANCH");
            entity.Property(e => e.Capitalcommited).HasColumnName("CAPITALCOMMITED");
            entity.Property(e => e.Categorycode)
                .HasColumnType("text")
                .HasColumnName("CATEGORYCODE");
            entity.Property(e => e.Circle1)
                .HasColumnType("text")
                .HasColumnName("CIRCLE1");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.Clientid)
                .HasColumnType("text")
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientrights)
                .HasColumnType("text")
                .HasColumnName("CLIENTRIGHTS");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Depcode)
                .HasColumnType("text")
                .HasColumnName("DEPCODE");
            entity.Property(e => e.Depid)
                .HasColumnType("text")
                .HasColumnName("DEPID");
            entity.Property(e => e.Dp1)
                .HasColumnType("text")
                .HasColumnName("DP1");
            entity.Property(e => e.Dp2)
                .HasColumnType("text")
                .HasColumnName("DP2");
            entity.Property(e => e.Dp3)
                .HasColumnType("text")
                .HasColumnName("DP3");
            entity.Property(e => e.Dpclientid)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpclientid1)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID1");
            entity.Property(e => e.Dpclientid2)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID2");
            entity.Property(e => e.Dpclientid3)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID3");
            entity.Property(e => e.Dpid1)
                .HasColumnType("text")
                .HasColumnName("DPID1");
            entity.Property(e => e.Dpid2)
                .HasColumnType("text")
                .HasColumnName("DPID2");
            entity.Property(e => e.Dpid3)
                .HasColumnType("text")
                .HasColumnName("DPID3");
            entity.Property(e => e.Dpname2)
                .HasColumnType("text")
                .HasColumnName("DPNAME2");
            entity.Property(e => e.Dpname3)
                .HasColumnType("text")
                .HasColumnName("DPNAME3");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.EquityDeb)
                .HasColumnType("text")
                .HasColumnName("EQUITY_DEB");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Fh1)
                .HasColumnType("text")
                .HasColumnName("FH1");
            entity.Property(e => e.Fh2)
                .HasColumnType("text")
                .HasColumnName("FH2");
            entity.Property(e => e.Fh3)
                .HasColumnType("text")
                .HasColumnName("FH3");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fmrights)
                .HasColumnType("text")
                .HasColumnName("FMRIGHTS");
            entity.Property(e => e.Fundlevel).HasColumnName("FUNDLEVEL");
            entity.Property(e => e.Futures)
                .HasColumnType("text")
                .HasColumnName("FUTURES");
            entity.Property(e => e.Gender)
                .HasColumnType("text")
                .HasColumnName("GENDER");
            entity.Property(e => e.Gender2)
                .HasColumnType("text")
                .HasColumnName("GENDER2");
            entity.Property(e => e.Gender3)
                .HasColumnType("text")
                .HasColumnName("GENDER3");
            entity.Property(e => e.Groupcode)
                .HasColumnType("text")
                .HasColumnName("GROUPCODE");
            entity.Property(e => e.Groupcontact)
                .HasColumnType("text")
                .HasColumnName("GROUPCONTACT");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardian)
                .HasColumnType("text")
                .HasColumnName("GUARDIAN");
            entity.Property(e => e.Guardianadd1)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD1");
            entity.Property(e => e.Guardianadd2)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD2");
            entity.Property(e => e.Guardiancity)
                .HasColumnType("text")
                .HasColumnName("GUARDIANCITY");
            entity.Property(e => e.Guardianfax)
                .HasColumnType("text")
                .HasColumnName("GUARDIANFAX");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.Guardianphone)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPHONE");
            entity.Property(e => e.Guardianpin)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPIN");
            entity.Property(e => e.Guardianstate)
                .HasColumnType("text")
                .HasColumnName("GUARDIANSTATE");
            entity.Property(e => e.H1aadhar)
                .HasColumnType("text")
                .HasColumnName("H1AADHAR");
            entity.Property(e => e.H1ckyc)
                .HasColumnType("text")
                .HasColumnName("H1CKYC");
            entity.Property(e => e.H1fatca)
                .HasColumnType("text")
                .HasColumnName("H1FATCA");
            entity.Property(e => e.H1modeofholding)
                .HasColumnType("text")
                .HasColumnName("H1MODEOFHOLDING");
            entity.Property(e => e.H1ubo)
                .HasColumnType("text")
                .HasColumnName("H1UBO");
            entity.Property(e => e.H2aadhar)
                .HasColumnType("text")
                .HasColumnName("H2AADHAR");
            entity.Property(e => e.H2ckyc)
                .HasColumnType("text")
                .HasColumnName("H2CKYC");
            entity.Property(e => e.H2fatca)
                .HasColumnType("text")
                .HasColumnName("H2FATCA");
            entity.Property(e => e.H2ubo)
                .HasColumnType("text")
                .HasColumnName("H2UBO");
            entity.Property(e => e.H3aadhar)
                .HasColumnType("text")
                .HasColumnName("H3AADHAR");
            entity.Property(e => e.H3ckyc)
                .HasColumnType("text")
                .HasColumnName("H3CKYC");
            entity.Property(e => e.H3fatca)
                .HasColumnType("text")
                .HasColumnName("H3FATCA");
            entity.Property(e => e.H3ubo)
                .HasColumnType("text")
                .HasColumnName("H3UBO");
            entity.Property(e => e.Hofflag)
                .HasColumnType("text")
                .HasColumnName("HOFFLAG");
            entity.Property(e => e.Hofrestricted)
                .HasColumnType("text")
                .HasColumnName("HOFRESTRICTED");
            entity.Property(e => e.Inccatg)
                .HasColumnType("text")
                .HasColumnName("INCCATG");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediary)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARY");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Mailh1add1)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD1");
            entity.Property(e => e.Mailh1add2)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD2");
            entity.Property(e => e.Mailh1city)
                .HasColumnType("text")
                .HasColumnName("MAILH1CITY");
            entity.Property(e => e.Mailh1emailid)
                .HasColumnType("text")
                .HasColumnName("MAILH1EMAILID");
            entity.Property(e => e.Mailh1fax)
                .HasColumnType("text")
                .HasColumnName("MAILH1FAX");
            entity.Property(e => e.Mailh1mobile)
                .HasColumnType("text")
                .HasColumnName("MAILH1MOBILE");
            entity.Property(e => e.Mailh1phone)
                .HasColumnType("text")
                .HasColumnName("MAILH1PHONE");
            entity.Property(e => e.Mailh1pin)
                .HasColumnType("text")
                .HasColumnName("MAILH1PIN");
            entity.Property(e => e.Mailh1state)
                .HasColumnType("text")
                .HasColumnName("MAILH1STATE");
            entity.Property(e => e.Mailphonework)
                .HasColumnType("text")
                .HasColumnName("MAILPHONEWORK");
            entity.Property(e => e.Mapinid)
                .HasColumnType("text")
                .HasColumnName("MAPINID");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Maxcharge).HasColumnName("MAXCHARGE");
            entity.Property(e => e.Mf)
                .HasColumnType("text")
                .HasColumnName("MF");
            entity.Property(e => e.Micr1)
                .HasColumnType("text")
                .HasColumnName("MICR1");
            entity.Property(e => e.Micr2)
                .HasColumnType("text")
                .HasColumnName("MICR2");
            entity.Property(e => e.Micr3)
                .HasColumnType("text")
                .HasColumnName("MICR3");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.Modelportfolio)
                .HasColumnType("text")
                .HasColumnName("MODELPORTFOLIO");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("NAME2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("NAME3");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Neft1)
                .HasColumnType("text")
                .HasColumnName("NEFT1");
            entity.Property(e => e.Neft2)
                .HasColumnType("text")
                .HasColumnName("NEFT2");
            entity.Property(e => e.Neft3)
                .HasColumnType("text")
                .HasColumnName("NEFT3");
            entity.Property(e => e.Ngaadhar)
                .HasColumnType("text")
                .HasColumnName("NGAADHAR");
            entity.Property(e => e.Ngckyc)
                .HasColumnType("text")
                .HasColumnName("NGCKYC");
            entity.Property(e => e.Ngdob)
                .HasColumnType("text")
                .HasColumnName("NGDOB");
            entity.Property(e => e.Ngfatca)
                .HasColumnType("text")
                .HasColumnName("NGFATCA");
            entity.Property(e => e.Ngpan)
                .HasColumnType("text")
                .HasColumnName("NGPAN");
            entity.Property(e => e.Ngubo)
                .HasColumnType("text")
                .HasColumnName("NGUBO");
            entity.Property(e => e.Nomdob)
                .HasColumnType("text")
                .HasColumnName("NOMDOB");
            entity.Property(e => e.Nomineeadd1)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD1");
            entity.Property(e => e.Nomineeadd2)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD2");
            entity.Property(e => e.Nomineecity)
                .HasColumnType("text")
                .HasColumnName("NOMINEECITY");
            entity.Property(e => e.Nomineefax)
                .HasColumnType("text")
                .HasColumnName("NOMINEEFAX");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Nomineephone)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPHONE");
            entity.Property(e => e.Nomineepin)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPIN");
            entity.Property(e => e.Nomineerelation)
                .HasColumnType("text")
                .HasColumnName("NOMINEERELATION");
            entity.Property(e => e.Nomineestate)
                .HasColumnType("text")
                .HasColumnName("NOMINEESTATE");
            entity.Property(e => e.Nompan)
                .HasColumnType("text")
                .HasColumnName("NOMPAN");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Onlylowestclassify)
                .HasColumnType("text")
                .HasColumnName("ONLYLOWESTCLASSIFY");
            entity.Property(e => e.Operationtype)
                .HasColumnType("text")
                .HasColumnName("OPERATIONTYPE");
            entity.Property(e => e.Options)
                .HasColumnType("text")
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OtherAssets)
                .HasColumnType("text")
                .HasColumnName("OTHER_ASSETS");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("PAN");
            entity.Property(e => e.Pan2)
                .HasColumnType("text")
                .HasColumnName("PAN2");
            entity.Property(e => e.Pan3)
                .HasColumnType("text")
                .HasColumnName("PAN3");
            entity.Property(e => e.Parentfundid).HasColumnName("PARENTFUNDID");
            entity.Property(e => e.Perfclassifydaily)
                .HasColumnType("text")
                .HasColumnName("PERFCLASSIFYDAILY");
            entity.Property(e => e.Perfreportdate)
                .HasColumnType("text")
                .HasColumnName("PERFREPORTDATE");
            entity.Property(e => e.Phone)
                .HasColumnType("text")
                .HasColumnName("PHONE");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Planallowed)
                .HasColumnType("text")
                .HasColumnName("PLANALLOWED");
            entity.Property(e => e.Poolmapin)
                .HasColumnType("text")
                .HasColumnName("POOLMAPIN");
            entity.Property(e => e.Recoproduct)
                .HasColumnType("text")
                .HasColumnName("RECOPRODUCT");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relation2)
                .HasColumnType("text")
                .HasColumnName("RELATION2");
            entity.Property(e => e.Relation3)
                .HasColumnType("text")
                .HasColumnName("RELATION3");
            entity.Property(e => e.Relmapping1)
                .HasColumnType("text")
                .HasColumnName("RELMAPPING1");
            entity.Property(e => e.Relmgr)
                .HasColumnType("text")
                .HasColumnName("RELMGR");
            entity.Property(e => e.Riskprofilename)
                .HasColumnType("text")
                .HasColumnName("RISKPROFILENAME");
            entity.Property(e => e.Rmrights)
                .HasColumnType("text")
                .HasColumnName("RMRIGHTS");
            entity.Property(e => e.Rtgs1)
                .HasColumnType("text")
                .HasColumnName("RTGS1");
            entity.Property(e => e.Rtgs2)
                .HasColumnType("text")
                .HasColumnName("RTGS2");
            entity.Property(e => e.Rtgs3)
                .HasColumnType("text")
                .HasColumnName("RTGS3");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Scheme)
                .HasColumnType("text")
                .HasColumnName("SCHEME");
            entity.Property(e => e.Sharereports)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTS");
            entity.Property(e => e.Shares)
                .HasColumnType("text")
                .HasColumnName("SHARES");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stttakenas)
                .HasColumnType("text")
                .HasColumnName("STTTAKENAS");
            entity.Property(e => e.Tan1)
                .HasColumnType("text")
                .HasColumnName("TAN1");
            entity.Property(e => e.Taxable)
                .HasColumnType("text")
                .HasColumnName("TAXABLE");
            entity.Property(e => e.Txnfeetakenas)
                .HasColumnType("text")
                .HasColumnName("TXNFEETAKENAS");
            entity.Property(e => e.UserName)
                .HasColumnType("text")
                .HasColumnName("USER_NAME");
            entity.Property(e => e.Ward1)
                .HasColumnType("text")
                .HasColumnName("WARD1");
            entity.Property(e => e.Wealthadvisorname)
                .HasColumnType("text")
                .HasColumnName("WEALTHADVISORNAME");
        });

        modelBuilder.Entity<WsClientrmcsomapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_clientrmcsomapping");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Acctype)
                .HasMaxLength(255)
                .HasColumnName("ACCType");
            entity.Property(e => e.BankerEmail).HasMaxLength(255);
            entity.Property(e => e.BankerEmpId).HasMaxLength(255);
            entity.Property(e => e.BankerName).HasMaxLength(255);
            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Csoemail)
                .HasMaxLength(255)
                .HasColumnName("CSOEmail");
            entity.Property(e => e.CsoempId).HasColumnName("CSOEmpId");
            entity.Property(e => e.Csomobile).HasColumnName("CSOMobile");
            entity.Property(e => e.Csoname)
                .HasMaxLength(255)
                .HasColumnName("CSOName");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Mapinid)
                .HasMaxLength(255)
                .HasColumnName("MAPINId");
            entity.Property(e => e.Pannumber)
                .HasMaxLength(255)
                .HasColumnName("PANNUMBER");
        });

        modelBuilder.Entity<WsClientuploadDatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_clientuploadData");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accountcode)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTCODE");
            entity.Property(e => e.Accountingtxn)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTINGTXN");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Add1)
                .HasColumnType("text")
                .HasColumnName("ADD1");
            entity.Property(e => e.Add2)
                .HasColumnType("text")
                .HasColumnName("ADD2");
            entity.Property(e => e.Advisor)
                .HasColumnType("text")
                .HasColumnName("ADVISOR");
            entity.Property(e => e.Advisorrights)
                .HasColumnType("text")
                .HasColumnName("ADVISORRIGHTS");
            entity.Property(e => e.Arnno)
                .HasColumnType("text")
                .HasColumnName("ARNNO");
            entity.Property(e => e.Automail)
                .HasColumnType("text")
                .HasColumnName("AUTOMAIL");
            entity.Property(e => e.Bankacid)
                .HasColumnType("text")
                .HasColumnName("BANKACID");
            entity.Property(e => e.Bankacid1)
                .HasColumnType("text")
                .HasColumnName("BANKACID1");
            entity.Property(e => e.Bankacid2)
                .HasColumnType("text")
                .HasColumnName("BANKACID2");
            entity.Property(e => e.Bankacid3)
                .HasColumnType("text")
                .HasColumnName("BANKACID3");
            entity.Property(e => e.Bankactype)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankactype1)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE1");
            entity.Property(e => e.Bankactype2)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE2");
            entity.Property(e => e.Bankactype3)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE3");
            entity.Property(e => e.Bankbranch1)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH1");
            entity.Property(e => e.Bankbranch2)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH2");
            entity.Property(e => e.Bankbranch3)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH3");
            entity.Property(e => e.Bankbranchname)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCHNAME");
            entity.Property(e => e.Bankcode)
                .HasColumnType("text")
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankcode2)
                .HasColumnType("text")
                .HasColumnName("BANKCODE2");
            entity.Property(e => e.Bankname)
                .HasColumnType("text")
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bankname1)
                .HasColumnType("text")
                .HasColumnName("BANKNAME1");
            entity.Property(e => e.Bankname2)
                .HasColumnType("text")
                .HasColumnName("BANKNAME2");
            entity.Property(e => e.Bankname3)
                .HasColumnType("text")
                .HasColumnName("BANKNAME3");
            entity.Property(e => e.Basefundid).HasColumnName("BASEFUNDID");
            entity.Property(e => e.Basenav)
                .HasColumnType("text")
                .HasColumnName("BASENAV");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate1)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE1");
            entity.Property(e => e.Birthdate2)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE2");
            entity.Property(e => e.Birthdate3)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE3");
            entity.Property(e => e.BondDeb)
                .HasColumnType("text")
                .HasColumnName("BOND_DEB");
            entity.Property(e => e.Branch)
                .HasColumnType("text")
                .HasColumnName("BRANCH");
            entity.Property(e => e.Capitalcommited)
                .HasPrecision(10, 2)
                .HasColumnName("CAPITALCOMMITED");
            entity.Property(e => e.Categorycode)
                .HasColumnType("text")
                .HasColumnName("CATEGORYCODE");
            entity.Property(e => e.Circle1)
                .HasColumnType("text")
                .HasColumnName("CIRCLE1");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.Clientid)
                .HasColumnType("text")
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientrights)
                .HasColumnType("text")
                .HasColumnName("CLIENTRIGHTS");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Depcode)
                .HasColumnType("text")
                .HasColumnName("DEPCODE");
            entity.Property(e => e.Depid)
                .HasColumnType("text")
                .HasColumnName("DEPID");
            entity.Property(e => e.Dp1)
                .HasColumnType("text")
                .HasColumnName("DP1");
            entity.Property(e => e.Dp2)
                .HasColumnType("text")
                .HasColumnName("DP2");
            entity.Property(e => e.Dp3)
                .HasColumnType("text")
                .HasColumnName("DP3");
            entity.Property(e => e.Dpclientid)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpclientid1)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID1");
            entity.Property(e => e.Dpclientid2)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID2");
            entity.Property(e => e.Dpclientid3)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID3");
            entity.Property(e => e.Dpid1)
                .HasColumnType("text")
                .HasColumnName("DPID1");
            entity.Property(e => e.Dpid2)
                .HasColumnType("text")
                .HasColumnName("DPID2");
            entity.Property(e => e.Dpid3)
                .HasColumnType("text")
                .HasColumnName("DPID3");
            entity.Property(e => e.Dpname2)
                .HasColumnType("text")
                .HasColumnName("DPNAME2");
            entity.Property(e => e.Dpname3)
                .HasColumnType("text")
                .HasColumnName("DPNAME3");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.EquityDeb)
                .HasColumnType("text")
                .HasColumnName("EQUITY_DEB");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Fh1)
                .HasColumnType("text")
                .HasColumnName("FH1");
            entity.Property(e => e.Fh2)
                .HasColumnType("text")
                .HasColumnName("FH2");
            entity.Property(e => e.Fh3)
                .HasColumnType("text")
                .HasColumnName("FH3");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fmrights)
                .HasColumnType("text")
                .HasColumnName("FMRIGHTS");
            entity.Property(e => e.Fundlevel).HasColumnName("FUNDLEVEL");
            entity.Property(e => e.Futures)
                .HasColumnType("text")
                .HasColumnName("FUTURES");
            entity.Property(e => e.Gender)
                .HasColumnType("text")
                .HasColumnName("GENDER");
            entity.Property(e => e.Gender2)
                .HasColumnType("text")
                .HasColumnName("GENDER2");
            entity.Property(e => e.Gender3)
                .HasColumnType("text")
                .HasColumnName("GENDER3");
            entity.Property(e => e.Groupcode)
                .HasColumnType("text")
                .HasColumnName("GROUPCODE");
            entity.Property(e => e.Groupcontact)
                .HasColumnType("text")
                .HasColumnName("GROUPCONTACT");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardian)
                .HasColumnType("text")
                .HasColumnName("GUARDIAN");
            entity.Property(e => e.Guardianadd1)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD1");
            entity.Property(e => e.Guardianadd2)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD2");
            entity.Property(e => e.Guardiancity)
                .HasColumnType("text")
                .HasColumnName("GUARDIANCITY");
            entity.Property(e => e.Guardianfax)
                .HasColumnType("text")
                .HasColumnName("GUARDIANFAX");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.Guardianphone)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPHONE");
            entity.Property(e => e.Guardianpin)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPIN");
            entity.Property(e => e.Guardianstate)
                .HasColumnType("text")
                .HasColumnName("GUARDIANSTATE");
            entity.Property(e => e.H1aadhar)
                .HasColumnType("text")
                .HasColumnName("H1AADHAR");
            entity.Property(e => e.H1ckyc)
                .HasColumnType("text")
                .HasColumnName("H1CKYC");
            entity.Property(e => e.H1fatca)
                .HasColumnType("text")
                .HasColumnName("H1FATCA");
            entity.Property(e => e.H1modeofholding)
                .HasColumnType("text")
                .HasColumnName("H1MODEOFHOLDING");
            entity.Property(e => e.H1ubo)
                .HasColumnType("text")
                .HasColumnName("H1UBO");
            entity.Property(e => e.H2aadhar)
                .HasColumnType("text")
                .HasColumnName("H2AADHAR");
            entity.Property(e => e.H2ckyc)
                .HasColumnType("text")
                .HasColumnName("H2CKYC");
            entity.Property(e => e.H2fatca)
                .HasColumnType("text")
                .HasColumnName("H2FATCA");
            entity.Property(e => e.H2ubo)
                .HasColumnType("text")
                .HasColumnName("H2UBO");
            entity.Property(e => e.H3aadhar)
                .HasColumnType("text")
                .HasColumnName("H3AADHAR");
            entity.Property(e => e.H3ckyc)
                .HasColumnType("text")
                .HasColumnName("H3CKYC");
            entity.Property(e => e.H3fatca)
                .HasColumnType("text")
                .HasColumnName("H3FATCA");
            entity.Property(e => e.H3ubo)
                .HasColumnType("text")
                .HasColumnName("H3UBO");
            entity.Property(e => e.Hofflag)
                .HasColumnType("text")
                .HasColumnName("HOFFLAG");
            entity.Property(e => e.Hofrestricted)
                .HasColumnType("text")
                .HasColumnName("HOFRESTRICTED");
            entity.Property(e => e.Inccatg)
                .HasColumnType("text")
                .HasColumnName("INCCATG");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediary)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARY");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Mailh1add1)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD1");
            entity.Property(e => e.Mailh1add2)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD2");
            entity.Property(e => e.Mailh1city)
                .HasColumnType("text")
                .HasColumnName("MAILH1CITY");
            entity.Property(e => e.Mailh1emailid)
                .HasColumnType("text")
                .HasColumnName("MAILH1EMAILID");
            entity.Property(e => e.Mailh1fax)
                .HasColumnType("text")
                .HasColumnName("MAILH1FAX");
            entity.Property(e => e.Mailh1mobile)
                .HasColumnType("text")
                .HasColumnName("MAILH1MOBILE");
            entity.Property(e => e.Mailh1phone)
                .HasColumnType("text")
                .HasColumnName("MAILH1PHONE");
            entity.Property(e => e.Mailh1pin)
                .HasColumnType("text")
                .HasColumnName("MAILH1PIN");
            entity.Property(e => e.Mailh1state)
                .HasColumnType("text")
                .HasColumnName("MAILH1STATE");
            entity.Property(e => e.Mailphonework)
                .HasColumnType("text")
                .HasColumnName("MAILPHONEWORK");
            entity.Property(e => e.Mapinid)
                .HasColumnType("text")
                .HasColumnName("MAPINID");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Maxcharge)
                .HasPrecision(10, 2)
                .HasColumnName("MAXCHARGE");
            entity.Property(e => e.Mf)
                .HasColumnType("text")
                .HasColumnName("MF");
            entity.Property(e => e.Micr1)
                .HasColumnType("text")
                .HasColumnName("MICR1");
            entity.Property(e => e.Micr2)
                .HasColumnType("text")
                .HasColumnName("MICR2");
            entity.Property(e => e.Micr3)
                .HasColumnType("text")
                .HasColumnName("MICR3");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.Modelportfolio)
                .HasColumnType("text")
                .HasColumnName("MODELPORTFOLIO");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("NAME2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("NAME3");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Neft1)
                .HasColumnType("text")
                .HasColumnName("NEFT1");
            entity.Property(e => e.Neft2)
                .HasColumnType("text")
                .HasColumnName("NEFT2");
            entity.Property(e => e.Neft3)
                .HasColumnType("text")
                .HasColumnName("NEFT3");
            entity.Property(e => e.Ngaadhar)
                .HasColumnType("text")
                .HasColumnName("NGAADHAR");
            entity.Property(e => e.Ngckyc)
                .HasColumnType("text")
                .HasColumnName("NGCKYC");
            entity.Property(e => e.Ngdob)
                .HasColumnType("text")
                .HasColumnName("NGDOB");
            entity.Property(e => e.Ngfatca)
                .HasColumnType("text")
                .HasColumnName("NGFATCA");
            entity.Property(e => e.Ngpan)
                .HasColumnType("text")
                .HasColumnName("NGPAN");
            entity.Property(e => e.Ngubo)
                .HasColumnType("text")
                .HasColumnName("NGUBO");
            entity.Property(e => e.Nomdob)
                .HasColumnType("text")
                .HasColumnName("NOMDOB");
            entity.Property(e => e.Nomineeadd1)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD1");
            entity.Property(e => e.Nomineeadd2)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD2");
            entity.Property(e => e.Nomineecity)
                .HasColumnType("text")
                .HasColumnName("NOMINEECITY");
            entity.Property(e => e.Nomineefax)
                .HasColumnType("text")
                .HasColumnName("NOMINEEFAX");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Nomineephone)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPHONE");
            entity.Property(e => e.Nomineepin)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPIN");
            entity.Property(e => e.Nomineerelation)
                .HasColumnType("text")
                .HasColumnName("NOMINEERELATION");
            entity.Property(e => e.Nomineestate)
                .HasColumnType("text")
                .HasColumnName("NOMINEESTATE");
            entity.Property(e => e.Nompan)
                .HasColumnType("text")
                .HasColumnName("NOMPAN");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Onlylowestclassify)
                .HasColumnType("text")
                .HasColumnName("ONLYLOWESTCLASSIFY");
            entity.Property(e => e.Operationtype)
                .HasColumnType("text")
                .HasColumnName("OPERATIONTYPE");
            entity.Property(e => e.Options)
                .HasColumnType("text")
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OtherAssets)
                .HasColumnType("text")
                .HasColumnName("OTHER_ASSETS");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("PAN");
            entity.Property(e => e.Pan2)
                .HasColumnType("text")
                .HasColumnName("PAN2");
            entity.Property(e => e.Pan3)
                .HasColumnType("text")
                .HasColumnName("PAN3");
            entity.Property(e => e.Parentfundid).HasColumnName("PARENTFUNDID");
            entity.Property(e => e.Perfclassifydaily)
                .HasColumnType("text")
                .HasColumnName("PERFCLASSIFYDAILY");
            entity.Property(e => e.Perfreportdate)
                .HasColumnType("text")
                .HasColumnName("PERFREPORTDATE");
            entity.Property(e => e.Phone)
                .HasColumnType("text")
                .HasColumnName("PHONE");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Planallowed)
                .HasColumnType("text")
                .HasColumnName("PLANALLOWED");
            entity.Property(e => e.Poolmapin)
                .HasColumnType("text")
                .HasColumnName("POOLMAPIN");
            entity.Property(e => e.Recoproduct)
                .HasColumnType("text")
                .HasColumnName("RECOPRODUCT");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relation2)
                .HasColumnType("text")
                .HasColumnName("RELATION2");
            entity.Property(e => e.Relation3)
                .HasColumnType("text")
                .HasColumnName("RELATION3");
            entity.Property(e => e.Relmapping1)
                .HasColumnType("text")
                .HasColumnName("RELMAPPING1");
            entity.Property(e => e.Relmgr)
                .HasColumnType("text")
                .HasColumnName("RELMGR");
            entity.Property(e => e.Riskprofilename)
                .HasColumnType("text")
                .HasColumnName("RISKPROFILENAME");
            entity.Property(e => e.Rmrights)
                .HasColumnType("text")
                .HasColumnName("RMRIGHTS");
            entity.Property(e => e.Rtgs1)
                .HasColumnType("text")
                .HasColumnName("RTGS1");
            entity.Property(e => e.Rtgs2)
                .HasColumnType("text")
                .HasColumnName("RTGS2");
            entity.Property(e => e.Rtgs3)
                .HasColumnType("text")
                .HasColumnName("RTGS3");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Scheme)
                .HasColumnType("text")
                .HasColumnName("SCHEME");
            entity.Property(e => e.Scope)
                .HasMaxLength(255)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid)
                .HasMaxLength(255)
                .HasColumnName("scopeid");
            entity.Property(e => e.Sharereports)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTS");
            entity.Property(e => e.Shares)
                .HasColumnType("text")
                .HasColumnName("SHARES");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stttakenas)
                .HasColumnType("text")
                .HasColumnName("STTTAKENAS");
            entity.Property(e => e.Tan1)
                .HasColumnType("text")
                .HasColumnName("TAN1");
            entity.Property(e => e.Taxable)
                .HasColumnType("text")
                .HasColumnName("TAXABLE");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Txnfeetakenas)
                .HasColumnType("text")
                .HasColumnName("TXNFEETAKENAS");
            entity.Property(e => e.UserName)
                .HasColumnType("text")
                .HasColumnName("USER_NAME");
            entity.Property(e => e.Ward1)
                .HasColumnType("text")
                .HasColumnName("WARD1");
            entity.Property(e => e.Wealthadvisorname)
                .HasColumnType("text")
                .HasColumnName("WEALTHADVISORNAME");
        });

        modelBuilder.Entity<WsClientuploadmasterdataTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_clientuploadmasterdata_test");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accountcode)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTCODE");
            entity.Property(e => e.Accountingtxn)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTINGTXN");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Add1)
                .HasColumnType("text")
                .HasColumnName("ADD1");
            entity.Property(e => e.Add2)
                .HasColumnType("text")
                .HasColumnName("ADD2");
            entity.Property(e => e.Advisor)
                .HasColumnType("text")
                .HasColumnName("ADVISOR");
            entity.Property(e => e.Advisorrights)
                .HasColumnType("text")
                .HasColumnName("ADVISORRIGHTS");
            entity.Property(e => e.Arnno)
                .HasColumnType("text")
                .HasColumnName("ARNNO");
            entity.Property(e => e.Automail)
                .HasColumnType("text")
                .HasColumnName("AUTOMAIL");
            entity.Property(e => e.Bankacid)
                .HasColumnType("text")
                .HasColumnName("BANKACID");
            entity.Property(e => e.Bankacid1)
                .HasColumnType("text")
                .HasColumnName("BANKACID1");
            entity.Property(e => e.Bankacid2)
                .HasColumnType("text")
                .HasColumnName("BANKACID2");
            entity.Property(e => e.Bankacid3)
                .HasColumnType("text")
                .HasColumnName("BANKACID3");
            entity.Property(e => e.Bankactype)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankactype1)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE1");
            entity.Property(e => e.Bankactype2)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE2");
            entity.Property(e => e.Bankactype3)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE3");
            entity.Property(e => e.Bankbranch1)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH1");
            entity.Property(e => e.Bankbranch2)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH2");
            entity.Property(e => e.Bankbranch3)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH3");
            entity.Property(e => e.Bankbranchname)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCHNAME");
            entity.Property(e => e.Bankcode)
                .HasColumnType("text")
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankcode2)
                .HasColumnType("text")
                .HasColumnName("BANKCODE2");
            entity.Property(e => e.Bankname)
                .HasColumnType("text")
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bankname1)
                .HasColumnType("text")
                .HasColumnName("BANKNAME1");
            entity.Property(e => e.Bankname2)
                .HasColumnType("text")
                .HasColumnName("BANKNAME2");
            entity.Property(e => e.Bankname3)
                .HasColumnType("text")
                .HasColumnName("BANKNAME3");
            entity.Property(e => e.Basefundid).HasColumnName("BASEFUNDID");
            entity.Property(e => e.Basenav)
                .HasColumnType("text")
                .HasColumnName("BASENAV");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate1)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE1");
            entity.Property(e => e.Birthdate2)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE2");
            entity.Property(e => e.Birthdate3)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE3");
            entity.Property(e => e.BondDeb)
                .HasColumnType("text")
                .HasColumnName("BOND_DEB");
            entity.Property(e => e.Branch)
                .HasColumnType("text")
                .HasColumnName("BRANCH");
            entity.Property(e => e.Capitalcommited).HasColumnName("CAPITALCOMMITED");
            entity.Property(e => e.Categorycode)
                .HasColumnType("text")
                .HasColumnName("CATEGORYCODE");
            entity.Property(e => e.Circle1)
                .HasColumnType("text")
                .HasColumnName("CIRCLE1");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.Clientid)
                .HasColumnType("text")
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientrights)
                .HasColumnType("text")
                .HasColumnName("CLIENTRIGHTS");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Depcode)
                .HasColumnType("text")
                .HasColumnName("DEPCODE");
            entity.Property(e => e.Depid)
                .HasColumnType("text")
                .HasColumnName("DEPID");
            entity.Property(e => e.Dp1)
                .HasColumnType("text")
                .HasColumnName("DP1");
            entity.Property(e => e.Dp2)
                .HasColumnType("text")
                .HasColumnName("DP2");
            entity.Property(e => e.Dp3)
                .HasColumnType("text")
                .HasColumnName("DP3");
            entity.Property(e => e.Dpclientid)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpclientid1)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID1");
            entity.Property(e => e.Dpclientid2)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID2");
            entity.Property(e => e.Dpclientid3)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID3");
            entity.Property(e => e.Dpid1)
                .HasColumnType("text")
                .HasColumnName("DPID1");
            entity.Property(e => e.Dpid2)
                .HasColumnType("text")
                .HasColumnName("DPID2");
            entity.Property(e => e.Dpid3)
                .HasColumnType("text")
                .HasColumnName("DPID3");
            entity.Property(e => e.Dpname2)
                .HasColumnType("text")
                .HasColumnName("DPNAME2");
            entity.Property(e => e.Dpname3)
                .HasColumnType("text")
                .HasColumnName("DPNAME3");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.EquityDeb)
                .HasColumnType("text")
                .HasColumnName("EQUITY_DEB");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Fh1)
                .HasColumnType("text")
                .HasColumnName("FH1");
            entity.Property(e => e.Fh2)
                .HasColumnType("text")
                .HasColumnName("FH2");
            entity.Property(e => e.Fh3)
                .HasColumnType("text")
                .HasColumnName("FH3");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fmrights)
                .HasColumnType("text")
                .HasColumnName("FMRIGHTS");
            entity.Property(e => e.Fundlevel).HasColumnName("FUNDLEVEL");
            entity.Property(e => e.Futures)
                .HasColumnType("text")
                .HasColumnName("FUTURES");
            entity.Property(e => e.Gender)
                .HasColumnType("text")
                .HasColumnName("GENDER");
            entity.Property(e => e.Gender2)
                .HasColumnType("text")
                .HasColumnName("GENDER2");
            entity.Property(e => e.Gender3)
                .HasColumnType("text")
                .HasColumnName("GENDER3");
            entity.Property(e => e.Groupcode)
                .HasColumnType("text")
                .HasColumnName("GROUPCODE");
            entity.Property(e => e.Groupcontact)
                .HasColumnType("text")
                .HasColumnName("GROUPCONTACT");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardian)
                .HasColumnType("text")
                .HasColumnName("GUARDIAN");
            entity.Property(e => e.Guardianadd1)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD1");
            entity.Property(e => e.Guardianadd2)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD2");
            entity.Property(e => e.Guardiancity)
                .HasColumnType("text")
                .HasColumnName("GUARDIANCITY");
            entity.Property(e => e.Guardianfax)
                .HasColumnType("text")
                .HasColumnName("GUARDIANFAX");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.Guardianphone)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPHONE");
            entity.Property(e => e.Guardianpin)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPIN");
            entity.Property(e => e.Guardianstate)
                .HasColumnType("text")
                .HasColumnName("GUARDIANSTATE");
            entity.Property(e => e.H1aadhar)
                .HasColumnType("text")
                .HasColumnName("H1AADHAR");
            entity.Property(e => e.H1ckyc)
                .HasColumnType("text")
                .HasColumnName("H1CKYC");
            entity.Property(e => e.H1fatca)
                .HasColumnType("text")
                .HasColumnName("H1FATCA");
            entity.Property(e => e.H1modeofholding)
                .HasColumnType("text")
                .HasColumnName("H1MODEOFHOLDING");
            entity.Property(e => e.H1ubo)
                .HasColumnType("text")
                .HasColumnName("H1UBO");
            entity.Property(e => e.H2aadhar)
                .HasColumnType("text")
                .HasColumnName("H2AADHAR");
            entity.Property(e => e.H2ckyc)
                .HasColumnType("text")
                .HasColumnName("H2CKYC");
            entity.Property(e => e.H2fatca)
                .HasColumnType("text")
                .HasColumnName("H2FATCA");
            entity.Property(e => e.H2ubo)
                .HasColumnType("text")
                .HasColumnName("H2UBO");
            entity.Property(e => e.H3aadhar)
                .HasColumnType("text")
                .HasColumnName("H3AADHAR");
            entity.Property(e => e.H3ckyc)
                .HasColumnType("text")
                .HasColumnName("H3CKYC");
            entity.Property(e => e.H3fatca)
                .HasColumnType("text")
                .HasColumnName("H3FATCA");
            entity.Property(e => e.H3ubo)
                .HasColumnType("text")
                .HasColumnName("H3UBO");
            entity.Property(e => e.Hofflag)
                .HasColumnType("text")
                .HasColumnName("HOFFLAG");
            entity.Property(e => e.Hofrestricted)
                .HasColumnType("text")
                .HasColumnName("HOFRESTRICTED");
            entity.Property(e => e.Inccatg)
                .HasColumnType("text")
                .HasColumnName("INCCATG");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediary)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARY");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Mailh1add1)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD1");
            entity.Property(e => e.Mailh1add2)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD2");
            entity.Property(e => e.Mailh1city)
                .HasColumnType("text")
                .HasColumnName("MAILH1CITY");
            entity.Property(e => e.Mailh1emailid)
                .HasColumnType("text")
                .HasColumnName("MAILH1EMAILID");
            entity.Property(e => e.Mailh1fax)
                .HasColumnType("text")
                .HasColumnName("MAILH1FAX");
            entity.Property(e => e.Mailh1mobile)
                .HasColumnType("text")
                .HasColumnName("MAILH1MOBILE");
            entity.Property(e => e.Mailh1phone)
                .HasColumnType("text")
                .HasColumnName("MAILH1PHONE");
            entity.Property(e => e.Mailh1pin)
                .HasColumnType("text")
                .HasColumnName("MAILH1PIN");
            entity.Property(e => e.Mailh1state)
                .HasColumnType("text")
                .HasColumnName("MAILH1STATE");
            entity.Property(e => e.Mailphonework)
                .HasColumnType("text")
                .HasColumnName("MAILPHONEWORK");
            entity.Property(e => e.Mapinid)
                .HasColumnType("text")
                .HasColumnName("MAPINID");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Maxcharge).HasColumnName("MAXCHARGE");
            entity.Property(e => e.Mf)
                .HasColumnType("text")
                .HasColumnName("MF");
            entity.Property(e => e.Micr1)
                .HasColumnType("text")
                .HasColumnName("MICR1");
            entity.Property(e => e.Micr2)
                .HasColumnType("text")
                .HasColumnName("MICR2");
            entity.Property(e => e.Micr3)
                .HasColumnType("text")
                .HasColumnName("MICR3");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.Modelportfolio)
                .HasColumnType("text")
                .HasColumnName("MODELPORTFOLIO");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("NAME2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("NAME3");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Neft1)
                .HasColumnType("text")
                .HasColumnName("NEFT1");
            entity.Property(e => e.Neft2)
                .HasColumnType("text")
                .HasColumnName("NEFT2");
            entity.Property(e => e.Neft3)
                .HasColumnType("text")
                .HasColumnName("NEFT3");
            entity.Property(e => e.Ngaadhar)
                .HasColumnType("text")
                .HasColumnName("NGAADHAR");
            entity.Property(e => e.Ngckyc)
                .HasColumnType("text")
                .HasColumnName("NGCKYC");
            entity.Property(e => e.Ngdob)
                .HasColumnType("text")
                .HasColumnName("NGDOB");
            entity.Property(e => e.Ngfatca)
                .HasColumnType("text")
                .HasColumnName("NGFATCA");
            entity.Property(e => e.Ngpan)
                .HasColumnType("text")
                .HasColumnName("NGPAN");
            entity.Property(e => e.Ngubo)
                .HasColumnType("text")
                .HasColumnName("NGUBO");
            entity.Property(e => e.Nomdob)
                .HasColumnType("text")
                .HasColumnName("NOMDOB");
            entity.Property(e => e.Nomineeadd1)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD1");
            entity.Property(e => e.Nomineeadd2)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD2");
            entity.Property(e => e.Nomineecity)
                .HasColumnType("text")
                .HasColumnName("NOMINEECITY");
            entity.Property(e => e.Nomineefax)
                .HasColumnType("text")
                .HasColumnName("NOMINEEFAX");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Nomineephone)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPHONE");
            entity.Property(e => e.Nomineepin)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPIN");
            entity.Property(e => e.Nomineerelation)
                .HasColumnType("text")
                .HasColumnName("NOMINEERELATION");
            entity.Property(e => e.Nomineestate)
                .HasColumnType("text")
                .HasColumnName("NOMINEESTATE");
            entity.Property(e => e.Nompan)
                .HasColumnType("text")
                .HasColumnName("NOMPAN");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Onlylowestclassify)
                .HasColumnType("text")
                .HasColumnName("ONLYLOWESTCLASSIFY");
            entity.Property(e => e.Operationtype)
                .HasColumnType("text")
                .HasColumnName("OPERATIONTYPE");
            entity.Property(e => e.Options)
                .HasColumnType("text")
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OtherAssets)
                .HasColumnType("text")
                .HasColumnName("OTHER_ASSETS");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("PAN");
            entity.Property(e => e.Pan2)
                .HasColumnType("text")
                .HasColumnName("PAN2");
            entity.Property(e => e.Pan3)
                .HasColumnType("text")
                .HasColumnName("PAN3");
            entity.Property(e => e.Parentfundid).HasColumnName("PARENTFUNDID");
            entity.Property(e => e.Perfclassifydaily)
                .HasColumnType("text")
                .HasColumnName("PERFCLASSIFYDAILY");
            entity.Property(e => e.Perfreportdate)
                .HasColumnType("text")
                .HasColumnName("PERFREPORTDATE");
            entity.Property(e => e.Phone)
                .HasColumnType("text")
                .HasColumnName("PHONE");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Planallowed)
                .HasColumnType("text")
                .HasColumnName("PLANALLOWED");
            entity.Property(e => e.Poolmapin)
                .HasColumnType("text")
                .HasColumnName("POOLMAPIN");
            entity.Property(e => e.Recoproduct)
                .HasColumnType("text")
                .HasColumnName("RECOPRODUCT");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relation2)
                .HasColumnType("text")
                .HasColumnName("RELATION2");
            entity.Property(e => e.Relation3)
                .HasColumnType("text")
                .HasColumnName("RELATION3");
            entity.Property(e => e.Relmapping1)
                .HasColumnType("text")
                .HasColumnName("RELMAPPING1");
            entity.Property(e => e.Relmgr)
                .HasColumnType("text")
                .HasColumnName("RELMGR");
            entity.Property(e => e.Riskprofilename)
                .HasColumnType("text")
                .HasColumnName("RISKPROFILENAME");
            entity.Property(e => e.Rmrights)
                .HasColumnType("text")
                .HasColumnName("RMRIGHTS");
            entity.Property(e => e.Rtgs1)
                .HasColumnType("text")
                .HasColumnName("RTGS1");
            entity.Property(e => e.Rtgs2)
                .HasColumnType("text")
                .HasColumnName("RTGS2");
            entity.Property(e => e.Rtgs3)
                .HasColumnType("text")
                .HasColumnName("RTGS3");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Scheme)
                .HasColumnType("text")
                .HasColumnName("SCHEME");
            entity.Property(e => e.Sharereports)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTS");
            entity.Property(e => e.Shares)
                .HasColumnType("text")
                .HasColumnName("SHARES");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stttakenas)
                .HasColumnType("text")
                .HasColumnName("STTTAKENAS");
            entity.Property(e => e.Tan1)
                .HasColumnType("text")
                .HasColumnName("TAN1");
            entity.Property(e => e.Taxable)
                .HasColumnType("text")
                .HasColumnName("TAXABLE");
            entity.Property(e => e.Txnfeetakenas)
                .HasColumnType("text")
                .HasColumnName("TXNFEETAKENAS");
            entity.Property(e => e.UserName)
                .HasColumnType("text")
                .HasColumnName("USER_NAME");
            entity.Property(e => e.Ward1)
                .HasColumnType("text")
                .HasColumnName("WARD1");
            entity.Property(e => e.Wealthadvisorname)
                .HasColumnType("text")
                .HasColumnName("WEALTHADVISORNAME");
        });

        modelBuilder.Entity<WsClientuploadmasterdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_clientuploadmasterdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accountcode)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTCODE");
            entity.Property(e => e.Accountingtxn)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTINGTXN");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Add1)
                .HasColumnType("text")
                .HasColumnName("ADD1");
            entity.Property(e => e.Add2)
                .HasColumnType("text")
                .HasColumnName("ADD2");
            entity.Property(e => e.Advisor)
                .HasColumnType("text")
                .HasColumnName("ADVISOR");
            entity.Property(e => e.Advisorrights)
                .HasColumnType("text")
                .HasColumnName("ADVISORRIGHTS");
            entity.Property(e => e.Arnno)
                .HasColumnType("text")
                .HasColumnName("ARNNO");
            entity.Property(e => e.Automail)
                .HasColumnType("text")
                .HasColumnName("AUTOMAIL");
            entity.Property(e => e.Bankacid)
                .HasColumnType("text")
                .HasColumnName("BANKACID");
            entity.Property(e => e.Bankacid1)
                .HasColumnType("text")
                .HasColumnName("BANKACID1");
            entity.Property(e => e.Bankacid2)
                .HasColumnType("text")
                .HasColumnName("BANKACID2");
            entity.Property(e => e.Bankacid3)
                .HasColumnType("text")
                .HasColumnName("BANKACID3");
            entity.Property(e => e.Bankactype)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankactype1)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE1");
            entity.Property(e => e.Bankactype2)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE2");
            entity.Property(e => e.Bankactype3)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE3");
            entity.Property(e => e.Bankbranch1)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH1");
            entity.Property(e => e.Bankbranch2)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH2");
            entity.Property(e => e.Bankbranch3)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH3");
            entity.Property(e => e.Bankbranchname)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCHNAME");
            entity.Property(e => e.Bankcode)
                .HasColumnType("text")
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankcode2)
                .HasColumnType("text")
                .HasColumnName("BANKCODE2");
            entity.Property(e => e.Bankname)
                .HasColumnType("text")
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bankname1)
                .HasColumnType("text")
                .HasColumnName("BANKNAME1");
            entity.Property(e => e.Bankname2)
                .HasColumnType("text")
                .HasColumnName("BANKNAME2");
            entity.Property(e => e.Bankname3)
                .HasColumnType("text")
                .HasColumnName("BANKNAME3");
            entity.Property(e => e.Basefundid).HasColumnName("BASEFUNDID");
            entity.Property(e => e.Basenav)
                .HasColumnType("text")
                .HasColumnName("BASENAV");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate1)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE1");
            entity.Property(e => e.Birthdate2)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE2");
            entity.Property(e => e.Birthdate3)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE3");
            entity.Property(e => e.BondDeb)
                .HasColumnType("text")
                .HasColumnName("BOND_DEB");
            entity.Property(e => e.Branch)
                .HasColumnType("text")
                .HasColumnName("BRANCH");
            entity.Property(e => e.Capitalcommited).HasColumnName("CAPITALCOMMITED");
            entity.Property(e => e.Categorycode)
                .HasColumnType("text")
                .HasColumnName("CATEGORYCODE");
            entity.Property(e => e.Circle1)
                .HasColumnType("text")
                .HasColumnName("CIRCLE1");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.Clientid)
                .HasColumnType("text")
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientrights)
                .HasColumnType("text")
                .HasColumnName("CLIENTRIGHTS");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Depcode)
                .HasColumnType("text")
                .HasColumnName("DEPCODE");
            entity.Property(e => e.Depid)
                .HasColumnType("text")
                .HasColumnName("DEPID");
            entity.Property(e => e.Dp1)
                .HasColumnType("text")
                .HasColumnName("DP1");
            entity.Property(e => e.Dp2)
                .HasColumnType("text")
                .HasColumnName("DP2");
            entity.Property(e => e.Dp3)
                .HasColumnType("text")
                .HasColumnName("DP3");
            entity.Property(e => e.Dpclientid)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpclientid1)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID1");
            entity.Property(e => e.Dpclientid2)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID2");
            entity.Property(e => e.Dpclientid3)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID3");
            entity.Property(e => e.Dpid1)
                .HasColumnType("text")
                .HasColumnName("DPID1");
            entity.Property(e => e.Dpid2)
                .HasColumnType("text")
                .HasColumnName("DPID2");
            entity.Property(e => e.Dpid3)
                .HasColumnType("text")
                .HasColumnName("DPID3");
            entity.Property(e => e.Dpname2)
                .HasColumnType("text")
                .HasColumnName("DPNAME2");
            entity.Property(e => e.Dpname3)
                .HasColumnType("text")
                .HasColumnName("DPNAME3");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.EquityDeb)
                .HasColumnType("text")
                .HasColumnName("EQUITY_DEB");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Fh1)
                .HasColumnType("text")
                .HasColumnName("FH1");
            entity.Property(e => e.Fh2)
                .HasColumnType("text")
                .HasColumnName("FH2");
            entity.Property(e => e.Fh3)
                .HasColumnType("text")
                .HasColumnName("FH3");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fmrights)
                .HasColumnType("text")
                .HasColumnName("FMRIGHTS");
            entity.Property(e => e.Fundlevel).HasColumnName("FUNDLEVEL");
            entity.Property(e => e.Futures)
                .HasColumnType("text")
                .HasColumnName("FUTURES");
            entity.Property(e => e.Gender)
                .HasColumnType("text")
                .HasColumnName("GENDER");
            entity.Property(e => e.Gender2)
                .HasColumnType("text")
                .HasColumnName("GENDER2");
            entity.Property(e => e.Gender3)
                .HasColumnType("text")
                .HasColumnName("GENDER3");
            entity.Property(e => e.Groupcode)
                .HasColumnType("text")
                .HasColumnName("GROUPCODE");
            entity.Property(e => e.Groupcontact)
                .HasColumnType("text")
                .HasColumnName("GROUPCONTACT");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardian)
                .HasColumnType("text")
                .HasColumnName("GUARDIAN");
            entity.Property(e => e.Guardianadd1)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD1");
            entity.Property(e => e.Guardianadd2)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD2");
            entity.Property(e => e.Guardiancity)
                .HasColumnType("text")
                .HasColumnName("GUARDIANCITY");
            entity.Property(e => e.Guardianfax)
                .HasColumnType("text")
                .HasColumnName("GUARDIANFAX");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.Guardianphone)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPHONE");
            entity.Property(e => e.Guardianpin)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPIN");
            entity.Property(e => e.Guardianstate)
                .HasColumnType("text")
                .HasColumnName("GUARDIANSTATE");
            entity.Property(e => e.H1aadhar)
                .HasColumnType("text")
                .HasColumnName("H1AADHAR");
            entity.Property(e => e.H1ckyc)
                .HasColumnType("text")
                .HasColumnName("H1CKYC");
            entity.Property(e => e.H1fatca)
                .HasColumnType("text")
                .HasColumnName("H1FATCA");
            entity.Property(e => e.H1modeofholding)
                .HasColumnType("text")
                .HasColumnName("H1MODEOFHOLDING");
            entity.Property(e => e.H1ubo)
                .HasColumnType("text")
                .HasColumnName("H1UBO");
            entity.Property(e => e.H2aadhar)
                .HasColumnType("text")
                .HasColumnName("H2AADHAR");
            entity.Property(e => e.H2ckyc)
                .HasColumnType("text")
                .HasColumnName("H2CKYC");
            entity.Property(e => e.H2fatca)
                .HasColumnType("text")
                .HasColumnName("H2FATCA");
            entity.Property(e => e.H2ubo)
                .HasColumnType("text")
                .HasColumnName("H2UBO");
            entity.Property(e => e.H3aadhar)
                .HasColumnType("text")
                .HasColumnName("H3AADHAR");
            entity.Property(e => e.H3ckyc)
                .HasColumnType("text")
                .HasColumnName("H3CKYC");
            entity.Property(e => e.H3fatca)
                .HasColumnType("text")
                .HasColumnName("H3FATCA");
            entity.Property(e => e.H3ubo)
                .HasColumnType("text")
                .HasColumnName("H3UBO");
            entity.Property(e => e.Hofflag)
                .HasColumnType("text")
                .HasColumnName("HOFFLAG");
            entity.Property(e => e.Hofrestricted)
                .HasColumnType("text")
                .HasColumnName("HOFRESTRICTED");
            entity.Property(e => e.Inccatg)
                .HasColumnType("text")
                .HasColumnName("INCCATG");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediary)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARY");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Mailh1add1)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD1");
            entity.Property(e => e.Mailh1add2)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD2");
            entity.Property(e => e.Mailh1city)
                .HasColumnType("text")
                .HasColumnName("MAILH1CITY");
            entity.Property(e => e.Mailh1emailid)
                .HasColumnType("text")
                .HasColumnName("MAILH1EMAILID");
            entity.Property(e => e.Mailh1fax)
                .HasColumnType("text")
                .HasColumnName("MAILH1FAX");
            entity.Property(e => e.Mailh1mobile)
                .HasColumnType("text")
                .HasColumnName("MAILH1MOBILE");
            entity.Property(e => e.Mailh1phone)
                .HasColumnType("text")
                .HasColumnName("MAILH1PHONE");
            entity.Property(e => e.Mailh1pin)
                .HasColumnType("text")
                .HasColumnName("MAILH1PIN");
            entity.Property(e => e.Mailh1state)
                .HasColumnType("text")
                .HasColumnName("MAILH1STATE");
            entity.Property(e => e.Mailphonework)
                .HasColumnType("text")
                .HasColumnName("MAILPHONEWORK");
            entity.Property(e => e.Mapinid)
                .HasColumnType("text")
                .HasColumnName("MAPINID");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Maxcharge).HasColumnName("MAXCHARGE");
            entity.Property(e => e.Mf)
                .HasColumnType("text")
                .HasColumnName("MF");
            entity.Property(e => e.Micr1)
                .HasColumnType("text")
                .HasColumnName("MICR1");
            entity.Property(e => e.Micr2)
                .HasColumnType("text")
                .HasColumnName("MICR2");
            entity.Property(e => e.Micr3)
                .HasColumnType("text")
                .HasColumnName("MICR3");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.Modelportfolio)
                .HasColumnType("text")
                .HasColumnName("MODELPORTFOLIO");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("NAME2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("NAME3");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Neft1)
                .HasColumnType("text")
                .HasColumnName("NEFT1");
            entity.Property(e => e.Neft2)
                .HasColumnType("text")
                .HasColumnName("NEFT2");
            entity.Property(e => e.Neft3)
                .HasColumnType("text")
                .HasColumnName("NEFT3");
            entity.Property(e => e.Ngaadhar)
                .HasColumnType("text")
                .HasColumnName("NGAADHAR");
            entity.Property(e => e.Ngckyc)
                .HasColumnType("text")
                .HasColumnName("NGCKYC");
            entity.Property(e => e.Ngdob)
                .HasColumnType("text")
                .HasColumnName("NGDOB");
            entity.Property(e => e.Ngfatca)
                .HasColumnType("text")
                .HasColumnName("NGFATCA");
            entity.Property(e => e.Ngpan)
                .HasColumnType("text")
                .HasColumnName("NGPAN");
            entity.Property(e => e.Ngubo)
                .HasColumnType("text")
                .HasColumnName("NGUBO");
            entity.Property(e => e.Nomdob)
                .HasColumnType("text")
                .HasColumnName("NOMDOB");
            entity.Property(e => e.Nomineeadd1)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD1");
            entity.Property(e => e.Nomineeadd2)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD2");
            entity.Property(e => e.Nomineecity)
                .HasColumnType("text")
                .HasColumnName("NOMINEECITY");
            entity.Property(e => e.Nomineefax)
                .HasColumnType("text")
                .HasColumnName("NOMINEEFAX");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Nomineephone)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPHONE");
            entity.Property(e => e.Nomineepin)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPIN");
            entity.Property(e => e.Nomineerelation)
                .HasColumnType("text")
                .HasColumnName("NOMINEERELATION");
            entity.Property(e => e.Nomineestate)
                .HasColumnType("text")
                .HasColumnName("NOMINEESTATE");
            entity.Property(e => e.Nompan)
                .HasColumnType("text")
                .HasColumnName("NOMPAN");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Onlylowestclassify)
                .HasColumnType("text")
                .HasColumnName("ONLYLOWESTCLASSIFY");
            entity.Property(e => e.Operationtype)
                .HasColumnType("text")
                .HasColumnName("OPERATIONTYPE");
            entity.Property(e => e.Options)
                .HasColumnType("text")
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OtherAssets)
                .HasColumnType("text")
                .HasColumnName("OTHER_ASSETS");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("PAN");
            entity.Property(e => e.Pan2)
                .HasColumnType("text")
                .HasColumnName("PAN2");
            entity.Property(e => e.Pan3)
                .HasColumnType("text")
                .HasColumnName("PAN3");
            entity.Property(e => e.Parentfundid).HasColumnName("PARENTFUNDID");
            entity.Property(e => e.Perfclassifydaily)
                .HasColumnType("text")
                .HasColumnName("PERFCLASSIFYDAILY");
            entity.Property(e => e.Perfreportdate)
                .HasColumnType("text")
                .HasColumnName("PERFREPORTDATE");
            entity.Property(e => e.Phone)
                .HasColumnType("text")
                .HasColumnName("PHONE");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Planallowed)
                .HasColumnType("text")
                .HasColumnName("PLANALLOWED");
            entity.Property(e => e.Poolmapin)
                .HasColumnType("text")
                .HasColumnName("POOLMAPIN");
            entity.Property(e => e.Recoproduct)
                .HasColumnType("text")
                .HasColumnName("RECOPRODUCT");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relation2)
                .HasColumnType("text")
                .HasColumnName("RELATION2");
            entity.Property(e => e.Relation3)
                .HasColumnType("text")
                .HasColumnName("RELATION3");
            entity.Property(e => e.Relmapping1)
                .HasColumnType("text")
                .HasColumnName("RELMAPPING1");
            entity.Property(e => e.Relmgr)
                .HasColumnType("text")
                .HasColumnName("RELMGR");
            entity.Property(e => e.Riskprofilename)
                .HasColumnType("text")
                .HasColumnName("RISKPROFILENAME");
            entity.Property(e => e.Rmrights)
                .HasColumnType("text")
                .HasColumnName("RMRIGHTS");
            entity.Property(e => e.Rtgs1)
                .HasColumnType("text")
                .HasColumnName("RTGS1");
            entity.Property(e => e.Rtgs2)
                .HasColumnType("text")
                .HasColumnName("RTGS2");
            entity.Property(e => e.Rtgs3)
                .HasColumnType("text")
                .HasColumnName("RTGS3");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Scheme)
                .HasColumnType("text")
                .HasColumnName("SCHEME");
            entity.Property(e => e.Sharereports)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTS");
            entity.Property(e => e.Shares)
                .HasColumnType("text")
                .HasColumnName("SHARES");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stttakenas)
                .HasColumnType("text")
                .HasColumnName("STTTAKENAS");
            entity.Property(e => e.Tan1)
                .HasColumnType("text")
                .HasColumnName("TAN1");
            entity.Property(e => e.Taxable)
                .HasColumnType("text")
                .HasColumnName("TAXABLE");
            entity.Property(e => e.Txnfeetakenas)
                .HasColumnType("text")
                .HasColumnName("TXNFEETAKENAS");
            entity.Property(e => e.UserName)
                .HasColumnType("text")
                .HasColumnName("USER_NAME");
            entity.Property(e => e.Ward1)
                .HasColumnType("text")
                .HasColumnName("WARD1");
            entity.Property(e => e.Wealthadvisorname)
                .HasColumnType("text")
                .HasColumnName("WEALTHADVISORNAME");
        });

        modelBuilder.Entity<WsDpdetailsdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_dpdetailsdata");

            entity.HasIndex(e => e.ClientCode, "idx_ClientCode");

            entity.Property(e => e.AccountType).HasMaxLength(30);
            entity.Property(e => e.ClientCode).HasMaxLength(10);
            entity.Property(e => e.ClientId).HasMaxLength(10);
            entity.Property(e => e.GroupId).HasMaxLength(10);
            entity.Property(e => e.IsPoa).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsPrimary).HasDefaultValueSql("'1'");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.OwnerId).HasMaxLength(10);
            entity.Property(e => e.TradingDpId).HasMaxLength(30);
            entity.Property(e => e.TradingDpType).HasMaxLength(30);
        });

        modelBuilder.Entity<WsEmployeemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_employeemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AlternateMobile)
                .HasMaxLength(20)
                .HasColumnName("alternate_mobile");
            entity.Property(e => e.CategoryId)
                .HasMaxLength(20)
                .HasColumnName("category_id");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(50)
                .HasColumnName("category_name");
            entity.Property(e => e.ChannelId)
                .HasMaxLength(20)
                .HasColumnName("channel_id");
            entity.Property(e => e.ChannelName)
                .HasMaxLength(50)
                .HasColumnName("channel_name");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.DataSourceId)
                .HasMaxLength(20)
                .HasColumnName("data_source_id");
            entity.Property(e => e.Department)
                .HasMaxLength(100)
                .HasColumnName("department");
            entity.Property(e => e.Designation)
                .HasMaxLength(100)
                .HasColumnName("designation");
            entity.Property(e => e.Doj)
                .HasMaxLength(20)
                .HasColumnName("doj");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(20)
                .HasColumnName("emp_code");
            entity.Property(e => e.Euin)
                .HasMaxLength(20)
                .HasColumnName("EUIN");
            entity.Property(e => e.ExtentCode)
                .HasMaxLength(20)
                .HasColumnName("extent_code");
            entity.Property(e => e.IsActive)
                .HasMaxLength(10)
                .HasColumnName("is_active");
            entity.Property(e => e.IsDeleted)
                .HasMaxLength(10)
                .HasColumnName("is_deleted");
            entity.Property(e => e.Isactive1)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Landline)
                .HasMaxLength(20)
                .HasColumnName("landline");
            entity.Property(e => e.LeftExtent)
                .HasMaxLength(20)
                .HasColumnName("left_extent");
            entity.Property(e => e.LobId)
                .HasMaxLength(20)
                .HasColumnName("lob_id");
            entity.Property(e => e.LobName)
                .HasMaxLength(100)
                .HasColumnName("lob_name");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.RcaCode)
                .HasMaxLength(20)
                .HasColumnName("rca_code");
            entity.Property(e => e.ResignationDate)
                .HasMaxLength(20)
                .HasColumnName("resignation_date");
            entity.Property(e => e.RightExtent)
                .HasMaxLength(20)
                .HasColumnName("right_extent");
            entity.Property(e => e.RoleId)
                .HasMaxLength(20)
                .HasColumnName("role_id");
            entity.Property(e => e.SublobId)
                .HasMaxLength(20)
                .HasColumnName("sublob_id");
            entity.Property(e => e.SublobName)
                .HasMaxLength(100)
                .HasColumnName("sublob_name");
            entity.Property(e => e.UpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("updated_at");
        });

        modelBuilder.Entity<WsEmployeemasterdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_employeemasterdata");

            entity.Property(e => e.Code)
                .HasColumnType("text")
                .HasColumnName("code");
            entity.Property(e => e.Department)
                .HasColumnType("text")
                .HasColumnName("department");
            entity.Property(e => e.Designation)
                .HasColumnType("text")
                .HasColumnName("designation");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("email");
            entity.Property(e => e.Euin)
                .HasColumnType("text")
                .HasColumnName("euin");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Lob)
                .HasColumnType("text")
                .HasColumnName("lob");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasColumnType("text")
                .HasColumnName("name");
            entity.Property(e => e.ReportingManagerCode)
                .HasColumnType("text")
                .HasColumnName("reporting_manager_code");
        });

        modelBuilder.Entity<WsEntitybroker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_entitybrokers");

            entity.Property(e => e.Brokercode).HasMaxLength(50);
            entity.Property(e => e.Instrumentname).HasMaxLength(50);
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<WsEntitynamemappingdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_entitynamemappingdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Entityid).HasColumnName("entityid");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Wsentityname)
                .HasMaxLength(50)
                .HasColumnName("wsentityname");
        });

        modelBuilder.Entity<WsHeldawayassetdataTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_heldawayassetdata_test");

            entity.Property(e => e.BankAccountId)
                .HasColumnType("text")
                .HasColumnName("Bank_Account_id");
            entity.Property(e => e.BankAccountType)
                .HasColumnType("text")
                .HasColumnName("Bank_Account_type");
            entity.Property(e => e.BankCode)
                .HasColumnType("text")
                .HasColumnName("Bank_code");
            entity.Property(e => e.ClientId).HasColumnName("Client_Id");
            entity.Property(e => e.ClientName)
                .HasColumnType("text")
                .HasColumnName("Client_name");
            entity.Property(e => e.ClientSymbolCode)
                .HasColumnType("text")
                .HasColumnName("Client_symbol_code");
            entity.Property(e => e.CommitmentAmount).HasColumnName("Commitment_amount");
            entity.Property(e => e.DataType)
                .HasColumnType("text")
                .HasColumnName("Data_type");
            entity.Property(e => e.Folio)
                .HasColumnType("text")
                .HasColumnName("folio");
            entity.Property(e => e.FundSymbolCode)
                .HasColumnType("text")
                .HasColumnName("Fund_Symbol_code");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.RefCode1)
                .HasColumnType("text")
                .HasColumnName("Ref_code_1");
            entity.Property(e => e.RefCode3)
                .HasColumnType("text")
                .HasColumnName("Ref_code_3");
            entity.Property(e => e.RefCode4)
                .HasColumnType("text")
                .HasColumnName("Ref_code_4");
            entity.Property(e => e.RefCode5)
                .HasColumnType("text")
                .HasColumnName("Ref_code_5");
            entity.Property(e => e.SymbolName)
                .HasColumnType("text")
                .HasColumnName("Symbol_Name");
        });

        modelBuilder.Entity<WsHeldawayassetdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_heldawayassetdata");

            entity.Property(e => e.BankAccountId)
                .HasColumnType("text")
                .HasColumnName("Bank_Account_id");
            entity.Property(e => e.BankAccountType)
                .HasColumnType("text")
                .HasColumnName("Bank_Account_type");
            entity.Property(e => e.BankCode)
                .HasColumnType("text")
                .HasColumnName("Bank_code");
            entity.Property(e => e.ClientId).HasColumnName("Client_Id");
            entity.Property(e => e.ClientName)
                .HasColumnType("text")
                .HasColumnName("Client_name");
            entity.Property(e => e.ClientSymbolCode)
                .HasColumnType("text")
                .HasColumnName("Client_symbol_code");
            entity.Property(e => e.CommitmentAmount).HasColumnName("Commitment_amount");
            entity.Property(e => e.DataType)
                .HasColumnType("text")
                .HasColumnName("Data_type");
            entity.Property(e => e.Folio)
                .HasColumnType("text")
                .HasColumnName("folio");
            entity.Property(e => e.FundSymbolCode)
                .HasColumnType("text")
                .HasColumnName("Fund_Symbol_code");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.RefCode1)
                .HasColumnType("text")
                .HasColumnName("Ref_code_1");
            entity.Property(e => e.RefCode3)
                .HasColumnType("text")
                .HasColumnName("Ref_code_3");
            entity.Property(e => e.RefCode4)
                .HasColumnType("text")
                .HasColumnName("Ref_code_4");
            entity.Property(e => e.RefCode5)
                .HasColumnType("text")
                .HasColumnName("Ref_code_5");
            entity.Property(e => e.SymbolName)
                .HasColumnType("text")
                .HasColumnName("Symbol_Name");
        });

        modelBuilder.Entity<WsNewclientmasterdataTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_newclientmasterdata_test");

            entity.Property(e => e.AccountClosingReason)
                .HasColumnType("text")
                .HasColumnName("Account_Closing_Reason");
            entity.Property(e => e.AccountOpenDate)
                .HasColumnType("text")
                .HasColumnName("Account_Open_Date");
            entity.Property(e => e.AccountingTxn).HasColumnType("text");
            entity.Property(e => e.AccounttClosureDate)
                .HasColumnType("text")
                .HasColumnName("Accountt_Closure_Date");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Address1)
                .HasColumnType("text")
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasColumnType("text")
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Advisorid).HasColumnName("ADVISORID");
            entity.Property(e => e.Advisorname)
                .HasColumnType("text")
                .HasColumnName("ADVISORNAME");
            entity.Property(e => e.ArnName)
                .HasColumnType("text")
                .HasColumnName("ARN_Name");
            entity.Property(e => e.Arnid).HasColumnName("ARNID");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE");
            entity.Property(e => e.Branchid).HasColumnName("BRANCHID");
            entity.Property(e => e.Branchname)
                .HasColumnType("text")
                .HasColumnName("BRANCHNAME");
            entity.Property(e => e.Brokeraccountid)
                .HasColumnType("text")
                .HasColumnName("BROKERACCOUNTID");
            entity.Property(e => e.CapitalCommitted).HasColumnName("CAPITAL_COMMITTED");
            entity.Property(e => e.Chargeupto)
                .HasColumnType("text")
                .HasColumnName("CHARGEUPTO");
            entity.Property(e => e.Circle)
                .HasColumnType("text")
                .HasColumnName("CIRCLE");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.ClientBankAccount)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Account");
            entity.Property(e => e.ClientBankCode)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Code");
            entity.Property(e => e.ClientCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_AccountId");
            entity.Property(e => e.ClientCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Code");
            entity.Property(e => e.ClientCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_DP");
            entity.Property(e => e.ClientCustodySchemeCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Scheme_Code");
            entity.Property(e => e.Clientcategory)
                .HasColumnType("text")
                .HasColumnName("CLIENTCATEGORY");
            entity.Property(e => e.Clientcode)
                .HasColumnType("text")
                .HasColumnName("CLIENTCODE");
            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Clientname)
                .HasColumnType("text")
                .HasColumnName("CLIENTNAME");
            entity.Property(e => e.Clienttype)
                .HasColumnType("text")
                .HasColumnName("CLIENTTYPE");
            entity.Property(e => e.Contactname)
                .HasColumnType("text")
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Dailyexpenseaccrual)
                .HasColumnType("text")
                .HasColumnName("DAILYEXPENSEACCRUAL");
            entity.Property(e => e.Dir1mapin)
                .HasColumnType("text")
                .HasColumnName("DIR1MAPIN");
            entity.Property(e => e.Dir1name)
                .HasColumnType("text")
                .HasColumnName("DIR1NAME");
            entity.Property(e => e.Dir2mapin)
                .HasColumnType("text")
                .HasColumnName("DIR2MAPIN");
            entity.Property(e => e.Dir2name)
                .HasColumnType("text")
                .HasColumnName("DIR2NAME");
            entity.Property(e => e.Dir3mapin)
                .HasColumnType("text")
                .HasColumnName("DIR3MAPIN");
            entity.Property(e => e.Dir3name)
                .HasColumnType("text")
                .HasColumnName("DIR3NAME");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.FatherHusband)
                .HasColumnType("text")
                .HasColumnName("FATHER_HUSBAND");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Feepaymentmode)
                .HasColumnType("text")
                .HasColumnName("FEEPAYMENTMODE");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firmname)
                .HasColumnType("text")
                .HasColumnName("FIRMNAME");
            entity.Property(e => e.FirstHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("First_Holder_AADHAR");
            entity.Property(e => e.FirstHolderFatca)
                .HasColumnType("text")
                .HasColumnName("First_Holder_FATCA");
            entity.Property(e => e.FirstHolderGender)
                .HasColumnType("text")
                .HasColumnName("First_Holder_Gender");
            entity.Property(e => e.FirstHolderKyc)
                .HasColumnType("text")
                .HasColumnName("First_Holder_KYC");
            entity.Property(e => e.FirstHolderUbo)
                .HasColumnType("text")
                .HasColumnName("First_Holder_UBO");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fundmgrid).HasColumnName("FUNDMGRID");
            entity.Property(e => e.Fundmgrname)
                .HasColumnType("text")
                .HasColumnName("FUNDMGRNAME");
            entity.Property(e => e.Groupid).HasColumnName("GROUPID");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.HeadOfFamily)
                .HasColumnType("text")
                .HasColumnName("Head_of_Family");
            entity.Property(e => e.Incentive)
                .HasColumnType("text")
                .HasColumnName("INCENTIVE");
            entity.Property(e => e.IncentiveRate)
                .HasColumnType("text")
                .HasColumnName("Incentive_Rate");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediaryid).HasColumnName("INTERMEDIARYID");
            entity.Property(e => e.Intermediaryname)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARYNAME");
            entity.Property(e => e.Joint1FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT1_FATHER_HUSBAND");
            entity.Property(e => e.Joint1Name)
                .HasColumnType("text")
                .HasColumnName("JOINT1_NAME");
            entity.Property(e => e.Joint1Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT1_PAN");
            entity.Property(e => e.Joint2FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT2_FATHER_HUSBAND");
            entity.Property(e => e.Joint2Name)
                .HasColumnType("text")
                .HasColumnName("JOINT2_NAME");
            entity.Property(e => e.Joint2Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT2_PAN");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.MailAddress1)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS1");
            entity.Property(e => e.MailAddress2)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS2");
            entity.Property(e => e.MailCity)
                .HasColumnType("text")
                .HasColumnName("MAIL_CITY");
            entity.Property(e => e.MailEmailid)
                .HasColumnType("text")
                .HasColumnName("MAIL_EMAILID");
            entity.Property(e => e.MailFax)
                .HasColumnType("text")
                .HasColumnName("MAIL_FAX");
            entity.Property(e => e.MailMobile)
                .HasColumnType("text")
                .HasColumnName("MAIL_MOBILE");
            entity.Property(e => e.MailPhonehome)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEHOME");
            entity.Property(e => e.MailPhonework)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEWORK");
            entity.Property(e => e.MailPincode)
                .HasColumnType("text")
                .HasColumnName("MAIL_PINCODE");
            entity.Property(e => e.MailState)
                .HasColumnType("text")
                .HasColumnName("MAIL_STATE");
            entity.Property(e => e.Mandatebankaccountno)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTNO");
            entity.Property(e => e.Mandatebankaccounttype)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTTYPE");
            entity.Property(e => e.Mandatebankbranchname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKBRANCHNAME");
            entity.Property(e => e.Mandatebankname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKNAME");
            entity.Property(e => e.Mandatedepository)
                .HasColumnType("text")
                .HasColumnName("MANDATEDEPOSITORY");
            entity.Property(e => e.Mandatedp)
                .HasColumnType("text")
                .HasColumnName("MANDATEDP");
            entity.Property(e => e.Mandatedpclientid)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPCLIENTID");
            entity.Property(e => e.Mandatedpname)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPNAME");
            entity.Property(e => e.Mandatemicr)
                .HasColumnType("text")
                .HasColumnName("MANDATEMICR");
            entity.Property(e => e.Mandateneft)
                .HasColumnType("text")
                .HasColumnName("MANDATENEFT");
            entity.Property(e => e.Mandatertgs)
                .HasColumnType("text")
                .HasColumnName("MANDATERTGS");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.ModeOfHolding)
                .HasColumnType("text")
                .HasColumnName("Mode_of_Holding");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Ownerid).HasColumnName("OWNERID");
            entity.Property(e => e.Ownername)
                .HasColumnType("text")
                .HasColumnName("OWNERNAME");
            entity.Property(e => e.Pannumber)
                .HasColumnType("text")
                .HasColumnName("PANNUMBER");
            entity.Property(e => e.Performancereportingdate)
                .HasColumnType("text")
                .HasColumnName("PERFORMANCEREPORTINGDATE");
            entity.Property(e => e.Phonehome)
                .HasColumnType("text")
                .HasColumnName("PHONEHOME");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relmgrid).HasColumnName("RELMGRID");
            entity.Property(e => e.Rmname)
                .HasColumnType("text")
                .HasColumnName("RMNAME");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Schemeid).HasColumnName("SCHEMEID");
            entity.Property(e => e.Schemename)
                .HasColumnType("text")
                .HasColumnName("SCHEMENAME");
            entity.Property(e => e.SecondHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_AADHAR");
            entity.Property(e => e.SecondHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_AccType");
            entity.Property(e => e.SecondHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Account_No");
            entity.Property(e => e.SecondHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Name");
            entity.Property(e => e.SecondHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Branch_Name");
            entity.Property(e => e.SecondHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Depository");
            entity.Property(e => e.SecondHolderDob)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DOB");
            entity.Property(e => e.SecondHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Client_Id");
            entity.Property(e => e.SecondHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Id");
            entity.Property(e => e.SecondHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Name");
            entity.Property(e => e.SecondHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_FATCA");
            entity.Property(e => e.SecondHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Father_Husband");
            entity.Property(e => e.SecondHolderGender)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Gender");
            entity.Property(e => e.SecondHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_KYC");
            entity.Property(e => e.SecondHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Micr_Number");
            entity.Property(e => e.SecondHolderName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Name");
            entity.Property(e => e.SecondHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_NEFT_Code");
            entity.Property(e => e.SecondHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Occupation");
            entity.Property(e => e.SecondHolderPan)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Pan");
            entity.Property(e => e.SecondHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Relation");
            entity.Property(e => e.SecondHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_RTGS_Code");
            entity.Property(e => e.SecondHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Status");
            entity.Property(e => e.SecondHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_UBO");
            entity.Property(e => e.Sharereportsflag)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTSFLAG");
            entity.Property(e => e.SkipFromMfCorporateAction)
                .HasColumnType("text")
                .HasColumnName("Skip_from_MF_corporate_action");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.StttakenAs)
                .HasColumnType("text")
                .HasColumnName("STTTaken_As");
            entity.Property(e => e.Tannumber)
                .HasColumnType("text")
                .HasColumnName("TANNUMBER");
            entity.Property(e => e.Tdsonfees)
                .HasColumnType("text")
                .HasColumnName("TDSONFEES");
            entity.Property(e => e.ThirdHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_AADHAR");
            entity.Property(e => e.ThirdHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_AccType");
            entity.Property(e => e.ThirdHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Account_No");
            entity.Property(e => e.ThirdHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Name");
            entity.Property(e => e.ThirdHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Branch_Name");
            entity.Property(e => e.ThirdHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Depository");
            entity.Property(e => e.ThirdHolderDob)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DOB");
            entity.Property(e => e.ThirdHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Client_Id");
            entity.Property(e => e.ThirdHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Id");
            entity.Property(e => e.ThirdHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Name");
            entity.Property(e => e.ThirdHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_FATCA");
            entity.Property(e => e.ThirdHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Father_Husband");
            entity.Property(e => e.ThirdHolderGender)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Gender");
            entity.Property(e => e.ThirdHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_KYC");
            entity.Property(e => e.ThirdHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Micr_Number_");
            entity.Property(e => e.ThirdHolderName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Name");
            entity.Property(e => e.ThirdHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_NEFT_Code");
            entity.Property(e => e.ThirdHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Occupation");
            entity.Property(e => e.ThirdHolderPanNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Pan_No");
            entity.Property(e => e.ThirdHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Relation");
            entity.Property(e => e.ThirdHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_RTGS_Code");
            entity.Property(e => e.ThirdHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Status");
            entity.Property(e => e.ThirdHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_UBO");
            entity.Property(e => e.TradingBankAccount)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Account");
            entity.Property(e => e.TradingBankCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Code");
            entity.Property(e => e.TradingCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_AccountId");
            entity.Property(e => e.TradingCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_Code");
            entity.Property(e => e.TradingCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_DP");
            entity.Property(e => e.TrxnTakenAs)
                .HasColumnType("text")
                .HasColumnName("TrxnTaken_As");
            entity.Property(e => e.Username)
                .HasColumnType("text")
                .HasColumnName("USERNAME");
            entity.Property(e => e.Ward)
                .HasColumnType("text")
                .HasColumnName("WARD");
            entity.Property(e => e.WealthAdvisorName)
                .HasColumnType("text")
                .HasColumnName("WealthAdvisor_Name");
        });

        modelBuilder.Entity<WsOrderpushdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_orderpushdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AdvisedFlag).HasMaxLength(255);
            entity.Property(e => e.Amount).HasMaxLength(255);
            entity.Property(e => e.BrokerAcId).HasMaxLength(255);
            entity.Property(e => e.BrokerCode).HasMaxLength(255);
            entity.Property(e => e.ClientId).HasMaxLength(255);
            entity.Property(e => e.CommitmentAmount).HasMaxLength(255);
            entity.Property(e => e.Cpcode)
                .HasMaxLength(255)
                .HasColumnName("CPCode");
            entity.Property(e => e.EndDate).HasMaxLength(255);
            entity.Property(e => e.Exchange).HasMaxLength(255);
            entity.Property(e => e.Frequency).HasMaxLength(255);
            entity.Property(e => e.FullSell).HasMaxLength(255);
            entity.Property(e => e.MandateId).HasMaxLength(255);
            entity.Property(e => e.Mfplatform)
                .HasMaxLength(255)
                .HasColumnName("MFPlatform");
            entity.Property(e => e.ModeFlag).HasMaxLength(255);
            entity.Property(e => e.Note2).HasMaxLength(255);
            entity.Property(e => e.OrderDate).HasMaxLength(255);
            entity.Property(e => e.Quantity).HasMaxLength(255);
            entity.Property(e => e.Rate).HasMaxLength(255);
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.SecurityCode).HasMaxLength(255);
            entity.Property(e => e.StartDate).HasMaxLength(255);
            entity.Property(e => e.StartDay).HasMaxLength(255);
            entity.Property(e => e.SubTranType).HasMaxLength(255);
            entity.Property(e => e.SwitchIn).HasMaxLength(255);
            entity.Property(e => e.TotalInstallment).HasMaxLength(255);
            entity.Property(e => e.TransType).HasMaxLength(255);
        });

        modelBuilder.Entity<WsOrderpushdetailsdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_orderpushdetailsdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Advisedflag)
                .HasMaxLength(20)
                .HasColumnName("advisedflag");
            entity.Property(e => e.Amount)
                .HasMaxLength(20)
                .HasColumnName("amount");
            entity.Property(e => e.Brokeracid)
                .HasMaxLength(20)
                .HasColumnName("brokeracid");
            entity.Property(e => e.Brokercode)
                .HasMaxLength(20)
                .HasColumnName("brokercode");
            entity.Property(e => e.Clientid)
                .HasMaxLength(20)
                .HasColumnName("clientid");
            entity.Property(e => e.Commitmentamount)
                .HasMaxLength(20)
                .HasColumnName("commitmentamount");
            entity.Property(e => e.Cpcode)
                .HasMaxLength(20)
                .HasColumnName("cpcode");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Enddate)
                .HasMaxLength(20)
                .HasColumnName("enddate");
            entity.Property(e => e.Exchange)
                .HasMaxLength(20)
                .HasColumnName("exchange");
            entity.Property(e => e.Frequency)
                .HasMaxLength(20)
                .HasColumnName("frequency");
            entity.Property(e => e.Fullsell)
                .HasMaxLength(20)
                .HasColumnName("fullsell");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Issent)
                .HasDefaultValueSql("'0'")
                .HasColumnName("issent");
            entity.Property(e => e.Madateid)
                .HasMaxLength(20)
                .HasColumnName("madateid");
            entity.Property(e => e.Mfplatform)
                .HasMaxLength(20)
                .HasColumnName("mfplatform");
            entity.Property(e => e.Modeflag)
                .HasMaxLength(20)
                .HasColumnName("modeflag");
            entity.Property(e => e.Note2)
                .HasMaxLength(20)
                .HasColumnName("note2");
            entity.Property(e => e.Orderdate)
                .HasMaxLength(20)
                .HasColumnName("orderdate");
            entity.Property(e => e.Orderhistoryid).HasColumnName("orderhistoryid");
            entity.Property(e => e.Ordertype)
                .HasMaxLength(50)
                .HasColumnName("ordertype");
            entity.Property(e => e.Quantity)
                .HasMaxLength(20)
                .HasColumnName("quantity");
            entity.Property(e => e.Rate)
                .HasMaxLength(20)
                .HasColumnName("rate");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .HasColumnName("remark");
            entity.Property(e => e.Securitycode)
                .HasMaxLength(20)
                .HasColumnName("securitycode");
            entity.Property(e => e.Startdate)
                .HasMaxLength(20)
                .HasColumnName("startdate");
            entity.Property(e => e.Startday)
                .HasMaxLength(20)
                .HasColumnName("startday");
            entity.Property(e => e.Subtranstype)
                .HasMaxLength(20)
                .HasColumnName("subtranstype");
            entity.Property(e => e.Switchin)
                .HasMaxLength(20)
                .HasColumnName("switchin");
            entity.Property(e => e.Totalinstallment)
                .HasMaxLength(20)
                .HasColumnName("totalinstallment");
            entity.Property(e => e.Transtype)
                .HasMaxLength(20)
                .HasColumnName("transtype");
        });

        modelBuilder.Entity<WsPortfolioholdingdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_portfolioholdingdata");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Accruedinterest).HasColumnName("ACCRUEDINTEREST");
            entity.Property(e => e.Asondate)
                .HasColumnType("text")
                .HasColumnName("ASONDATE");
            entity.Property(e => e.Astcls)
                .HasColumnType("text")
                .HasColumnName("ASTCLS");
            entity.Property(e => e.Code).HasColumnName("CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.GainLossPercentage).HasColumnName("GainLoss_Percentage");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Marketrate).HasColumnName("MARKETRATE");
            entity.Property(e => e.Marketvalue).HasColumnName("MARKETVALUE");
            entity.Property(e => e.Name)
                .HasColumnType("text")
                .HasColumnName("NAME");
            entity.Property(e => e.Positionflag)
                .HasColumnType("text")
                .HasColumnName("POSITIONFLAG");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Symbolcode)
                .HasColumnType("text")
                .HasColumnName("SYMBOLCODE");
            entity.Property(e => e.Symbolname)
                .HasColumnType("text")
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Unitcost).HasColumnName("UNITCOST");
        });

        modelBuilder.Entity<WsPricedumpdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_pricedumpdata");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Bsesymbol)
                .HasColumnType("text")
                .HasColumnName("BSESYMBOL");
            entity.Property(e => e.Closeindex).HasColumnName("CLOSEINDEX");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Nseseries)
                .HasColumnType("text")
                .HasColumnName("NSESERIES");
            entity.Property(e => e.Nsesymbol)
                .HasColumnType("text")
                .HasColumnName("NSESYMBOL");
            entity.Property(e => e.Pricedate)
                .HasColumnType("text")
                .HasColumnName("PRICEDATE");
            entity.Property(e => e.PrimaryPricesource)
                .HasColumnType("text")
                .HasColumnName("PRIMARY_PRICESOURCE");
            entity.Property(e => e.PrimarySourcePrice).HasColumnName("PRIMARY_SOURCE_PRICE");
            entity.Property(e => e.SecondaryPricesource)
                .HasColumnType("text")
                .HasColumnName("SECONDARY_PRICESOURCE");
            entity.Property(e => e.SecondarySourcePrice).HasColumnName("SECONDARY_SOURCE_PRICE");
            entity.Property(e => e.Symbolcode)
                .HasColumnType("text")
                .HasColumnName("SYMBOLCODE");
        });

        modelBuilder.Entity<WsSecuritydetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_securitydetails");

            entity.HasIndex(e => new { e.Id, e.Issuer }, "_idxIssueer").HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 10 });

            entity.HasIndex(e => e.Issuer, "_idxIssueerO").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Activeind)
                .HasColumnType("text")
                .HasColumnName("ACTIVEIND");
            entity.Property(e => e.Astclsname)
                .HasColumnType("text")
                .HasColumnName("ASTCLSNAME");
            entity.Property(e => e.Bsemapping)
                .HasColumnType("text")
                .HasColumnName("BSEMAPPING");
            entity.Property(e => e.Classify1)
                .HasColumnType("text")
                .HasColumnName("CLASSIFY1");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Detailtypename)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPENAME");
            entity.Property(e => e.Dimcode1)
                .HasColumnType("text")
                .HasColumnName("DIMCODE1");
            entity.Property(e => e.Dimcode10)
                .HasColumnType("text")
                .HasColumnName("DIMCODE10");
            entity.Property(e => e.Dimcode11)
                .HasColumnType("text")
                .HasColumnName("DIMCODE11");
            entity.Property(e => e.Dimcode12)
                .HasColumnType("text")
                .HasColumnName("DIMCODE12");
            entity.Property(e => e.Dimcode13)
                .HasColumnType("text")
                .HasColumnName("DIMCODE13");
            entity.Property(e => e.Dimcode14)
                .HasColumnType("text")
                .HasColumnName("DIMCODE14");
            entity.Property(e => e.Dimcode15)
                .HasColumnType("text")
                .HasColumnName("DIMCODE15");
            entity.Property(e => e.Dimcode16)
                .HasColumnType("text")
                .HasColumnName("DIMCODE16");
            entity.Property(e => e.Dimcode17)
                .HasColumnType("text")
                .HasColumnName("DIMCODE17");
            entity.Property(e => e.Dimcode18)
                .HasColumnType("text")
                .HasColumnName("DIMCODE18");
            entity.Property(e => e.Dimcode19)
                .HasColumnType("text")
                .HasColumnName("DIMCODE19");
            entity.Property(e => e.Dimcode2)
                .HasColumnType("text")
                .HasColumnName("DIMCODE2");
            entity.Property(e => e.Dimcode20)
                .HasColumnType("text")
                .HasColumnName("DIMCODE20");
            entity.Property(e => e.Dimcode21)
                .HasColumnType("text")
                .HasColumnName("DIMCODE21");
            entity.Property(e => e.Dimcode22)
                .HasColumnType("text")
                .HasColumnName("DIMCODE22");
            entity.Property(e => e.Dimcode23)
                .HasColumnType("text")
                .HasColumnName("DIMCODE23");
            entity.Property(e => e.Dimcode24)
                .HasColumnType("text")
                .HasColumnName("DIMCODE24");
            entity.Property(e => e.Dimcode25)
                .HasColumnType("text")
                .HasColumnName("DIMCODE25");
            entity.Property(e => e.Dimcode3)
                .HasColumnType("text")
                .HasColumnName("DIMCODE3");
            entity.Property(e => e.Dimcode4)
                .HasColumnType("text")
                .HasColumnName("DIMCODE4");
            entity.Property(e => e.Dimcode5)
                .HasColumnType("text")
                .HasColumnName("DIMCODE5");
            entity.Property(e => e.Dimcode6)
                .HasColumnType("text")
                .HasColumnName("DIMCODE6");
            entity.Property(e => e.Dimcode7)
                .HasColumnType("text")
                .HasColumnName("DIMCODE7");
            entity.Property(e => e.Dimcode8)
                .HasColumnType("text")
                .HasColumnName("DIMCODE8");
            entity.Property(e => e.Dimcode9)
                .HasColumnType("text")
                .HasColumnName("DIMCODE9");
            entity.Property(e => e.Dimname1)
                .HasColumnType("text")
                .HasColumnName("DIMNAME1");
            entity.Property(e => e.Dimname10)
                .HasColumnType("text")
                .HasColumnName("DIMNAME10");
            entity.Property(e => e.Dimname11)
                .HasColumnType("text")
                .HasColumnName("DIMNAME11");
            entity.Property(e => e.Dimname12)
                .HasColumnType("text")
                .HasColumnName("DIMNAME12");
            entity.Property(e => e.Dimname13)
                .HasColumnType("text")
                .HasColumnName("DIMNAME13");
            entity.Property(e => e.Dimname14)
                .HasColumnType("text")
                .HasColumnName("DIMNAME14");
            entity.Property(e => e.Dimname15)
                .HasColumnType("text")
                .HasColumnName("DIMNAME15");
            entity.Property(e => e.Dimname16)
                .HasColumnType("text")
                .HasColumnName("DIMNAME16");
            entity.Property(e => e.Dimname17)
                .HasColumnType("text")
                .HasColumnName("DIMNAME17");
            entity.Property(e => e.Dimname18)
                .HasColumnType("text")
                .HasColumnName("DIMNAME18");
            entity.Property(e => e.Dimname19)
                .HasColumnType("text")
                .HasColumnName("DIMNAME19");
            entity.Property(e => e.Dimname2)
                .HasColumnType("text")
                .HasColumnName("DIMNAME2");
            entity.Property(e => e.Dimname20)
                .HasColumnType("text")
                .HasColumnName("DIMNAME20");
            entity.Property(e => e.Dimname21)
                .HasColumnType("text")
                .HasColumnName("DIMNAME21");
            entity.Property(e => e.Dimname22)
                .HasColumnType("text")
                .HasColumnName("DIMNAME22");
            entity.Property(e => e.Dimname23)
                .HasColumnType("text")
                .HasColumnName("DIMNAME23");
            entity.Property(e => e.Dimname24)
                .HasColumnType("text")
                .HasColumnName("DIMNAME24");
            entity.Property(e => e.Dimname25)
                .HasColumnType("text")
                .HasColumnName("DIMNAME25");
            entity.Property(e => e.Dimname3)
                .HasColumnType("text")
                .HasColumnName("DIMNAME3");
            entity.Property(e => e.Dimname4)
                .HasColumnType("text")
                .HasColumnName("DIMNAME4");
            entity.Property(e => e.Dimname5)
                .HasColumnType("text")
                .HasColumnName("DIMNAME5");
            entity.Property(e => e.Dimname6)
                .HasColumnType("text")
                .HasColumnName("DIMNAME6");
            entity.Property(e => e.Dimname7)
                .HasColumnType("text")
                .HasColumnName("DIMNAME7");
            entity.Property(e => e.Dimname8)
                .HasColumnType("text")
                .HasColumnName("DIMNAME8");
            entity.Property(e => e.Dimname9)
                .HasColumnType("text")
                .HasColumnName("DIMNAME9");
            entity.Property(e => e.Expirydate)
                .HasColumnType("text")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Faceval)
                .HasColumnType("text")
                .HasColumnName("FACEVAL");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Internalsymbol2)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOL2");
            entity.Property(e => e.Internalsymbolcode)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOLCODE");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Issuer)
                .HasColumnType("text")
                .HasColumnName("ISSUER");
            entity.Property(e => e.MaturitydateFmp)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_FMP");
            entity.Property(e => e.MaturitydateIntfund)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_INTFUND");
            entity.Property(e => e.Nsemapping)
                .HasColumnType("text")
                .HasColumnName("NSEMAPPING");
            entity.Property(e => e.Nseseries)
                .HasColumnType("text")
                .HasColumnName("NSESERIES");
            entity.Property(e => e.Rbisymbol)
                .HasColumnType("text")
                .HasColumnName("RBISYMBOL");
            entity.Property(e => e.Refsymbol)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL");
            entity.Property(e => e.Refsymbol1)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL1");
            entity.Property(e => e.Refsymbol10)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL10");
            entity.Property(e => e.Refsymbol5)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL5");
            entity.Property(e => e.Refsymbol6)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL6");
            entity.Property(e => e.Roundlot)
                .HasColumnType("text")
                .HasColumnName("ROUNDLOT");
            entity.Property(e => e.Sectorname)
                .HasColumnType("text")
                .HasColumnName("SECTORNAME");
            entity.Property(e => e.Sedolcode)
                .HasColumnType("text")
                .HasColumnName("SEDOLCODE");
            entity.Property(e => e.Sharecapital)
                .HasColumnType("text")
                .HasColumnName("SHARECAPITAL");
            entity.Property(e => e.Strikeprice)
                .HasColumnType("text")
                .HasColumnName("STRIKEPRICE");
            entity.Property(e => e.Symbolflag)
                .HasColumnType("text")
                .HasColumnName("SYMBOLFLAG");
            entity.Property(e => e.Symbolid)
                .HasColumnType("text")
                .HasColumnName("SYMBOLID");
            entity.Property(e => e.Symbolname)
                .HasColumnType("text")
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Symtypename)
                .HasColumnType("text")
                .HasColumnName("SYMTYPENAME");
        });

        modelBuilder.Entity<WsSecuritydetails1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_securitydetails1");

            entity.Property(e => e.Activeind)
                .HasColumnType("text")
                .HasColumnName("ACTIVEIND");
            entity.Property(e => e.Astclsname)
                .HasColumnType("text")
                .HasColumnName("ASTCLSNAME");
            entity.Property(e => e.Bsemapping)
                .HasColumnType("text")
                .HasColumnName("BSEMAPPING");
            entity.Property(e => e.Classify1)
                .HasColumnType("text")
                .HasColumnName("CLASSIFY1");
            entity.Property(e => e.Detailtypename)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPENAME");
            entity.Property(e => e.Dimcode1)
                .HasColumnType("text")
                .HasColumnName("DIMCODE1");
            entity.Property(e => e.Dimcode10)
                .HasColumnType("text")
                .HasColumnName("DIMCODE10");
            entity.Property(e => e.Dimcode11)
                .HasColumnType("text")
                .HasColumnName("DIMCODE11");
            entity.Property(e => e.Dimcode12)
                .HasColumnType("text")
                .HasColumnName("DIMCODE12");
            entity.Property(e => e.Dimcode13)
                .HasColumnType("text")
                .HasColumnName("DIMCODE13");
            entity.Property(e => e.Dimcode14)
                .HasColumnType("text")
                .HasColumnName("DIMCODE14");
            entity.Property(e => e.Dimcode15)
                .HasColumnType("text")
                .HasColumnName("DIMCODE15");
            entity.Property(e => e.Dimcode16)
                .HasColumnType("text")
                .HasColumnName("DIMCODE16");
            entity.Property(e => e.Dimcode17)
                .HasColumnType("text")
                .HasColumnName("DIMCODE17");
            entity.Property(e => e.Dimcode18)
                .HasColumnType("text")
                .HasColumnName("DIMCODE18");
            entity.Property(e => e.Dimcode19)
                .HasColumnType("text")
                .HasColumnName("DIMCODE19");
            entity.Property(e => e.Dimcode2)
                .HasColumnType("text")
                .HasColumnName("DIMCODE2");
            entity.Property(e => e.Dimcode20)
                .HasColumnType("text")
                .HasColumnName("DIMCODE20");
            entity.Property(e => e.Dimcode21)
                .HasColumnType("text")
                .HasColumnName("DIMCODE21");
            entity.Property(e => e.Dimcode22)
                .HasColumnType("text")
                .HasColumnName("DIMCODE22");
            entity.Property(e => e.Dimcode23)
                .HasColumnType("text")
                .HasColumnName("DIMCODE23");
            entity.Property(e => e.Dimcode24)
                .HasColumnType("text")
                .HasColumnName("DIMCODE24");
            entity.Property(e => e.Dimcode25)
                .HasColumnType("text")
                .HasColumnName("DIMCODE25");
            entity.Property(e => e.Dimcode3)
                .HasColumnType("text")
                .HasColumnName("DIMCODE3");
            entity.Property(e => e.Dimcode4)
                .HasColumnType("text")
                .HasColumnName("DIMCODE4");
            entity.Property(e => e.Dimcode5)
                .HasColumnType("text")
                .HasColumnName("DIMCODE5");
            entity.Property(e => e.Dimcode6)
                .HasColumnType("text")
                .HasColumnName("DIMCODE6");
            entity.Property(e => e.Dimcode7)
                .HasColumnType("text")
                .HasColumnName("DIMCODE7");
            entity.Property(e => e.Dimcode8)
                .HasColumnType("text")
                .HasColumnName("DIMCODE8");
            entity.Property(e => e.Dimcode9)
                .HasColumnType("text")
                .HasColumnName("DIMCODE9");
            entity.Property(e => e.Dimname1)
                .HasColumnType("text")
                .HasColumnName("DIMNAME1");
            entity.Property(e => e.Dimname10)
                .HasColumnType("text")
                .HasColumnName("DIMNAME10");
            entity.Property(e => e.Dimname11)
                .HasColumnType("text")
                .HasColumnName("DIMNAME11");
            entity.Property(e => e.Dimname12)
                .HasColumnType("text")
                .HasColumnName("DIMNAME12");
            entity.Property(e => e.Dimname13)
                .HasColumnType("text")
                .HasColumnName("DIMNAME13");
            entity.Property(e => e.Dimname14)
                .HasColumnType("text")
                .HasColumnName("DIMNAME14");
            entity.Property(e => e.Dimname15)
                .HasColumnType("text")
                .HasColumnName("DIMNAME15");
            entity.Property(e => e.Dimname16)
                .HasColumnType("text")
                .HasColumnName("DIMNAME16");
            entity.Property(e => e.Dimname17)
                .HasColumnType("text")
                .HasColumnName("DIMNAME17");
            entity.Property(e => e.Dimname18)
                .HasColumnType("text")
                .HasColumnName("DIMNAME18");
            entity.Property(e => e.Dimname19)
                .HasColumnType("text")
                .HasColumnName("DIMNAME19");
            entity.Property(e => e.Dimname2)
                .HasColumnType("text")
                .HasColumnName("DIMNAME2");
            entity.Property(e => e.Dimname20)
                .HasColumnType("text")
                .HasColumnName("DIMNAME20");
            entity.Property(e => e.Dimname21)
                .HasColumnType("text")
                .HasColumnName("DIMNAME21");
            entity.Property(e => e.Dimname22)
                .HasColumnType("text")
                .HasColumnName("DIMNAME22");
            entity.Property(e => e.Dimname23)
                .HasColumnType("text")
                .HasColumnName("DIMNAME23");
            entity.Property(e => e.Dimname24)
                .HasColumnType("text")
                .HasColumnName("DIMNAME24");
            entity.Property(e => e.Dimname25)
                .HasColumnType("text")
                .HasColumnName("DIMNAME25");
            entity.Property(e => e.Dimname3)
                .HasColumnType("text")
                .HasColumnName("DIMNAME3");
            entity.Property(e => e.Dimname4)
                .HasColumnType("text")
                .HasColumnName("DIMNAME4");
            entity.Property(e => e.Dimname5)
                .HasColumnType("text")
                .HasColumnName("DIMNAME5");
            entity.Property(e => e.Dimname6)
                .HasColumnType("text")
                .HasColumnName("DIMNAME6");
            entity.Property(e => e.Dimname7)
                .HasColumnType("text")
                .HasColumnName("DIMNAME7");
            entity.Property(e => e.Dimname8)
                .HasColumnType("text")
                .HasColumnName("DIMNAME8");
            entity.Property(e => e.Dimname9)
                .HasColumnType("text")
                .HasColumnName("DIMNAME9");
            entity.Property(e => e.Expirydate)
                .HasColumnType("text")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Faceval).HasColumnName("FACEVAL");
            entity.Property(e => e.Internalsymbol2)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOL2");
            entity.Property(e => e.Internalsymbolcode)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOLCODE");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Issuer)
                .HasColumnType("text")
                .HasColumnName("ISSUER");
            entity.Property(e => e.MaturitydateFmp)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_FMP");
            entity.Property(e => e.MaturitydateIntfund)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_INTFUND");
            entity.Property(e => e.Nsemapping)
                .HasColumnType("text")
                .HasColumnName("NSEMAPPING");
            entity.Property(e => e.Nseseries)
                .HasColumnType("text")
                .HasColumnName("NSESERIES");
            entity.Property(e => e.Rbisymbol)
                .HasColumnType("text")
                .HasColumnName("RBISYMBOL");
            entity.Property(e => e.Refsymbol)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL");
            entity.Property(e => e.Refsymbol1)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL1");
            entity.Property(e => e.Refsymbol10)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL10");
            entity.Property(e => e.Refsymbol5)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL5");
            entity.Property(e => e.Refsymbol6)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL6");
            entity.Property(e => e.Roundlot).HasColumnName("ROUNDLOT");
            entity.Property(e => e.Sectorname)
                .HasColumnType("text")
                .HasColumnName("SECTORNAME");
            entity.Property(e => e.Sedolcode)
                .HasColumnType("text")
                .HasColumnName("SEDOLCODE");
            entity.Property(e => e.Sharecapital).HasColumnName("SHARECAPITAL");
            entity.Property(e => e.Strikeprice).HasColumnName("STRIKEPRICE");
            entity.Property(e => e.Symbolflag)
                .HasColumnType("text")
                .HasColumnName("SYMBOLFLAG");
            entity.Property(e => e.Symbolid)
                .HasColumnType("text")
                .HasColumnName("SYMBOLID");
            entity.Property(e => e.Symbolname)
                .HasColumnType("text")
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Symtypename)
                .HasColumnType("text")
                .HasColumnName("SYMTYPENAME");
        });

        modelBuilder.Entity<WsSecuritydetails17122024>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_securitydetails_17122024");

            entity.HasIndex(e => new { e.Id, e.Issuer }, "_idxIssueer").HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 10 });

            entity.HasIndex(e => e.Issuer, "_idxIssueerO").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Activeind)
                .HasColumnType("text")
                .HasColumnName("ACTIVEIND");
            entity.Property(e => e.Astclsname)
                .HasColumnType("text")
                .HasColumnName("ASTCLSNAME");
            entity.Property(e => e.Bsemapping)
                .HasColumnType("text")
                .HasColumnName("BSEMAPPING");
            entity.Property(e => e.Classify1)
                .HasColumnType("text")
                .HasColumnName("CLASSIFY1");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Detailtypename)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPENAME");
            entity.Property(e => e.Dimcode1)
                .HasColumnType("text")
                .HasColumnName("DIMCODE1");
            entity.Property(e => e.Dimcode10)
                .HasColumnType("text")
                .HasColumnName("DIMCODE10");
            entity.Property(e => e.Dimcode11)
                .HasColumnType("text")
                .HasColumnName("DIMCODE11");
            entity.Property(e => e.Dimcode12)
                .HasColumnType("text")
                .HasColumnName("DIMCODE12");
            entity.Property(e => e.Dimcode13)
                .HasColumnType("text")
                .HasColumnName("DIMCODE13");
            entity.Property(e => e.Dimcode14)
                .HasColumnType("text")
                .HasColumnName("DIMCODE14");
            entity.Property(e => e.Dimcode15)
                .HasColumnType("text")
                .HasColumnName("DIMCODE15");
            entity.Property(e => e.Dimcode16)
                .HasColumnType("text")
                .HasColumnName("DIMCODE16");
            entity.Property(e => e.Dimcode17)
                .HasColumnType("text")
                .HasColumnName("DIMCODE17");
            entity.Property(e => e.Dimcode18)
                .HasColumnType("text")
                .HasColumnName("DIMCODE18");
            entity.Property(e => e.Dimcode19)
                .HasColumnType("text")
                .HasColumnName("DIMCODE19");
            entity.Property(e => e.Dimcode2)
                .HasColumnType("text")
                .HasColumnName("DIMCODE2");
            entity.Property(e => e.Dimcode20)
                .HasColumnType("text")
                .HasColumnName("DIMCODE20");
            entity.Property(e => e.Dimcode21)
                .HasColumnType("text")
                .HasColumnName("DIMCODE21");
            entity.Property(e => e.Dimcode22)
                .HasColumnType("text")
                .HasColumnName("DIMCODE22");
            entity.Property(e => e.Dimcode23)
                .HasColumnType("text")
                .HasColumnName("DIMCODE23");
            entity.Property(e => e.Dimcode24)
                .HasColumnType("text")
                .HasColumnName("DIMCODE24");
            entity.Property(e => e.Dimcode25)
                .HasColumnType("text")
                .HasColumnName("DIMCODE25");
            entity.Property(e => e.Dimcode3)
                .HasColumnType("text")
                .HasColumnName("DIMCODE3");
            entity.Property(e => e.Dimcode4)
                .HasColumnType("text")
                .HasColumnName("DIMCODE4");
            entity.Property(e => e.Dimcode5)
                .HasColumnType("text")
                .HasColumnName("DIMCODE5");
            entity.Property(e => e.Dimcode6)
                .HasColumnType("text")
                .HasColumnName("DIMCODE6");
            entity.Property(e => e.Dimcode7)
                .HasColumnType("text")
                .HasColumnName("DIMCODE7");
            entity.Property(e => e.Dimcode8)
                .HasColumnType("text")
                .HasColumnName("DIMCODE8");
            entity.Property(e => e.Dimcode9)
                .HasColumnType("text")
                .HasColumnName("DIMCODE9");
            entity.Property(e => e.Dimname1)
                .HasColumnType("text")
                .HasColumnName("DIMNAME1");
            entity.Property(e => e.Dimname10)
                .HasColumnType("text")
                .HasColumnName("DIMNAME10");
            entity.Property(e => e.Dimname11)
                .HasColumnType("text")
                .HasColumnName("DIMNAME11");
            entity.Property(e => e.Dimname12)
                .HasColumnType("text")
                .HasColumnName("DIMNAME12");
            entity.Property(e => e.Dimname13)
                .HasColumnType("text")
                .HasColumnName("DIMNAME13");
            entity.Property(e => e.Dimname14)
                .HasColumnType("text")
                .HasColumnName("DIMNAME14");
            entity.Property(e => e.Dimname15)
                .HasColumnType("text")
                .HasColumnName("DIMNAME15");
            entity.Property(e => e.Dimname16)
                .HasColumnType("text")
                .HasColumnName("DIMNAME16");
            entity.Property(e => e.Dimname17)
                .HasColumnType("text")
                .HasColumnName("DIMNAME17");
            entity.Property(e => e.Dimname18)
                .HasColumnType("text")
                .HasColumnName("DIMNAME18");
            entity.Property(e => e.Dimname19)
                .HasColumnType("text")
                .HasColumnName("DIMNAME19");
            entity.Property(e => e.Dimname2)
                .HasColumnType("text")
                .HasColumnName("DIMNAME2");
            entity.Property(e => e.Dimname20)
                .HasColumnType("text")
                .HasColumnName("DIMNAME20");
            entity.Property(e => e.Dimname21)
                .HasColumnType("text")
                .HasColumnName("DIMNAME21");
            entity.Property(e => e.Dimname22)
                .HasColumnType("text")
                .HasColumnName("DIMNAME22");
            entity.Property(e => e.Dimname23)
                .HasColumnType("text")
                .HasColumnName("DIMNAME23");
            entity.Property(e => e.Dimname24)
                .HasColumnType("text")
                .HasColumnName("DIMNAME24");
            entity.Property(e => e.Dimname25)
                .HasColumnType("text")
                .HasColumnName("DIMNAME25");
            entity.Property(e => e.Dimname3)
                .HasColumnType("text")
                .HasColumnName("DIMNAME3");
            entity.Property(e => e.Dimname4)
                .HasColumnType("text")
                .HasColumnName("DIMNAME4");
            entity.Property(e => e.Dimname5)
                .HasColumnType("text")
                .HasColumnName("DIMNAME5");
            entity.Property(e => e.Dimname6)
                .HasColumnType("text")
                .HasColumnName("DIMNAME6");
            entity.Property(e => e.Dimname7)
                .HasColumnType("text")
                .HasColumnName("DIMNAME7");
            entity.Property(e => e.Dimname8)
                .HasColumnType("text")
                .HasColumnName("DIMNAME8");
            entity.Property(e => e.Dimname9)
                .HasColumnType("text")
                .HasColumnName("DIMNAME9");
            entity.Property(e => e.Expirydate)
                .HasColumnType("text")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Faceval)
                .HasColumnType("text")
                .HasColumnName("FACEVAL");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Internalsymbol2)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOL2");
            entity.Property(e => e.Internalsymbolcode)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOLCODE");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Issuer)
                .HasColumnType("text")
                .HasColumnName("ISSUER");
            entity.Property(e => e.MaturitydateFmp)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_FMP");
            entity.Property(e => e.MaturitydateIntfund)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_INTFUND");
            entity.Property(e => e.Nsemapping)
                .HasColumnType("text")
                .HasColumnName("NSEMAPPING");
            entity.Property(e => e.Nseseries)
                .HasColumnType("text")
                .HasColumnName("NSESERIES");
            entity.Property(e => e.Rbisymbol)
                .HasColumnType("text")
                .HasColumnName("RBISYMBOL");
            entity.Property(e => e.Refsymbol)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL");
            entity.Property(e => e.Refsymbol1)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL1");
            entity.Property(e => e.Refsymbol10)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL10");
            entity.Property(e => e.Refsymbol5)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL5");
            entity.Property(e => e.Refsymbol6)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL6");
            entity.Property(e => e.Roundlot)
                .HasColumnType("text")
                .HasColumnName("ROUNDLOT");
            entity.Property(e => e.Sectorname)
                .HasColumnType("text")
                .HasColumnName("SECTORNAME");
            entity.Property(e => e.Sedolcode)
                .HasColumnType("text")
                .HasColumnName("SEDOLCODE");
            entity.Property(e => e.Sharecapital)
                .HasColumnType("text")
                .HasColumnName("SHARECAPITAL");
            entity.Property(e => e.Strikeprice)
                .HasColumnType("text")
                .HasColumnName("STRIKEPRICE");
            entity.Property(e => e.Symbolflag)
                .HasColumnType("text")
                .HasColumnName("SYMBOLFLAG");
            entity.Property(e => e.Symbolid)
                .HasColumnType("text")
                .HasColumnName("SYMBOLID");
            entity.Property(e => e.Symbolname)
                .HasColumnType("text")
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Symtypename)
                .HasColumnType("text")
                .HasColumnName("SYMTYPENAME");
        });

        modelBuilder.Entity<WsSecuritydetailsUpdated>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_securitydetails_updated");

            entity.Property(e => e.Activeind)
                .HasColumnType("text")
                .HasColumnName("ACTIVEIND");
            entity.Property(e => e.Astclsname)
                .HasColumnType("text")
                .HasColumnName("ASTCLSNAME");
            entity.Property(e => e.Bsemapping)
                .HasColumnType("text")
                .HasColumnName("BSEMAPPING");
            entity.Property(e => e.Classify1).HasMaxLength(500);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Detailtypename)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPENAME");
            entity.Property(e => e.Dimcode1)
                .HasColumnType("text")
                .HasColumnName("DIMCODE1");
            entity.Property(e => e.Dimcode10)
                .HasColumnType("text")
                .HasColumnName("DIMCODE10");
            entity.Property(e => e.Dimcode11)
                .HasColumnType("text")
                .HasColumnName("DIMCODE11");
            entity.Property(e => e.Dimcode12)
                .HasColumnType("text")
                .HasColumnName("DIMCODE12");
            entity.Property(e => e.Dimcode13)
                .HasColumnType("text")
                .HasColumnName("DIMCODE13");
            entity.Property(e => e.Dimcode14)
                .HasColumnType("text")
                .HasColumnName("DIMCODE14");
            entity.Property(e => e.Dimcode15)
                .HasColumnType("text")
                .HasColumnName("DIMCODE15");
            entity.Property(e => e.Dimcode16)
                .HasColumnType("text")
                .HasColumnName("DIMCODE16");
            entity.Property(e => e.Dimcode17)
                .HasColumnType("text")
                .HasColumnName("DIMCODE17");
            entity.Property(e => e.Dimcode18)
                .HasColumnType("text")
                .HasColumnName("DIMCODE18");
            entity.Property(e => e.Dimcode19)
                .HasColumnType("text")
                .HasColumnName("DIMCODE19");
            entity.Property(e => e.Dimcode2)
                .HasColumnType("text")
                .HasColumnName("DIMCODE2");
            entity.Property(e => e.Dimcode20)
                .HasColumnType("text")
                .HasColumnName("DIMCODE20");
            entity.Property(e => e.Dimcode21)
                .HasColumnType("text")
                .HasColumnName("DIMCODE21");
            entity.Property(e => e.Dimcode22)
                .HasColumnType("text")
                .HasColumnName("DIMCODE22");
            entity.Property(e => e.Dimcode23)
                .HasColumnType("text")
                .HasColumnName("DIMCODE23");
            entity.Property(e => e.Dimcode24)
                .HasColumnType("text")
                .HasColumnName("DIMCODE24");
            entity.Property(e => e.Dimcode25)
                .HasColumnType("text")
                .HasColumnName("DIMCODE25");
            entity.Property(e => e.Dimcode3)
                .HasColumnType("text")
                .HasColumnName("DIMCODE3");
            entity.Property(e => e.Dimcode4)
                .HasColumnType("text")
                .HasColumnName("DIMCODE4");
            entity.Property(e => e.Dimcode5)
                .HasColumnType("text")
                .HasColumnName("DIMCODE5");
            entity.Property(e => e.Dimcode6)
                .HasColumnType("text")
                .HasColumnName("DIMCODE6");
            entity.Property(e => e.Dimcode7)
                .HasColumnType("text")
                .HasColumnName("DIMCODE7");
            entity.Property(e => e.Dimcode8)
                .HasColumnType("text")
                .HasColumnName("DIMCODE8");
            entity.Property(e => e.Dimcode9)
                .HasColumnType("text")
                .HasColumnName("DIMCODE9");
            entity.Property(e => e.Dimname1)
                .HasColumnType("text")
                .HasColumnName("DIMNAME1");
            entity.Property(e => e.Dimname10)
                .HasColumnType("text")
                .HasColumnName("DIMNAME10");
            entity.Property(e => e.Dimname11)
                .HasColumnType("text")
                .HasColumnName("DIMNAME11");
            entity.Property(e => e.Dimname12)
                .HasColumnType("text")
                .HasColumnName("DIMNAME12");
            entity.Property(e => e.Dimname13)
                .HasColumnType("text")
                .HasColumnName("DIMNAME13");
            entity.Property(e => e.Dimname14)
                .HasColumnType("text")
                .HasColumnName("DIMNAME14");
            entity.Property(e => e.Dimname15)
                .HasColumnType("text")
                .HasColumnName("DIMNAME15");
            entity.Property(e => e.Dimname16)
                .HasColumnType("text")
                .HasColumnName("DIMNAME16");
            entity.Property(e => e.Dimname17)
                .HasColumnType("text")
                .HasColumnName("DIMNAME17");
            entity.Property(e => e.Dimname18)
                .HasColumnType("text")
                .HasColumnName("DIMNAME18");
            entity.Property(e => e.Dimname19)
                .HasColumnType("text")
                .HasColumnName("DIMNAME19");
            entity.Property(e => e.Dimname2)
                .HasColumnType("text")
                .HasColumnName("DIMNAME2");
            entity.Property(e => e.Dimname20)
                .HasColumnType("text")
                .HasColumnName("DIMNAME20");
            entity.Property(e => e.Dimname21)
                .HasColumnType("text")
                .HasColumnName("DIMNAME21");
            entity.Property(e => e.Dimname22)
                .HasColumnType("text")
                .HasColumnName("DIMNAME22");
            entity.Property(e => e.Dimname23)
                .HasColumnType("text")
                .HasColumnName("DIMNAME23");
            entity.Property(e => e.Dimname24)
                .HasColumnType("text")
                .HasColumnName("DIMNAME24");
            entity.Property(e => e.Dimname25)
                .HasColumnType("text")
                .HasColumnName("DIMNAME25");
            entity.Property(e => e.Dimname3)
                .HasColumnType("text")
                .HasColumnName("DIMNAME3");
            entity.Property(e => e.Dimname4)
                .HasColumnType("text")
                .HasColumnName("DIMNAME4");
            entity.Property(e => e.Dimname5)
                .HasColumnType("text")
                .HasColumnName("DIMNAME5");
            entity.Property(e => e.Dimname6)
                .HasColumnType("text")
                .HasColumnName("DIMNAME6");
            entity.Property(e => e.Dimname7)
                .HasColumnType("text")
                .HasColumnName("DIMNAME7");
            entity.Property(e => e.Dimname8)
                .HasColumnType("text")
                .HasColumnName("DIMNAME8");
            entity.Property(e => e.Dimname9)
                .HasColumnType("text")
                .HasColumnName("DIMNAME9");
            entity.Property(e => e.Expirydate)
                .HasColumnType("text")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Faceval)
                .HasColumnType("text")
                .HasColumnName("FACEVAL");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Internalsymbol2)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOL2");
            entity.Property(e => e.Internalsymbolcode)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOLCODE");
            entity.Property(e => e.Isincode)
                .HasMaxLength(20)
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Issuer)
                .HasColumnType("text")
                .HasColumnName("ISSUER");
            entity.Property(e => e.MaturitydateFmp)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_FMP");
            entity.Property(e => e.MaturitydateIntfund)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_INTFUND");
            entity.Property(e => e.Nsemapping)
                .HasColumnType("text")
                .HasColumnName("NSEMAPPING");
            entity.Property(e => e.Nseseries)
                .HasColumnType("text")
                .HasColumnName("NSESERIES");
            entity.Property(e => e.Rbisymbol)
                .HasColumnType("text")
                .HasColumnName("RBISYMBOL");
            entity.Property(e => e.Refsymbol)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL");
            entity.Property(e => e.Refsymbol1)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL1");
            entity.Property(e => e.Refsymbol10)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL10");
            entity.Property(e => e.Refsymbol5)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL5");
            entity.Property(e => e.Refsymbol6)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL6");
            entity.Property(e => e.Roundlot)
                .HasColumnType("text")
                .HasColumnName("ROUNDLOT");
            entity.Property(e => e.Sectorname)
                .HasColumnType("text")
                .HasColumnName("SECTORNAME");
            entity.Property(e => e.Sedolcode)
                .HasColumnType("text")
                .HasColumnName("SEDOLCODE");
            entity.Property(e => e.Sharecapital)
                .HasColumnType("text")
                .HasColumnName("SHARECAPITAL");
            entity.Property(e => e.Strikeprice)
                .HasColumnType("text")
                .HasColumnName("STRIKEPRICE");
            entity.Property(e => e.Symbolflag)
                .HasColumnType("text")
                .HasColumnName("SYMBOLFLAG");
            entity.Property(e => e.Symbolid)
                .HasMaxLength(20)
                .HasColumnName("SYMBOLID");
            entity.Property(e => e.Symbolname)
                .HasMaxLength(500)
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Symtypename)
                .HasColumnType("text")
                .HasColumnName("SYMTYPENAME");
        });

        modelBuilder.Entity<WsStagingBankaccountdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_bankaccountdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BankBranch)
                .HasMaxLength(100)
                .HasColumnName("BANK_BRANCH");
            entity.Property(e => e.Bankaccount)
                .HasMaxLength(100)
                .HasColumnName("BANKACCOUNT");
            entity.Property(e => e.Bankactype)
                .HasMaxLength(100)
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankcode)
                .HasMaxLength(100)
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankname)
                .HasMaxLength(100)
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Cashsymbol)
                .HasMaxLength(100)
                .HasColumnName("CASHSYMBOL");
            entity.Property(e => e.Clientid)
                .HasMaxLength(100)
                .HasColumnName("CLIENTID");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
        });

        modelBuilder.Entity<WsStagingBankaccounttypesdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_bankaccounttypesdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accounttype)
                .HasMaxLength(10)
                .HasColumnName("accounttype");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
        });

        modelBuilder.Entity<WsStagingBankdetailsdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_bankdetailsdata");

            entity.Property(e => e.BankAccountNumber).HasMaxLength(30);
            entity.Property(e => e.BankAccountType).HasMaxLength(20);
            entity.Property(e => e.BankBranchName).HasMaxLength(100);
            entity.Property(e => e.BankIfsc).HasMaxLength(20);
            entity.Property(e => e.BankMicr).HasMaxLength(20);
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.BankRtgs).HasMaxLength(30);
            entity.Property(e => e.ClientCode).HasMaxLength(10);
            entity.Property(e => e.ClientId).HasMaxLength(10);
            entity.Property(e => e.GroupId).HasMaxLength(10);
            entity.Property(e => e.IsPoa).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsPrimary).HasDefaultValueSql("'1'");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.OwnerId).HasMaxLength(10);
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<WsStagingBankercsomappingdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_bankercsomappingdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BankerCode)
                .HasColumnType("text")
                .HasColumnName("banker_code");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("createdon");
            entity.Property(e => e.CsoCode)
                .HasColumnType("text")
                .HasColumnName("cso_code");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
        });

        modelBuilder.Entity<WsStagingBseschememaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_bseschememaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AmcName).HasColumnType("text");
            entity.Property(e => e.AmcschemeCode)
                .HasColumnType("text")
                .HasColumnName("AMCSchemeCode");
            entity.Property(e => e.EndDate).HasColumnType("text");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.IsinCode).HasColumnType("text");
            entity.Property(e => e.Plan)
                .HasColumnType("text")
                .HasColumnName("plan");
            entity.Property(e => e.PurchaseCutOff).HasColumnType("text");
            entity.Property(e => e.PurchaseDemat).HasColumnType("text");
            entity.Property(e => e.PurchaseFlag).HasColumnType("text");
            entity.Property(e => e.RedemptionCutOff).HasColumnType("text");
            entity.Property(e => e.RedemptionDemat).HasColumnType("text");
            entity.Property(e => e.RedemptionFlag).HasColumnType("text");
            entity.Property(e => e.RedemptionMinUnit).HasColumnName("Redemption_Min_Unit");
            entity.Property(e => e.Rtaschemecode)
                .HasColumnType("text")
                .HasColumnName("rtaschemecode");
            entity.Property(e => e.SchemeCode).HasColumnType("text");
            entity.Property(e => e.SchemeName).HasColumnType("text");
            entity.Property(e => e.Setttype)
                .HasColumnType("text")
                .HasColumnName("setttype");
            entity.Property(e => e.Switchflag)
                .HasColumnType("text")
                .HasColumnName("switchflag");
            entity.Property(e => e.Swpflag)
                .HasColumnType("text")
                .HasColumnName("swpflag");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Uniqueno)
                .HasColumnType("text")
                .HasColumnName("UNIQUENO");
            entity.Property(e => e.WssymbolCode)
                .HasColumnType("text")
                .HasColumnName("WSSymbolCode");
        });

        modelBuilder.Entity<WsStagingBseuccstarformat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_bseuccstarformat");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BseUccCode)
                .HasColumnType("text")
                .HasColumnName("BSE_UCC_Code");
            entity.Property(e => e.ClientAccno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO1");
            entity.Property(e => e.ClientAccno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO2");
            entity.Property(e => e.ClientAccno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO3");
            entity.Property(e => e.ClientAccno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO4");
            entity.Property(e => e.ClientAccno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO5");
            entity.Property(e => e.ClientAcctype1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE1");
            entity.Property(e => e.ClientAcctype2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE2");
            entity.Property(e => e.ClientAcctype3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE3");
            entity.Property(e => e.ClientAcctype5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE5");
            entity.Property(e => e.ClientAdd2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD2");
            entity.Property(e => e.ClientAdd3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD3");
            entity.Property(e => e.ClientCdslcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLCLTID");
            entity.Property(e => e.ClientCdsldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLDPID");
            entity.Property(e => e.ClientChequename5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CHEQUENAME5");
            entity.Property(e => e.ClientCity)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CITY");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(20)
                .HasColumnName("CLIENT_CODE");
            entity.Property(e => e.ClientCommmode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COMMMODE");
            entity.Property(e => e.ClientCountry)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COUNTRY");
            entity.Property(e => e.ClientDefaultDp)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DEFAULT_DP");
            entity.Property(e => e.ClientDivpaymode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DIVPAYMODE_");
            entity.Property(e => e.ClientEmail)
                .HasColumnType("text")
                .HasColumnName("CLIENT_EMAIL");
            entity.Property(e => e.ClientFatherHusbGuard)
                .HasColumnType("text")
                .HasColumnName("CLIENT_FATHER_HUSB_GUARD");
            entity.Property(e => e.ClientGuardianPan)
                .HasColumnType("text")
                .HasColumnName("CLIENT_GUARDIAN_PAN");
            entity.Property(e => e.ClientHolding)
                .HasColumnType("text")
                .HasColumnName("CLIENT_HOLDING");
            entity.Property(e => e.ClientMicrno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO1");
            entity.Property(e => e.ClientMicrno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO2");
            entity.Property(e => e.ClientMicrno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO3");
            entity.Property(e => e.ClientMicrno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO4");
            entity.Property(e => e.ClientMicrno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO5");
            entity.Property(e => e.ClientNeftifsccode1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE1");
            entity.Property(e => e.ClientNeftifsccode2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE2");
            entity.Property(e => e.ClientNeftifsccode3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE3");
            entity.Property(e => e.ClientNeftifsccode4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE4");
            entity.Property(e => e.ClientNeftifsccode5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE5");
            entity.Property(e => e.ClientNominee)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE");
            entity.Property(e => e.ClientNomineeRelation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE_RELATION");
            entity.Property(e => e.ClientNsdlcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLCLTID");
            entity.Property(e => e.ClientNsdldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLDPID");
            entity.Property(e => e.ClientOccupation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OCCUPATION");
            entity.Property(e => e.ClientOfficefax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEFAX");
            entity.Property(e => e.ClientOfficephone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEPHONE");
            entity.Property(e => e.ClientPincode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_PINCODE");
            entity.Property(e => e.ClientResifax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIFAX");
            entity.Property(e => e.ClientResiphone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIPHONE");
            entity.Property(e => e.ClientState)
                .HasColumnType("text")
                .HasColumnName("CLIENT_STATE");
            entity.Property(e => e.ClientTaxstatus)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TAXSTATUS");
            entity.Property(e => e.ClientType)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TYPE");
            entity.Property(e => e.CmForadd1)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD1");
            entity.Property(e => e.CmForadd2)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD2");
            entity.Property(e => e.CmForadd3)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD3");
            entity.Property(e => e.CmForcity)
                .HasColumnType("text")
                .HasColumnName("CM_FORCITY");
            entity.Property(e => e.CmForcountry)
                .HasColumnType("text")
                .HasColumnName("CM_FORCOUNTRY");
            entity.Property(e => e.CmForofffax)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFFAX");
            entity.Property(e => e.CmForoffphone)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFPHONE");
            entity.Property(e => e.CmForpincode)
                .HasColumnType("text")
                .HasColumnName("CM_FORPINCODE");
            entity.Property(e => e.CmForresifax)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIFAX");
            entity.Property(e => e.CmForresiphone)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIPHONE");
            entity.Property(e => e.CmForstate)
                .HasColumnType("text")
                .HasColumnName("CM_FORSTATE");
            entity.Property(e => e.CmMobile)
                .HasColumnType("text")
                .HasColumnName("CM_MOBILE");
            entity.Property(e => e.DefaultBankFlag)
                .HasColumnType("text")
                .HasColumnName("Default_bank_flag");
            entity.Property(e => e.FirstApllicantDob)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_DOB");
            entity.Property(e => e.FirstApllicantPan)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_PAN");
            entity.Property(e => e.FirstApplicantGender)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_GENDER");
            entity.Property(e => e.FirstApplicantName)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_NAME");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.MapinNo)
                .HasColumnType("text")
                .HasColumnName("MAPIN_NO");
            entity.Property(e => e.SecondApplicantName)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_NAME");
            entity.Property(e => e.SecondApplicantPan)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_PAN");
            entity.Property(e => e.ThirdApllicantName)
                .HasColumnType("text")
                .HasColumnName("THIRD_APLLICANT_NAME");
            entity.Property(e => e.ThirdApplicantPan)
                .HasColumnType("text")
                .HasColumnName("THIRD_APPLICANT_PAN");
            entity.Property(e => e.Timestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<WsStagingClientasset>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_clientasset");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Arn).HasColumnType("text");
            entity.Property(e => e.AssetClass).HasColumnType("text");
            entity.Property(e => e.AssetClassName).HasColumnType("text");
            entity.Property(e => e.Classification).HasColumnType("text");
            entity.Property(e => e.Depository).HasColumnType("text");
            entity.Property(e => e.DetailTypeName).HasColumnType("text");
            entity.Property(e => e.DpClientId).HasColumnType("text");
            entity.Property(e => e.DpIdAmc).HasColumnType("text");
            entity.Property(e => e.FundName).HasColumnType("text");
            entity.Property(e => e.HoldingDate).HasColumnType("text");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.IsinCode).HasColumnType("text");
            entity.Property(e => e.IssuerName).HasColumnType("text");
            entity.Property(e => e.LastPriceDate).HasColumnType("text");
            entity.Property(e => e.SchemeName).HasColumnType("text");
            entity.Property(e => e.SecurityCode).HasColumnType("text");
            entity.Property(e => e.SecurityName).HasColumnType("text");
            entity.Property(e => e.SecurityType).HasColumnType("text");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Type)
                .HasColumnType("text")
                .HasColumnName("type");
            entity.Property(e => e.WsAccountCode).HasColumnType("text");
        });

        modelBuilder.Entity<WsStagingClientbankermappingdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_clientbankermappingdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.BankerCode)
                .HasColumnType("text")
                .HasColumnName("banker_code");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("createdon");
            entity.Property(e => e.EmailId)
                .HasColumnType("text")
                .HasColumnName("email_id");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.MobileNo)
                .HasColumnType("text")
                .HasColumnName("mobile_no");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("pan");
            entity.Property(e => e.WswAccountCode)
                .HasColumnType("text")
                .HasColumnName("wsw_account_code");
        });

        modelBuilder.Entity<WsStagingClientkradetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_clientkradetails");

            entity.Property(e => e.Aadhar).HasMaxLength(12);
            entity.Property(e => e.AccountStatus).HasMaxLength(20);
            entity.Property(e => e.AccountType).HasMaxLength(100);
            entity.Property(e => e.Add1).HasMaxLength(100);
            entity.Property(e => e.Add2).HasMaxLength(100);
            entity.Property(e => e.Add3).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(20);
            entity.Property(e => e.ClientCode).HasMaxLength(30);
            entity.Property(e => e.ClientId).HasMaxLength(30);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.Fullname).HasMaxLength(300);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.GroupId).HasMaxLength(30);
            entity.Property(e => e.IsInternal).HasDefaultValueSql("'0'");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.MiddleName).HasMaxLength(100);
            entity.Property(e => e.Mobile).HasMaxLength(20);
            entity.Property(e => e.OwnerId).HasMaxLength(30);
            entity.Property(e => e.Pan).HasMaxLength(20);
            entity.Property(e => e.Pin).HasMaxLength(10);
            entity.Property(e => e.RmName).HasMaxLength(50);
            entity.Property(e => e.State).HasMaxLength(20);
            entity.Property(e => e.Ucccode)
                .HasMaxLength(30)
                .HasColumnName("UCCCode");
        });

        modelBuilder.Entity<WsStagingClientmasterdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_clientmasterdata");

            entity.HasIndex(e => e.ClientCode, "_idxClientCode").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountClosureDate).HasColumnType("text");
            entity.Property(e => e.AccountOpenDate).HasColumnType("text");
            entity.Property(e => e.AccountStatus).HasColumnType("text");
            entity.Property(e => e.AccountType).HasColumnType("text");
            entity.Property(e => e.AccreditedInvestor).HasColumnType("text");
            entity.Property(e => e.Address1).HasColumnType("text");
            entity.Property(e => e.Address2).HasColumnType("text");
            entity.Property(e => e.ArnName).HasColumnType("text");
            entity.Property(e => e.BankAccountNumber).HasColumnType("text");
            entity.Property(e => e.BankAccountType).HasColumnType("text");
            entity.Property(e => e.BankBranchName).HasColumnType("text");
            entity.Property(e => e.BankMicr).HasColumnType("text");
            entity.Property(e => e.BankName).HasColumnType("text");
            entity.Property(e => e.BankRtgs).HasColumnType("text");
            entity.Property(e => e.Boid)
                .HasMaxLength(50)
                .HasColumnName("BOID");
            entity.Property(e => e.BseUccStarCode).HasColumnType("text");
            entity.Property(e => e.BseUccStarDematCode).HasColumnType("text");
            entity.Property(e => e.City).HasColumnType("text");
            entity.Property(e => e.ClassTradeCode).HasColumnType("text");
            entity.Property(e => e.ClientCode).HasColumnType("text");
            entity.Property(e => e.ClientName).HasColumnType("text");
            entity.Property(e => e.ClientType).HasColumnType("text");
            entity.Property(e => e.CorrAddress1).HasColumnType("text");
            entity.Property(e => e.CorrAddress2).HasColumnType("text");
            entity.Property(e => e.CorrCity).HasColumnType("text");
            entity.Property(e => e.CorrEmail).HasColumnType("text");
            entity.Property(e => e.CorrMobile).HasColumnType("text");
            entity.Property(e => e.CorrPincode).HasColumnType("text");
            entity.Property(e => e.CorrState).HasColumnType("text");
            entity.Property(e => e.Country).HasColumnType("text");
            entity.Property(e => e.Ddpistatus)
                .HasDefaultValueSql("'1'")
                .HasColumnName("DDPIStatus");
            entity.Property(e => e.DefaultDpClientId).HasColumnType("text");
            entity.Property(e => e.DefaultDpId).HasColumnType("text");
            entity.Property(e => e.DefaultDpName).HasColumnType("text");
            entity.Property(e => e.DematAccountNo).HasMaxLength(50);
            entity.Property(e => e.DematStatus).HasMaxLength(20);
            entity.Property(e => e.Email).HasColumnType("text");
            entity.Property(e => e.FamilyName).HasColumnType("text");
            entity.Property(e => e.FatherHusbandName).HasColumnType("text");
            entity.Property(e => e.FundManagerName).HasColumnType("text");
            entity.Property(e => e.Groupname).HasColumnType("text");
            entity.Property(e => e.GuardianName).HasColumnType("text");
            entity.Property(e => e.HoldingMode).HasColumnType("text");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Lob)
                .HasColumnType("text")
                .HasColumnName("LOB");
            entity.Property(e => e.MandateNeft).HasColumnType("text");
            entity.Property(e => e.MandateRtgs).HasMaxLength(200);
            entity.Property(e => e.Mobile).HasColumnType("text");
            entity.Property(e => e.Nationality).HasColumnType("text");
            entity.Property(e => e.PmDob).HasColumnType("text");
            entity.Property(e => e.PmFirstName).HasColumnType("text");
            entity.Property(e => e.PmGender).HasColumnType("text");
            entity.Property(e => e.PmLastName).HasColumnType("text");
            entity.Property(e => e.PmMiddleName).HasColumnType("text");
            entity.Property(e => e.PmPannumber)
                .HasColumnType("text")
                .HasColumnName("PmPANNumber");
            entity.Property(e => e.PmSalutation).HasColumnType("text");
            entity.Property(e => e.Pmpincode)
                .HasColumnType("text")
                .HasColumnName("PMPincode");
            entity.Property(e => e.RmName).HasColumnType("text");
            entity.Property(e => e.SchemeName).HasColumnType("text");
            entity.Property(e => e.SdDob).HasColumnType("text");
            entity.Property(e => e.SdHolderName).HasColumnType("text");
            entity.Property(e => e.SdPan).HasColumnType("text");
            entity.Property(e => e.State).HasColumnType("text");
            entity.Property(e => e.SubLob)
                .HasColumnType("text")
                .HasColumnName("SubLOB");
            entity.Property(e => e.TdBod).HasColumnType("text");
            entity.Property(e => e.TdHolderName).HasColumnType("text");
            entity.Property(e => e.TdPan).HasColumnType("text");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.TradingDpClientId).HasColumnType("text");
            entity.Property(e => e.TradingDpId).HasColumnType("text");
            entity.Property(e => e.TradingDpType).HasColumnType("text");
        });

        modelBuilder.Entity<WsStagingClientuploadmasterdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_staging_clientuploadmasterdata");

            entity.Property(e => e.Accountcode)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTCODE");
            entity.Property(e => e.Accountingtxn)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTINGTXN");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Add1)
                .HasColumnType("text")
                .HasColumnName("ADD1");
            entity.Property(e => e.Add2)
                .HasColumnType("text")
                .HasColumnName("ADD2");
            entity.Property(e => e.Advisor)
                .HasColumnType("text")
                .HasColumnName("ADVISOR");
            entity.Property(e => e.Advisorrights)
                .HasColumnType("text")
                .HasColumnName("ADVISORRIGHTS");
            entity.Property(e => e.Arnno)
                .HasColumnType("text")
                .HasColumnName("ARNNO");
            entity.Property(e => e.Automail)
                .HasColumnType("text")
                .HasColumnName("AUTOMAIL");
            entity.Property(e => e.Bankacid)
                .HasColumnType("text")
                .HasColumnName("BANKACID");
            entity.Property(e => e.Bankacid1)
                .HasColumnType("text")
                .HasColumnName("BANKACID1");
            entity.Property(e => e.Bankacid2)
                .HasColumnType("text")
                .HasColumnName("BANKACID2");
            entity.Property(e => e.Bankacid3)
                .HasColumnType("text")
                .HasColumnName("BANKACID3");
            entity.Property(e => e.Bankactype)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE");
            entity.Property(e => e.Bankactype1)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE1");
            entity.Property(e => e.Bankactype2)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE2");
            entity.Property(e => e.Bankactype3)
                .HasColumnType("text")
                .HasColumnName("BANKACTYPE3");
            entity.Property(e => e.Bankbranch1)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH1");
            entity.Property(e => e.Bankbranch2)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH2");
            entity.Property(e => e.Bankbranch3)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCH3");
            entity.Property(e => e.Bankbranchname)
                .HasColumnType("text")
                .HasColumnName("BANKBRANCHNAME");
            entity.Property(e => e.Bankcode)
                .HasColumnType("text")
                .HasColumnName("BANKCODE");
            entity.Property(e => e.Bankcode2)
                .HasColumnType("text")
                .HasColumnName("BANKCODE2");
            entity.Property(e => e.Bankname)
                .HasColumnType("text")
                .HasColumnName("BANKNAME");
            entity.Property(e => e.Bankname1)
                .HasColumnType("text")
                .HasColumnName("BANKNAME1");
            entity.Property(e => e.Bankname2)
                .HasColumnType("text")
                .HasColumnName("BANKNAME2");
            entity.Property(e => e.Bankname3)
                .HasColumnType("text")
                .HasColumnName("BANKNAME3");
            entity.Property(e => e.Basefundid).HasColumnName("BASEFUNDID");
            entity.Property(e => e.Basenav)
                .HasColumnType("text")
                .HasColumnName("BASENAV");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate1)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE1");
            entity.Property(e => e.Birthdate2)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE2");
            entity.Property(e => e.Birthdate3)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE3");
            entity.Property(e => e.BondDeb)
                .HasColumnType("text")
                .HasColumnName("BOND_DEB");
            entity.Property(e => e.Branch)
                .HasColumnType("text")
                .HasColumnName("BRANCH");
            entity.Property(e => e.Capitalcommited).HasColumnName("CAPITALCOMMITED");
            entity.Property(e => e.Categorycode)
                .HasColumnType("text")
                .HasColumnName("CATEGORYCODE");
            entity.Property(e => e.Circle1)
                .HasColumnType("text")
                .HasColumnName("CIRCLE1");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.Clientid)
                .HasColumnType("text")
                .HasColumnName("CLIENTID");
            entity.Property(e => e.Clientrights)
                .HasColumnType("text")
                .HasColumnName("CLIENTRIGHTS");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Depcode)
                .HasColumnType("text")
                .HasColumnName("DEPCODE");
            entity.Property(e => e.Depid)
                .HasColumnType("text")
                .HasColumnName("DEPID");
            entity.Property(e => e.Dp1)
                .HasColumnType("text")
                .HasColumnName("DP1");
            entity.Property(e => e.Dp2)
                .HasColumnType("text")
                .HasColumnName("DP2");
            entity.Property(e => e.Dp3)
                .HasColumnType("text")
                .HasColumnName("DP3");
            entity.Property(e => e.Dpclientid)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpclientid1)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID1");
            entity.Property(e => e.Dpclientid2)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID2");
            entity.Property(e => e.Dpclientid3)
                .HasColumnType("text")
                .HasColumnName("DPCLIENTID3");
            entity.Property(e => e.Dpid1)
                .HasColumnType("text")
                .HasColumnName("DPID1");
            entity.Property(e => e.Dpid2)
                .HasColumnType("text")
                .HasColumnName("DPID2");
            entity.Property(e => e.Dpid3)
                .HasColumnType("text")
                .HasColumnName("DPID3");
            entity.Property(e => e.Dpname2)
                .HasColumnType("text")
                .HasColumnName("DPNAME2");
            entity.Property(e => e.Dpname3)
                .HasColumnType("text")
                .HasColumnName("DPNAME3");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.EquityDeb)
                .HasColumnType("text")
                .HasColumnName("EQUITY_DEB");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Fh1)
                .HasColumnType("text")
                .HasColumnName("FH1");
            entity.Property(e => e.Fh2)
                .HasColumnType("text")
                .HasColumnName("FH2");
            entity.Property(e => e.Fh3)
                .HasColumnType("text")
                .HasColumnName("FH3");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fmrights)
                .HasColumnType("text")
                .HasColumnName("FMRIGHTS");
            entity.Property(e => e.Fundlevel).HasColumnName("FUNDLEVEL");
            entity.Property(e => e.Futures)
                .HasColumnType("text")
                .HasColumnName("FUTURES");
            entity.Property(e => e.Gender)
                .HasColumnType("text")
                .HasColumnName("GENDER");
            entity.Property(e => e.Gender2)
                .HasColumnType("text")
                .HasColumnName("GENDER2");
            entity.Property(e => e.Gender3)
                .HasColumnType("text")
                .HasColumnName("GENDER3");
            entity.Property(e => e.Groupcode)
                .HasColumnType("text")
                .HasColumnName("GROUPCODE");
            entity.Property(e => e.Groupcontact)
                .HasColumnType("text")
                .HasColumnName("GROUPCONTACT");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardian)
                .HasColumnType("text")
                .HasColumnName("GUARDIAN");
            entity.Property(e => e.Guardianadd1)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD1");
            entity.Property(e => e.Guardianadd2)
                .HasColumnType("text")
                .HasColumnName("GUARDIANADD2");
            entity.Property(e => e.Guardiancity)
                .HasColumnType("text")
                .HasColumnName("GUARDIANCITY");
            entity.Property(e => e.Guardianfax)
                .HasColumnType("text")
                .HasColumnName("GUARDIANFAX");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.Guardianphone)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPHONE");
            entity.Property(e => e.Guardianpin)
                .HasColumnType("text")
                .HasColumnName("GUARDIANPIN");
            entity.Property(e => e.Guardianstate)
                .HasColumnType("text")
                .HasColumnName("GUARDIANSTATE");
            entity.Property(e => e.H1aadhar)
                .HasColumnType("text")
                .HasColumnName("H1AADHAR");
            entity.Property(e => e.H1ckyc)
                .HasColumnType("text")
                .HasColumnName("H1CKYC");
            entity.Property(e => e.H1fatca)
                .HasColumnType("text")
                .HasColumnName("H1FATCA");
            entity.Property(e => e.H1modeofholding)
                .HasColumnType("text")
                .HasColumnName("H1MODEOFHOLDING");
            entity.Property(e => e.H1ubo)
                .HasColumnType("text")
                .HasColumnName("H1UBO");
            entity.Property(e => e.H2aadhar)
                .HasColumnType("text")
                .HasColumnName("H2AADHAR");
            entity.Property(e => e.H2ckyc)
                .HasColumnType("text")
                .HasColumnName("H2CKYC");
            entity.Property(e => e.H2fatca)
                .HasColumnType("text")
                .HasColumnName("H2FATCA");
            entity.Property(e => e.H2ubo)
                .HasColumnType("text")
                .HasColumnName("H2UBO");
            entity.Property(e => e.H3aadhar)
                .HasColumnType("text")
                .HasColumnName("H3AADHAR");
            entity.Property(e => e.H3ckyc)
                .HasColumnType("text")
                .HasColumnName("H3CKYC");
            entity.Property(e => e.H3fatca)
                .HasColumnType("text")
                .HasColumnName("H3FATCA");
            entity.Property(e => e.H3ubo)
                .HasColumnType("text")
                .HasColumnName("H3UBO");
            entity.Property(e => e.Hofflag)
                .HasColumnType("text")
                .HasColumnName("HOFFLAG");
            entity.Property(e => e.Hofrestricted)
                .HasColumnType("text")
                .HasColumnName("HOFRESTRICTED");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Inccatg)
                .HasColumnType("text")
                .HasColumnName("INCCATG");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediary)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARY");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Mailh1add1)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD1");
            entity.Property(e => e.Mailh1add2)
                .HasColumnType("text")
                .HasColumnName("MAILH1ADD2");
            entity.Property(e => e.Mailh1city)
                .HasColumnType("text")
                .HasColumnName("MAILH1CITY");
            entity.Property(e => e.Mailh1emailid)
                .HasColumnType("text")
                .HasColumnName("MAILH1EMAILID");
            entity.Property(e => e.Mailh1fax)
                .HasColumnType("text")
                .HasColumnName("MAILH1FAX");
            entity.Property(e => e.Mailh1mobile)
                .HasColumnType("text")
                .HasColumnName("MAILH1MOBILE");
            entity.Property(e => e.Mailh1phone)
                .HasColumnType("text")
                .HasColumnName("MAILH1PHONE");
            entity.Property(e => e.Mailh1pin)
                .HasColumnType("text")
                .HasColumnName("MAILH1PIN");
            entity.Property(e => e.Mailh1state)
                .HasColumnType("text")
                .HasColumnName("MAILH1STATE");
            entity.Property(e => e.Mailphonework)
                .HasColumnType("text")
                .HasColumnName("MAILPHONEWORK");
            entity.Property(e => e.Mapinid)
                .HasColumnType("text")
                .HasColumnName("MAPINID");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Maxcharge).HasColumnName("MAXCHARGE");
            entity.Property(e => e.Mf)
                .HasColumnType("text")
                .HasColumnName("MF");
            entity.Property(e => e.Micr1)
                .HasColumnType("text")
                .HasColumnName("MICR1");
            entity.Property(e => e.Micr2)
                .HasColumnType("text")
                .HasColumnName("MICR2");
            entity.Property(e => e.Micr3)
                .HasColumnType("text")
                .HasColumnName("MICR3");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.Modelportfolio)
                .HasColumnType("text")
                .HasColumnName("MODELPORTFOLIO");
            entity.Property(e => e.Name2)
                .HasColumnType("text")
                .HasColumnName("NAME2");
            entity.Property(e => e.Name3)
                .HasColumnType("text")
                .HasColumnName("NAME3");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Neft1)
                .HasColumnType("text")
                .HasColumnName("NEFT1");
            entity.Property(e => e.Neft2)
                .HasColumnType("text")
                .HasColumnName("NEFT2");
            entity.Property(e => e.Neft3)
                .HasColumnType("text")
                .HasColumnName("NEFT3");
            entity.Property(e => e.Ngaadhar)
                .HasColumnType("text")
                .HasColumnName("NGAADHAR");
            entity.Property(e => e.Ngckyc)
                .HasColumnType("text")
                .HasColumnName("NGCKYC");
            entity.Property(e => e.Ngdob)
                .HasColumnType("text")
                .HasColumnName("NGDOB");
            entity.Property(e => e.Ngfatca)
                .HasColumnType("text")
                .HasColumnName("NGFATCA");
            entity.Property(e => e.Ngpan)
                .HasColumnType("text")
                .HasColumnName("NGPAN");
            entity.Property(e => e.Ngubo)
                .HasColumnType("text")
                .HasColumnName("NGUBO");
            entity.Property(e => e.Nomdob)
                .HasColumnType("text")
                .HasColumnName("NOMDOB");
            entity.Property(e => e.Nomineeadd1)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD1");
            entity.Property(e => e.Nomineeadd2)
                .HasColumnType("text")
                .HasColumnName("NOMINEEADD2");
            entity.Property(e => e.Nomineecity)
                .HasColumnType("text")
                .HasColumnName("NOMINEECITY");
            entity.Property(e => e.Nomineefax)
                .HasColumnType("text")
                .HasColumnName("NOMINEEFAX");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Nomineephone)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPHONE");
            entity.Property(e => e.Nomineepin)
                .HasColumnType("text")
                .HasColumnName("NOMINEEPIN");
            entity.Property(e => e.Nomineerelation)
                .HasColumnType("text")
                .HasColumnName("NOMINEERELATION");
            entity.Property(e => e.Nomineestate)
                .HasColumnType("text")
                .HasColumnName("NOMINEESTATE");
            entity.Property(e => e.Nompan)
                .HasColumnType("text")
                .HasColumnName("NOMPAN");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Onlylowestclassify)
                .HasColumnType("text")
                .HasColumnName("ONLYLOWESTCLASSIFY");
            entity.Property(e => e.Operationtype)
                .HasColumnType("text")
                .HasColumnName("OPERATIONTYPE");
            entity.Property(e => e.Options)
                .HasColumnType("text")
                .HasColumnName("OPTIONS");
            entity.Property(e => e.OtherAssets)
                .HasColumnType("text")
                .HasColumnName("OTHER_ASSETS");
            entity.Property(e => e.Pan)
                .HasColumnType("text")
                .HasColumnName("PAN");
            entity.Property(e => e.Pan2)
                .HasColumnType("text")
                .HasColumnName("PAN2");
            entity.Property(e => e.Pan3)
                .HasColumnType("text")
                .HasColumnName("PAN3");
            entity.Property(e => e.Parentfundid).HasColumnName("PARENTFUNDID");
            entity.Property(e => e.Perfclassifydaily)
                .HasColumnType("text")
                .HasColumnName("PERFCLASSIFYDAILY");
            entity.Property(e => e.Perfreportdate)
                .HasColumnType("text")
                .HasColumnName("PERFREPORTDATE");
            entity.Property(e => e.Phone)
                .HasColumnType("text")
                .HasColumnName("PHONE");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Planallowed)
                .HasColumnType("text")
                .HasColumnName("PLANALLOWED");
            entity.Property(e => e.Poolmapin)
                .HasColumnType("text")
                .HasColumnName("POOLMAPIN");
            entity.Property(e => e.Recoproduct)
                .HasColumnType("text")
                .HasColumnName("RECOPRODUCT");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relation2)
                .HasColumnType("text")
                .HasColumnName("RELATION2");
            entity.Property(e => e.Relation3)
                .HasColumnType("text")
                .HasColumnName("RELATION3");
            entity.Property(e => e.Relmapping1)
                .HasColumnType("text")
                .HasColumnName("RELMAPPING1");
            entity.Property(e => e.Relmgr)
                .HasColumnType("text")
                .HasColumnName("RELMGR");
            entity.Property(e => e.Riskprofilename)
                .HasColumnType("text")
                .HasColumnName("RISKPROFILENAME");
            entity.Property(e => e.Rmrights)
                .HasColumnType("text")
                .HasColumnName("RMRIGHTS");
            entity.Property(e => e.Rtgs1)
                .HasColumnType("text")
                .HasColumnName("RTGS1");
            entity.Property(e => e.Rtgs2)
                .HasColumnType("text")
                .HasColumnName("RTGS2");
            entity.Property(e => e.Rtgs3)
                .HasColumnType("text")
                .HasColumnName("RTGS3");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Scheme)
                .HasColumnType("text")
                .HasColumnName("SCHEME");
            entity.Property(e => e.Sharereports)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTS");
            entity.Property(e => e.Shares)
                .HasColumnType("text")
                .HasColumnName("SHARES");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.Stttakenas)
                .HasColumnType("text")
                .HasColumnName("STTTAKENAS");
            entity.Property(e => e.Tan1)
                .HasColumnType("text")
                .HasColumnName("TAN1");
            entity.Property(e => e.Taxable)
                .HasColumnType("text")
                .HasColumnName("TAXABLE");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("timestamp");
            entity.Property(e => e.Txnfeetakenas)
                .HasColumnType("text")
                .HasColumnName("TXNFEETAKENAS");
            entity.Property(e => e.UserName)
                .HasColumnType("text")
                .HasColumnName("USER_NAME");
            entity.Property(e => e.Ward1)
                .HasColumnType("text")
                .HasColumnName("WARD1");
            entity.Property(e => e.Wealthadvisorname)
                .HasColumnType("text")
                .HasColumnName("WEALTHADVISORNAME");
        });

        modelBuilder.Entity<WsStagingCustodyaccountdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_custodyaccountdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Clientid)
                .HasMaxLength(100)
                .HasColumnName("CLIENTID");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Depository)
                .HasMaxLength(255)
                .HasColumnName("DEPOSITORY");
            entity.Property(e => e.Despositoryname)
                .HasMaxLength(255)
                .HasColumnName("DESPOSITORYNAME");
            entity.Property(e => e.Dpclientid)
                .HasMaxLength(255)
                .HasColumnName("DPCLIENTID");
            entity.Property(e => e.Dpid)
                .HasMaxLength(255)
                .HasColumnName("DPID");
            entity.Property(e => e.Dpname)
                .HasMaxLength(255)
                .HasColumnName("DPNAME");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
        });

        modelBuilder.Entity<WsStagingDpdetailsdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_dpdetailsdata");

            entity.Property(e => e.AccountType).HasMaxLength(30);
            entity.Property(e => e.ClientCode).HasMaxLength(10);
            entity.Property(e => e.ClientId).HasMaxLength(10);
            entity.Property(e => e.GroupId).HasMaxLength(10);
            entity.Property(e => e.IsPoa).HasDefaultValueSql("'0'");
            entity.Property(e => e.IsPrimary).HasDefaultValueSql("'1'");
            entity.Property(e => e.Isactive).HasDefaultValueSql("'1'");
            entity.Property(e => e.OwnerId).HasMaxLength(10);
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.TradingDpId).HasMaxLength(30);
            entity.Property(e => e.TradingDpType).HasMaxLength(30);
        });

        modelBuilder.Entity<WsStagingEmployeemasterdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_employeemasterdata");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasColumnType("text")
                .HasColumnName("code");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("createdon");
            entity.Property(e => e.Department)
                .HasColumnType("text")
                .HasColumnName("department");
            entity.Property(e => e.Designation)
                .HasColumnType("text")
                .HasColumnName("designation");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("email");
            entity.Property(e => e.Euin)
                .HasColumnType("text")
                .HasColumnName("euin");
            entity.Property(e => e.IsActive).HasColumnName("is_active");
            entity.Property(e => e.Lob)
                .HasColumnType("text")
                .HasColumnName("lob");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("mobile");
            entity.Property(e => e.Name)
                .HasColumnType("text")
                .HasColumnName("name");
            entity.Property(e => e.ReportingManagerCode)
                .HasColumnType("text")
                .HasColumnName("reporting_manager_code");
        });

        modelBuilder.Entity<WsStagingHeldawayassetdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_staging_heldawayassetdata");

            entity.Property(e => e.BankAccountId)
                .HasColumnType("text")
                .HasColumnName("Bank_Account_id");
            entity.Property(e => e.BankAccountType)
                .HasColumnType("text")
                .HasColumnName("Bank_Account_type");
            entity.Property(e => e.BankCode)
                .HasColumnType("text")
                .HasColumnName("Bank_code");
            entity.Property(e => e.ClientId).HasColumnName("Client_Id");
            entity.Property(e => e.ClientName)
                .HasColumnType("text")
                .HasColumnName("Client_name");
            entity.Property(e => e.ClientSymbolCode)
                .HasColumnType("text")
                .HasColumnName("Client_symbol_code");
            entity.Property(e => e.CommitmentAmount).HasColumnName("Commitment_amount");
            entity.Property(e => e.DataType)
                .HasColumnType("text")
                .HasColumnName("Data_type");
            entity.Property(e => e.Folio)
                .HasColumnType("text")
                .HasColumnName("folio");
            entity.Property(e => e.FundSymbolCode)
                .HasColumnType("text")
                .HasColumnName("Fund_Symbol_code");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.RefCode1)
                .HasColumnType("text")
                .HasColumnName("Ref_code_1");
            entity.Property(e => e.RefCode3)
                .HasColumnType("text")
                .HasColumnName("Ref_code_3");
            entity.Property(e => e.RefCode4)
                .HasColumnType("text")
                .HasColumnName("Ref_code_4");
            entity.Property(e => e.RefCode5)
                .HasColumnType("text")
                .HasColumnName("Ref_code_5");
            entity.Property(e => e.SymbolName)
                .HasColumnType("text")
                .HasColumnName("Symbol_Name");
        });

        modelBuilder.Entity<WsStagingMffoliodetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_mffoliodetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Amc)
                .HasMaxLength(255)
                .HasColumnName("AMC");
            entity.Property(e => e.Amcname)
                .HasMaxLength(255)
                .HasColumnName("AMCNAME");
            entity.Property(e => e.Clientid)
                .HasMaxLength(100)
                .HasColumnName("CLIENTID");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Defaultamc)
                .HasMaxLength(255)
                .HasColumnName("DEFAULTAMC");
            entity.Property(e => e.Folio)
                .HasMaxLength(255)
                .HasColumnName("FOLIO");
            entity.Property(e => e.Folioactive)
                .HasMaxLength(255)
                .HasColumnName("FOLIOACTIVE");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Registrar)
                .HasMaxLength(255)
                .HasColumnName("REGISTRAR");
            entity.Property(e => e.Registrarname)
                .HasMaxLength(255)
                .HasColumnName("REGISTRARNAME");
            entity.Property(e => e.Subfolio)
                .HasMaxLength(255)
                .HasColumnName("SUBFOLIO");
        });

        modelBuilder.Entity<WsStagingPortfolioholdingdatum>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_staging_portfolioholdingdata");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Accruedinterest).HasColumnName("ACCRUEDINTEREST");
            entity.Property(e => e.Asondate)
                .HasColumnType("text")
                .HasColumnName("ASONDATE");
            entity.Property(e => e.Astcls)
                .HasColumnType("text")
                .HasColumnName("ASTCLS");
            entity.Property(e => e.Code).HasColumnName("CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.GainLossPercentage).HasColumnName("GainLoss_Percentage");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Marketrate).HasColumnName("MARKETRATE");
            entity.Property(e => e.Marketvalue).HasColumnName("MARKETVALUE");
            entity.Property(e => e.Name)
                .HasColumnType("text")
                .HasColumnName("NAME");
            entity.Property(e => e.Positionflag)
                .HasColumnType("text")
                .HasColumnName("POSITIONFLAG");
            entity.Property(e => e.Quantity).HasColumnName("QUANTITY");
            entity.Property(e => e.Symbolcode)
                .HasColumnType("text")
                .HasColumnName("SYMBOLCODE");
            entity.Property(e => e.Symbolname)
                .HasColumnType("text")
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Unitcost).HasColumnName("UNITCOST");
        });

        modelBuilder.Entity<WsStagingSecuritydetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ws_staging_securitydetails");

            entity.HasIndex(e => new { e.Id, e.Issuer }, "_idxIssueer").HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 10 });

            entity.HasIndex(e => e.Issuer, "_idxIssueerO").HasAnnotation("MySql:IndexPrefixLength", new[] { 10 });

            entity.Property(e => e.Activeind)
                .HasColumnType("text")
                .HasColumnName("ACTIVEIND");
            entity.Property(e => e.Astclsname)
                .HasColumnType("text")
                .HasColumnName("ASTCLSNAME");
            entity.Property(e => e.Bsemapping)
                .HasColumnType("text")
                .HasColumnName("BSEMAPPING");
            entity.Property(e => e.Classify1)
                .HasColumnType("text")
                .HasColumnName("CLASSIFY1");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Detailtypename)
                .HasColumnType("text")
                .HasColumnName("DETAILTYPENAME");
            entity.Property(e => e.Dimcode1)
                .HasColumnType("text")
                .HasColumnName("DIMCODE1");
            entity.Property(e => e.Dimcode10)
                .HasColumnType("text")
                .HasColumnName("DIMCODE10");
            entity.Property(e => e.Dimcode11)
                .HasColumnType("text")
                .HasColumnName("DIMCODE11");
            entity.Property(e => e.Dimcode12)
                .HasColumnType("text")
                .HasColumnName("DIMCODE12");
            entity.Property(e => e.Dimcode13)
                .HasColumnType("text")
                .HasColumnName("DIMCODE13");
            entity.Property(e => e.Dimcode14)
                .HasColumnType("text")
                .HasColumnName("DIMCODE14");
            entity.Property(e => e.Dimcode15)
                .HasColumnType("text")
                .HasColumnName("DIMCODE15");
            entity.Property(e => e.Dimcode16)
                .HasColumnType("text")
                .HasColumnName("DIMCODE16");
            entity.Property(e => e.Dimcode17)
                .HasColumnType("text")
                .HasColumnName("DIMCODE17");
            entity.Property(e => e.Dimcode18)
                .HasColumnType("text")
                .HasColumnName("DIMCODE18");
            entity.Property(e => e.Dimcode19)
                .HasColumnType("text")
                .HasColumnName("DIMCODE19");
            entity.Property(e => e.Dimcode2)
                .HasColumnType("text")
                .HasColumnName("DIMCODE2");
            entity.Property(e => e.Dimcode20)
                .HasColumnType("text")
                .HasColumnName("DIMCODE20");
            entity.Property(e => e.Dimcode21)
                .HasColumnType("text")
                .HasColumnName("DIMCODE21");
            entity.Property(e => e.Dimcode22)
                .HasColumnType("text")
                .HasColumnName("DIMCODE22");
            entity.Property(e => e.Dimcode23)
                .HasColumnType("text")
                .HasColumnName("DIMCODE23");
            entity.Property(e => e.Dimcode24)
                .HasColumnType("text")
                .HasColumnName("DIMCODE24");
            entity.Property(e => e.Dimcode25)
                .HasColumnType("text")
                .HasColumnName("DIMCODE25");
            entity.Property(e => e.Dimcode3)
                .HasColumnType("text")
                .HasColumnName("DIMCODE3");
            entity.Property(e => e.Dimcode4)
                .HasColumnType("text")
                .HasColumnName("DIMCODE4");
            entity.Property(e => e.Dimcode5)
                .HasColumnType("text")
                .HasColumnName("DIMCODE5");
            entity.Property(e => e.Dimcode6)
                .HasColumnType("text")
                .HasColumnName("DIMCODE6");
            entity.Property(e => e.Dimcode7)
                .HasColumnType("text")
                .HasColumnName("DIMCODE7");
            entity.Property(e => e.Dimcode8)
                .HasColumnType("text")
                .HasColumnName("DIMCODE8");
            entity.Property(e => e.Dimcode9)
                .HasColumnType("text")
                .HasColumnName("DIMCODE9");
            entity.Property(e => e.Dimname1)
                .HasColumnType("text")
                .HasColumnName("DIMNAME1");
            entity.Property(e => e.Dimname10)
                .HasColumnType("text")
                .HasColumnName("DIMNAME10");
            entity.Property(e => e.Dimname11)
                .HasColumnType("text")
                .HasColumnName("DIMNAME11");
            entity.Property(e => e.Dimname12)
                .HasColumnType("text")
                .HasColumnName("DIMNAME12");
            entity.Property(e => e.Dimname13)
                .HasColumnType("text")
                .HasColumnName("DIMNAME13");
            entity.Property(e => e.Dimname14)
                .HasColumnType("text")
                .HasColumnName("DIMNAME14");
            entity.Property(e => e.Dimname15)
                .HasColumnType("text")
                .HasColumnName("DIMNAME15");
            entity.Property(e => e.Dimname16)
                .HasColumnType("text")
                .HasColumnName("DIMNAME16");
            entity.Property(e => e.Dimname17)
                .HasColumnType("text")
                .HasColumnName("DIMNAME17");
            entity.Property(e => e.Dimname18)
                .HasColumnType("text")
                .HasColumnName("DIMNAME18");
            entity.Property(e => e.Dimname19)
                .HasColumnType("text")
                .HasColumnName("DIMNAME19");
            entity.Property(e => e.Dimname2)
                .HasColumnType("text")
                .HasColumnName("DIMNAME2");
            entity.Property(e => e.Dimname20)
                .HasColumnType("text")
                .HasColumnName("DIMNAME20");
            entity.Property(e => e.Dimname21)
                .HasColumnType("text")
                .HasColumnName("DIMNAME21");
            entity.Property(e => e.Dimname22)
                .HasColumnType("text")
                .HasColumnName("DIMNAME22");
            entity.Property(e => e.Dimname23)
                .HasColumnType("text")
                .HasColumnName("DIMNAME23");
            entity.Property(e => e.Dimname24)
                .HasColumnType("text")
                .HasColumnName("DIMNAME24");
            entity.Property(e => e.Dimname25)
                .HasColumnType("text")
                .HasColumnName("DIMNAME25");
            entity.Property(e => e.Dimname3)
                .HasColumnType("text")
                .HasColumnName("DIMNAME3");
            entity.Property(e => e.Dimname4)
                .HasColumnType("text")
                .HasColumnName("DIMNAME4");
            entity.Property(e => e.Dimname5)
                .HasColumnType("text")
                .HasColumnName("DIMNAME5");
            entity.Property(e => e.Dimname6)
                .HasColumnType("text")
                .HasColumnName("DIMNAME6");
            entity.Property(e => e.Dimname7)
                .HasColumnType("text")
                .HasColumnName("DIMNAME7");
            entity.Property(e => e.Dimname8)
                .HasColumnType("text")
                .HasColumnName("DIMNAME8");
            entity.Property(e => e.Dimname9)
                .HasColumnType("text")
                .HasColumnName("DIMNAME9");
            entity.Property(e => e.Expirydate)
                .HasColumnType("text")
                .HasColumnName("EXPIRYDATE");
            entity.Property(e => e.Faceval)
                .HasColumnType("text")
                .HasColumnName("FACEVAL");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Internalsymbol2)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOL2");
            entity.Property(e => e.Internalsymbolcode)
                .HasColumnType("text")
                .HasColumnName("INTERNALSYMBOLCODE");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.Isincode)
                .HasColumnType("text")
                .HasColumnName("ISINCODE");
            entity.Property(e => e.Issuer)
                .HasColumnType("text")
                .HasColumnName("ISSUER");
            entity.Property(e => e.MaturitydateFmp)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_FMP");
            entity.Property(e => e.MaturitydateIntfund)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE_INTFUND");
            entity.Property(e => e.Nsemapping)
                .HasColumnType("text")
                .HasColumnName("NSEMAPPING");
            entity.Property(e => e.Nseseries)
                .HasColumnType("text")
                .HasColumnName("NSESERIES");
            entity.Property(e => e.Rbisymbol)
                .HasColumnType("text")
                .HasColumnName("RBISYMBOL");
            entity.Property(e => e.Refsymbol)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL");
            entity.Property(e => e.Refsymbol1)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL1");
            entity.Property(e => e.Refsymbol10)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL10");
            entity.Property(e => e.Refsymbol5)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL5");
            entity.Property(e => e.Refsymbol6)
                .HasColumnType("text")
                .HasColumnName("REFSYMBOL6");
            entity.Property(e => e.Roundlot)
                .HasColumnType("text")
                .HasColumnName("ROUNDLOT");
            entity.Property(e => e.Sectorname)
                .HasColumnType("text")
                .HasColumnName("SECTORNAME");
            entity.Property(e => e.Sedolcode)
                .HasColumnType("text")
                .HasColumnName("SEDOLCODE");
            entity.Property(e => e.Sharecapital)
                .HasColumnType("text")
                .HasColumnName("SHARECAPITAL");
            entity.Property(e => e.Strikeprice)
                .HasColumnType("text")
                .HasColumnName("STRIKEPRICE");
            entity.Property(e => e.Symbolflag)
                .HasColumnType("text")
                .HasColumnName("SYMBOLFLAG");
            entity.Property(e => e.Symbolid)
                .HasColumnType("text")
                .HasColumnName("SYMBOLID");
            entity.Property(e => e.Symbolname)
                .HasColumnType("text")
                .HasColumnName("SYMBOLNAME");
            entity.Property(e => e.Symtypename)
                .HasColumnType("text")
                .HasColumnName("SYMTYPENAME");
        });

        modelBuilder.Entity<WsTradedetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("ws_tradedetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountCode)
                .HasMaxLength(30)
                .HasColumnName("accountCode");
            entity.Property(e => e.BrokAmt)
                .HasPrecision(12, 4)
                .HasColumnName("brokAmt");
            entity.Property(e => e.BuySell)
                .HasMaxLength(10)
                .HasColumnName("buySell");
            entity.Property(e => e.ContNo)
                .HasMaxLength(30)
                .HasColumnName("contNo");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("createdOn");
            entity.Property(e => e.ExcSymbol)
                .HasMaxLength(30)
                .HasColumnName("excSymbol");
            entity.Property(e => e.Exchange)
                .HasMaxLength(30)
                .HasColumnName("exchange");
            entity.Property(e => e.ExpiryDate)
                .HasMaxLength(30)
                .HasColumnName("expiryDate");
            entity.Property(e => e.GBrokAmt)
                .HasPrecision(12, 4)
                .HasColumnName("gBrokAmt");
            entity.Property(e => e.Isactive)
                .HasDefaultValueSql("'1'")
                .HasColumnName("isactive");
            entity.Property(e => e.IsinCode)
                .HasMaxLength(30)
                .HasColumnName("isinCode");
            entity.Property(e => e.MktAmt)
                .HasPrecision(12, 4)
                .HasColumnName("mktAmt");
            entity.Property(e => e.OptionType)
                .HasMaxLength(5)
                .HasColumnName("optionType");
            entity.Property(e => e.OtherCharges)
                .HasPrecision(12, 4)
                .HasColumnName("otherCharges");
            entity.Property(e => e.ProductCode)
                .HasMaxLength(30)
                .HasColumnName("productCode");
            entity.Property(e => e.Quantity)
                .HasPrecision(12, 4)
                .HasColumnName("quantity");
            entity.Property(e => e.QuantityLot)
                .HasPrecision(12, 8)
                .HasColumnName("quantityLot");
            entity.Property(e => e.ScripName)
                .HasMaxLength(50)
                .HasColumnName("scripName");
            entity.Property(e => e.ServiceTax)
                .HasPrecision(12, 4)
                .HasColumnName("serviceTax");
            entity.Property(e => e.SettCode)
                .HasMaxLength(30)
                .HasColumnName("settCode");
            entity.Property(e => e.StrikePrice)
                .HasPrecision(12, 4)
                .HasColumnName("strikePrice");
            entity.Property(e => e.Stt)
                .HasPrecision(12, 4)
                .HasColumnName("stt");
            entity.Property(e => e.SubAccountCode)
                .HasMaxLength(30)
                .HasColumnName("subAccountCode");
            entity.Property(e => e.TradeAmt)
                .HasPrecision(12, 4)
                .HasColumnName("tradeAmt");
            entity.Property(e => e.TradeType)
                .HasMaxLength(30)
                .HasColumnName("tradeType");
            entity.Property(e => e.TrxDate)
                .HasMaxLength(30)
                .HasColumnName("trxDate");
        });

        modelBuilder.Entity<WserrorLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wserrorLogs");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ExceptionType).HasMaxLength(255);
            entity.Property(e => e.Message).HasColumnType("text");
            entity.Property(e => e.MethodName).HasMaxLength(255);
            entity.Property(e => e.Route).HasMaxLength(255);
            entity.Property(e => e.StackTrace).HasColumnType("text");
        });

        modelBuilder.Entity<Wsmfaccesslevelmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfaccesslevelmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccessLevelValue)
                .HasMaxLength(10)
                .HasColumnName("ACCESS_LEVEL_VALUE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .HasColumnName("REMARKS");
        });

        modelBuilder.Entity<Wsmfaccounttype>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfaccounttype");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountCode)
                .HasMaxLength(2)
                .HasColumnName("account_code");
            entity.Property(e => e.AccountDetails)
                .HasMaxLength(50)
                .HasColumnName("account_details");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Wsmfclientholding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfclientholding");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(2)
                .HasColumnName("CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Details)
                .HasMaxLength(50)
                .HasColumnName("DETAILS");
        });

        modelBuilder.Entity<Wsmfclientoccupationcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfclientoccupationcode");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .HasColumnName("CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
        });

        modelBuilder.Entity<Wsmfclienttaxstatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfclienttaxstatus");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(3)
                .HasColumnName("CODE");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("DESCRIPTION");
        });

        modelBuilder.Entity<Wsmfcommunicationmode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfcommunicationmode");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .HasColumnName("DESCRIPTION");
        });

        modelBuilder.Entity<Wsmfcountrycode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfcountrycode");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code).HasMaxLength(4);
            entity.Property(e => e.CountryName)
                .HasMaxLength(255)
                .HasColumnName("Country_Name");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Wsmfemailormobileselfdeclaration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfemailormobileselfdeclaration");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Code)
                .HasMaxLength(2)
                .HasColumnName("CODE");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Details)
                .HasMaxLength(50)
                .HasColumnName("DETAILS");
        });

        modelBuilder.Entity<Wsmfpanexemptcategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfpanexemptcategory");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Category).HasMaxLength(2);
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
        });

        modelBuilder.Entity<Wsmfstatemaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfstatemaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.StateCodeValue)
                .HasMaxLength(10)
                .HasColumnName("STATE_CODE_VALUE");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .HasColumnName("STATE_NAME");
        });

        modelBuilder.Entity<Wsmfterminalidmaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsmfterminalidmaster");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .HasColumnName("REMARKS");
            entity.Property(e => e.TerminalidValue)
                .HasMaxLength(50)
                .HasColumnName("TERMINALID_VALUE");
        });

        modelBuilder.Entity<Wsorderdetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsorderdetails");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Advisedflag)
                .HasMaxLength(10)
                .HasColumnName("advisedflag");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.Brokeracid)
                .HasMaxLength(50)
                .HasColumnName("brokeracid");
            entity.Property(e => e.Brokercode)
                .HasMaxLength(50)
                .HasColumnName("brokercode");
            entity.Property(e => e.Clientid).HasColumnName("clientid");
            entity.Property(e => e.Commitmentamnt)
                .HasPrecision(18, 2)
                .HasColumnName("commitmentamnt");
            entity.Property(e => e.Cpcode)
                .HasMaxLength(50)
                .HasColumnName("cpcode");
            entity.Property(e => e.Createdon)
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Enddate).HasColumnName("enddate");
            entity.Property(e => e.Exchange)
                .HasMaxLength(50)
                .HasColumnName("exchange");
            entity.Property(e => e.Frequency)
                .HasMaxLength(50)
                .HasColumnName("frequency");
            entity.Property(e => e.Fullsell)
                .HasMaxLength(50)
                .HasColumnName("fullsell");
            entity.Property(e => e.Mandateid)
                .HasMaxLength(50)
                .HasColumnName("mandateid");
            entity.Property(e => e.Mfplatform)
                .HasMaxLength(50)
                .HasColumnName("mfplatform");
            entity.Property(e => e.Modeflag)
                .HasMaxLength(10)
                .HasColumnName("modeflag");
            entity.Property(e => e.Note2)
                .HasMaxLength(255)
                .HasColumnName("note2");
            entity.Property(e => e.Orderdate).HasColumnName("orderdate");
            entity.Property(e => e.Quantity)
                .HasPrecision(18, 2)
                .HasColumnName("quantity");
            entity.Property(e => e.Rate)
                .HasPrecision(18, 2)
                .HasColumnName("rate");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .HasColumnName("remark");
            entity.Property(e => e.Securitycode)
                .HasMaxLength(50)
                .HasColumnName("securitycode");
            entity.Property(e => e.Startdate).HasColumnName("startdate");
            entity.Property(e => e.Startday)
                .HasMaxLength(50)
                .HasColumnName("startday");
            entity.Property(e => e.Subtranstype)
                .HasMaxLength(50)
                .HasColumnName("subtranstype");
            entity.Property(e => e.Switchin)
                .HasMaxLength(50)
                .HasColumnName("switchin");
            entity.Property(e => e.Totalinstallment).HasColumnName("totalinstallment");
            entity.Property(e => e.Transtype)
                .HasMaxLength(50)
                .HasColumnName("transtype");
        });

        modelBuilder.Entity<Wsperformancebysecurity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsperformancebysecurity");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedincome)
                .HasPrecision(18, 2)
                .HasColumnName("accruedincome");
            entity.Property(e => e.Astcls)
                .HasMaxLength(255)
                .HasColumnName("astcls");
            entity.Property(e => e.Astclsname)
                .HasMaxLength(255)
                .HasColumnName("astclsname");
            entity.Property(e => e.Astclsseq).HasColumnName("astclsseq");
            entity.Property(e => e.Balqty)
                .HasPrecision(18, 2)
                .HasColumnName("balqty");
            entity.Property(e => e.Beginmktval)
                .HasPrecision(18, 2)
                .HasColumnName("beginmktval");
            entity.Property(e => e.Beginmktvalstr)
                .HasMaxLength(255)
                .HasColumnName("beginmktvalstr");
            entity.Property(e => e.Benchmarkcode)
                .HasMaxLength(255)
                .HasColumnName("benchmarkcode");
            entity.Property(e => e.Benchmarkname)
                .HasMaxLength(255)
                .HasColumnName("benchmarkname");
            entity.Property(e => e.Bm1gain)
                .HasPrecision(18, 2)
                .HasColumnName("bm1gain");
            entity.Property(e => e.Bmxirr)
                .HasPrecision(18, 2)
                .HasColumnName("bmxirr");
            entity.Property(e => e.Bmxirrabs)
                .HasPrecision(18, 2)
                .HasColumnName("bmxirrabs");
            entity.Property(e => e.Bmxirrabsstr)
                .HasMaxLength(255)
                .HasColumnName("bmxirrabsstr");
            entity.Property(e => e.Bmxirrstr)
                .HasMaxLength(255)
                .HasColumnName("bmxirrstr");
            entity.Property(e => e.Categorycode)
                .HasMaxLength(255)
                .HasColumnName("categorycode");
            entity.Property(e => e.Categoryname)
                .HasMaxLength(255)
                .HasColumnName("categoryname");
            entity.Property(e => e.Change)
                .HasPrecision(18, 2)
                .HasColumnName("change");
            entity.Property(e => e.Changestr)
                .HasMaxLength(255)
                .HasColumnName("changestr");
            entity.Property(e => e.Datalevel)
                .HasMaxLength(255)
                .HasColumnName("datalevel");
            entity.Property(e => e.Enddate).HasColumnName("enddate");
            entity.Property(e => e.Endmktval)
                .HasPrecision(18, 2)
                .HasColumnName("endmktval");
            entity.Property(e => e.Endmktvalstr)
                .HasMaxLength(255)
                .HasColumnName("endmktvalstr");
            entity.Property(e => e.Finalbmxirr)
                .HasPrecision(18, 2)
                .HasColumnName("finalbmxirr");
            entity.Property(e => e.Finalbmxirrstr)
                .HasMaxLength(255)
                .HasColumnName("finalbmxirrstr");
            entity.Property(e => e.Finalxirr)
                .HasPrecision(18, 2)
                .HasColumnName("finalxirr");
            entity.Property(e => e.Finalxirrstr)
                .HasMaxLength(255)
                .HasColumnName("finalxirrstr");
            entity.Property(e => e.Flagaif)
                .HasMaxLength(255)
                .HasColumnName("flagaif");
            entity.Property(e => e.Fromdate).HasColumnName("fromdate");
            entity.Property(e => e.Gain)
                .HasPrecision(18, 2)
                .HasColumnName("gain");
            entity.Property(e => e.Gainlossper)
                .HasPrecision(18, 2)
                .HasColumnName("gainlossper");
            entity.Property(e => e.Gainstr)
                .HasMaxLength(255)
                .HasColumnName("gainstr");
            entity.Property(e => e.Growth)
                .HasPrecision(18, 2)
                .HasColumnName("growth");
            entity.Property(e => e.Income)
                .HasPrecision(18, 2)
                .HasColumnName("income");
            entity.Property(e => e.Indexcol).HasColumnName("indexcol");
            entity.Property(e => e.Inflow)
                .HasPrecision(18, 2)
                .HasColumnName("inflow");
            entity.Property(e => e.Netflow)
                .HasPrecision(18, 2)
                .HasColumnName("netflow");
            entity.Property(e => e.Netflowstr)
                .HasMaxLength(255)
                .HasColumnName("netflowstr");
            entity.Property(e => e.Netinflow)
                .HasPrecision(18, 2)
                .HasColumnName("netinflow");
            entity.Property(e => e.Outflow)
                .HasPrecision(18, 2)
                .HasColumnName("outflow");
            entity.Property(e => e.Periodopt)
                .HasMaxLength(255)
                .HasColumnName("periodopt");
            entity.Property(e => e.Price)
                .HasPrecision(18, 2)
                .HasColumnName("price");
            entity.Property(e => e.Priceon).HasColumnName("priceon");
            entity.Property(e => e.Priorgain)
                .HasPrecision(18, 2)
                .HasColumnName("priorgain");
            entity.Property(e => e.Realgain)
                .HasPrecision(18, 2)
                .HasColumnName("realgain");
            entity.Property(e => e.Recordfor)
                .HasMaxLength(255)
                .HasColumnName("recordfor");
            entity.Property(e => e.Scope)
                .HasMaxLength(255)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid).HasColumnName("scopeid");
            entity.Property(e => e.Scopestr)
                .HasMaxLength(255)
                .HasColumnName("scopestr");
            entity.Property(e => e.Secdata)
                .HasColumnType("text")
                .HasColumnName("secdata");
            entity.Property(e => e.Startdate).HasColumnName("startdate");
            entity.Property(e => e.Symtype)
                .HasMaxLength(255)
                .HasColumnName("symtype");
            entity.Property(e => e.Symtypeori)
                .HasMaxLength(255)
                .HasColumnName("symtypeori");
            entity.Property(e => e.Thirdpartyflag)
                .HasMaxLength(255)
                .HasColumnName("thirdpartyflag");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Totalcost)
                .HasPrecision(18, 2)
                .HasColumnName("totalcost");
            entity.Property(e => e.Unrealgain)
                .HasPrecision(18, 2)
                .HasColumnName("unrealgain");
            entity.Property(e => e.Xirr)
                .HasPrecision(18, 2)
                .HasColumnName("xirr");
            entity.Property(e => e.Xirrabs)
                .HasPrecision(18, 2)
                .HasColumnName("xirrabs");
            entity.Property(e => e.Xirrabsstr)
                .HasMaxLength(255)
                .HasColumnName("xirrabsstr");
            entity.Property(e => e.Xirrstr)
                .HasMaxLength(255)
                .HasColumnName("xirrstr");
        });

        modelBuilder.Entity<Wspjclientmasterdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wspjclientmasterdata");

            entity.Property(e => e.AccountClosingReason)
                .HasColumnType("text")
                .HasColumnName("Account_Closing_Reason");
            entity.Property(e => e.AccountOpenDate)
                .HasColumnType("text")
                .HasColumnName("Account_Open_Date");
            entity.Property(e => e.AccountingTxn).HasColumnType("text");
            entity.Property(e => e.AccounttClosureDate)
                .HasColumnType("text")
                .HasColumnName("Accountt_Closure_Date");
            entity.Property(e => e.Accounttype)
                .HasColumnType("text")
                .HasColumnName("ACCOUNTTYPE");
            entity.Property(e => e.Accreditedinvestor)
                .HasColumnType("text")
                .HasColumnName("ACCREDITEDINVESTOR");
            entity.Property(e => e.Address1)
                .HasColumnType("text")
                .HasColumnName("ADDRESS1");
            entity.Property(e => e.Address2)
                .HasColumnType("text")
                .HasColumnName("ADDRESS2");
            entity.Property(e => e.Advisorid).HasColumnName("ADVISORID");
            entity.Property(e => e.Advisorname)
                .HasColumnType("text")
                .HasColumnName("ADVISORNAME");
            entity.Property(e => e.ArnName)
                .HasColumnType("text")
                .HasColumnName("ARN_Name");
            entity.Property(e => e.Arnid).HasColumnName("ARNID");
            entity.Property(e => e.Billgroup)
                .HasColumnType("text")
                .HasColumnName("BILLGROUP");
            entity.Property(e => e.Birthdate)
                .HasColumnType("text")
                .HasColumnName("BIRTHDATE");
            entity.Property(e => e.Branchid).HasColumnName("BRANCHID");
            entity.Property(e => e.Branchname)
                .HasColumnType("text")
                .HasColumnName("BRANCHNAME");
            entity.Property(e => e.Brokeraccountid)
                .HasColumnType("text")
                .HasColumnName("BROKERACCOUNTID");
            entity.Property(e => e.CapitalCommitted).HasColumnName("CAPITAL_COMMITTED");
            entity.Property(e => e.Chargeupto)
                .HasColumnType("text")
                .HasColumnName("CHARGEUPTO");
            entity.Property(e => e.Circle)
                .HasColumnType("text")
                .HasColumnName("CIRCLE");
            entity.Property(e => e.City)
                .HasColumnType("text")
                .HasColumnName("CITY");
            entity.Property(e => e.ClientBankAccount)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Account");
            entity.Property(e => e.ClientBankCode)
                .HasColumnType("text")
                .HasColumnName("Client_Bank_Code");
            entity.Property(e => e.ClientCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_AccountId");
            entity.Property(e => e.ClientCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Code");
            entity.Property(e => e.ClientCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_DP");
            entity.Property(e => e.ClientCustodySchemeCode)
                .HasColumnType("text")
                .HasColumnName("Client_Custody_Scheme_Code");
            entity.Property(e => e.Clientcategory)
                .HasColumnType("text")
                .HasColumnName("CLIENTCATEGORY");
            entity.Property(e => e.Clientcode)
                .HasColumnType("text")
                .HasColumnName("CLIENTCODE");
            entity.Property(e => e.Clientid).HasColumnName("CLIENTID");
            entity.Property(e => e.Clientname)
                .HasColumnType("text")
                .HasColumnName("CLIENTNAME");
            entity.Property(e => e.Clienttype)
                .HasColumnType("text")
                .HasColumnName("CLIENTTYPE");
            entity.Property(e => e.Contactname)
                .HasColumnType("text")
                .HasColumnName("CONTACTNAME");
            entity.Property(e => e.Country)
                .HasColumnType("text")
                .HasColumnName("COUNTRY");
            entity.Property(e => e.Dailyexpenseaccrual)
                .HasColumnType("text")
                .HasColumnName("DAILYEXPENSEACCRUAL");
            entity.Property(e => e.Dir1mapin)
                .HasColumnType("text")
                .HasColumnName("DIR1MAPIN");
            entity.Property(e => e.Dir1name)
                .HasColumnType("text")
                .HasColumnName("DIR1NAME");
            entity.Property(e => e.Dir2mapin)
                .HasColumnType("text")
                .HasColumnName("DIR2MAPIN");
            entity.Property(e => e.Dir2name)
                .HasColumnType("text")
                .HasColumnName("DIR2NAME");
            entity.Property(e => e.Dir3mapin)
                .HasColumnType("text")
                .HasColumnName("DIR3MAPIN");
            entity.Property(e => e.Dir3name)
                .HasColumnType("text")
                .HasColumnName("DIR3NAME");
            entity.Property(e => e.Email)
                .HasColumnType("text")
                .HasColumnName("EMAIL");
            entity.Property(e => e.FatherHusband)
                .HasColumnType("text")
                .HasColumnName("FATHER_HUSBAND");
            entity.Property(e => e.Fax)
                .HasColumnType("text")
                .HasColumnName("FAX");
            entity.Property(e => e.Feepaymentmode)
                .HasColumnType("text")
                .HasColumnName("FEEPAYMENTMODE");
            entity.Property(e => e.Firmid).HasColumnName("FIRMID");
            entity.Property(e => e.Firmname)
                .HasColumnType("text")
                .HasColumnName("FIRMNAME");
            entity.Property(e => e.FirstHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("First_Holder_AADHAR");
            entity.Property(e => e.FirstHolderFatca)
                .HasColumnType("text")
                .HasColumnName("First_Holder_FATCA");
            entity.Property(e => e.FirstHolderGender)
                .HasColumnType("text")
                .HasColumnName("First_Holder_Gender");
            entity.Property(e => e.FirstHolderKyc)
                .HasColumnType("text")
                .HasColumnName("First_Holder_KYC");
            entity.Property(e => e.FirstHolderUbo)
                .HasColumnType("text")
                .HasColumnName("First_Holder_UBO");
            entity.Property(e => e.Firstname)
                .HasColumnType("text")
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Fundmgrid).HasColumnName("FUNDMGRID");
            entity.Property(e => e.Fundmgrname)
                .HasColumnType("text")
                .HasColumnName("FUNDMGRNAME");
            entity.Property(e => e.Groupid).HasColumnName("GROUPID");
            entity.Property(e => e.Groupname)
                .HasColumnType("text")
                .HasColumnName("GROUPNAME");
            entity.Property(e => e.Guardianname)
                .HasColumnType("text")
                .HasColumnName("GUARDIANNAME");
            entity.Property(e => e.HeadOfFamily)
                .HasColumnType("text")
                .HasColumnName("Head_of_Family");
            entity.Property(e => e.Incentive)
                .HasColumnType("text")
                .HasColumnName("INCENTIVE");
            entity.Property(e => e.IncentiveRate)
                .HasColumnType("text")
                .HasColumnName("Incentive_Rate");
            entity.Property(e => e.Inceptiondate)
                .HasColumnType("text")
                .HasColumnName("INCEPTIONDATE");
            entity.Property(e => e.Intermediaryid).HasColumnName("INTERMEDIARYID");
            entity.Property(e => e.Intermediaryname)
                .HasColumnType("text")
                .HasColumnName("INTERMEDIARYNAME");
            entity.Property(e => e.Joint1FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT1_FATHER_HUSBAND");
            entity.Property(e => e.Joint1Name)
                .HasColumnType("text")
                .HasColumnName("JOINT1_NAME");
            entity.Property(e => e.Joint1Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT1_PAN");
            entity.Property(e => e.Joint2FatherHusband)
                .HasColumnType("text")
                .HasColumnName("JOINT2_FATHER_HUSBAND");
            entity.Property(e => e.Joint2Name)
                .HasColumnType("text")
                .HasColumnName("JOINT2_NAME");
            entity.Property(e => e.Joint2Pan)
                .HasColumnType("text")
                .HasColumnName("JOINT2_PAN");
            entity.Property(e => e.Lastname)
                .HasColumnType("text")
                .HasColumnName("LASTNAME");
            entity.Property(e => e.MailAddress1)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS1");
            entity.Property(e => e.MailAddress2)
                .HasColumnType("text")
                .HasColumnName("MAIL_ADDRESS2");
            entity.Property(e => e.MailCity)
                .HasColumnType("text")
                .HasColumnName("MAIL_CITY");
            entity.Property(e => e.MailEmailid)
                .HasColumnType("text")
                .HasColumnName("MAIL_EMAILID");
            entity.Property(e => e.MailFax)
                .HasColumnType("text")
                .HasColumnName("MAIL_FAX");
            entity.Property(e => e.MailMobile)
                .HasColumnType("text")
                .HasColumnName("MAIL_MOBILE");
            entity.Property(e => e.MailPhonehome)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEHOME");
            entity.Property(e => e.MailPhonework)
                .HasColumnType("text")
                .HasColumnName("MAIL_PHONEWORK");
            entity.Property(e => e.MailPincode)
                .HasColumnType("text")
                .HasColumnName("MAIL_PINCODE");
            entity.Property(e => e.MailState)
                .HasColumnType("text")
                .HasColumnName("MAIL_STATE");
            entity.Property(e => e.Mandatebankaccountno)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTNO");
            entity.Property(e => e.Mandatebankaccounttype)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKACCOUNTTYPE");
            entity.Property(e => e.Mandatebankbranchname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKBRANCHNAME");
            entity.Property(e => e.Mandatebankname)
                .HasColumnType("text")
                .HasColumnName("MANDATEBANKNAME");
            entity.Property(e => e.Mandatedepository)
                .HasColumnType("text")
                .HasColumnName("MANDATEDEPOSITORY");
            entity.Property(e => e.Mandatedp)
                .HasColumnType("text")
                .HasColumnName("MANDATEDP");
            entity.Property(e => e.Mandatedpclientid)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPCLIENTID");
            entity.Property(e => e.Mandatedpname)
                .HasColumnType("text")
                .HasColumnName("MANDATEDPNAME");
            entity.Property(e => e.Mandatemicr)
                .HasColumnType("text")
                .HasColumnName("MANDATEMICR");
            entity.Property(e => e.Mandateneft)
                .HasColumnType("text")
                .HasColumnName("MANDATENEFT");
            entity.Property(e => e.Mandatertgs)
                .HasColumnType("text")
                .HasColumnName("MANDATERTGS");
            entity.Property(e => e.Maturitydate)
                .HasColumnType("text")
                .HasColumnName("MATURITYDATE");
            entity.Property(e => e.Middlename)
                .HasColumnType("text")
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Mobile)
                .HasColumnType("text")
                .HasColumnName("MOBILE");
            entity.Property(e => e.ModeOfHolding)
                .HasColumnType("text")
                .HasColumnName("Mode_of_Holding");
            entity.Property(e => e.Nationality)
                .HasColumnType("text")
                .HasColumnName("NATIONALITY");
            entity.Property(e => e.Nomineename)
                .HasColumnType("text")
                .HasColumnName("NOMINEENAME");
            entity.Property(e => e.Occupation)
                .HasColumnType("text")
                .HasColumnName("OCCUPATION");
            entity.Property(e => e.Ownerid).HasColumnName("OWNERID");
            entity.Property(e => e.Ownername)
                .HasColumnType("text")
                .HasColumnName("OWNERNAME");
            entity.Property(e => e.Pannumber)
                .HasColumnType("text")
                .HasColumnName("PANNUMBER");
            entity.Property(e => e.Performancereportingdate)
                .HasColumnType("text")
                .HasColumnName("PERFORMANCEREPORTINGDATE");
            entity.Property(e => e.Phonehome)
                .HasColumnType("text")
                .HasColumnName("PHONEHOME");
            entity.Property(e => e.Phonework)
                .HasColumnType("text")
                .HasColumnName("PHONEWORK");
            entity.Property(e => e.Pincode)
                .HasColumnType("text")
                .HasColumnName("PINCODE");
            entity.Property(e => e.Refcode1)
                .HasColumnType("text")
                .HasColumnName("REFCODE1");
            entity.Property(e => e.Refcode10)
                .HasColumnType("text")
                .HasColumnName("REFCODE10");
            entity.Property(e => e.Refcode2)
                .HasColumnType("text")
                .HasColumnName("REFCODE2");
            entity.Property(e => e.Refcode3)
                .HasColumnType("text")
                .HasColumnName("REFCODE3");
            entity.Property(e => e.Refcode4)
                .HasColumnType("text")
                .HasColumnName("REFCODE4");
            entity.Property(e => e.Refcode5)
                .HasColumnType("text")
                .HasColumnName("REFCODE5");
            entity.Property(e => e.Refcode6)
                .HasColumnType("text")
                .HasColumnName("REFCODE6");
            entity.Property(e => e.Refcode7)
                .HasColumnType("text")
                .HasColumnName("REFCODE7");
            entity.Property(e => e.Refcode8)
                .HasColumnType("text")
                .HasColumnName("REFCODE8");
            entity.Property(e => e.Refcode9)
                .HasColumnType("text")
                .HasColumnName("REFCODE9");
            entity.Property(e => e.Relmgrid).HasColumnName("RELMGRID");
            entity.Property(e => e.Rmname)
                .HasColumnType("text")
                .HasColumnName("RMNAME");
            entity.Property(e => e.Salutation)
                .HasColumnType("text")
                .HasColumnName("SALUTATION");
            entity.Property(e => e.Schemeid).HasColumnName("SCHEMEID");
            entity.Property(e => e.Schemename)
                .HasColumnType("text")
                .HasColumnName("SCHEMENAME");
            entity.Property(e => e.SecondHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_AADHAR");
            entity.Property(e => e.SecondHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_AccType");
            entity.Property(e => e.SecondHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Account_No");
            entity.Property(e => e.SecondHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Bank_Name");
            entity.Property(e => e.SecondHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Branch_Name");
            entity.Property(e => e.SecondHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Depository");
            entity.Property(e => e.SecondHolderDob)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DOB");
            entity.Property(e => e.SecondHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Client_Id");
            entity.Property(e => e.SecondHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Id");
            entity.Property(e => e.SecondHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_DP_Name");
            entity.Property(e => e.SecondHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_FATCA");
            entity.Property(e => e.SecondHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Father_Husband");
            entity.Property(e => e.SecondHolderGender)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Gender");
            entity.Property(e => e.SecondHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_KYC");
            entity.Property(e => e.SecondHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Micr_Number");
            entity.Property(e => e.SecondHolderName)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Name");
            entity.Property(e => e.SecondHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_NEFT_Code");
            entity.Property(e => e.SecondHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Occupation");
            entity.Property(e => e.SecondHolderPan)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Pan");
            entity.Property(e => e.SecondHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Relation");
            entity.Property(e => e.SecondHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_RTGS_Code");
            entity.Property(e => e.SecondHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_Status");
            entity.Property(e => e.SecondHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Second_Holder_UBO");
            entity.Property(e => e.Sharereportsflag)
                .HasColumnType("text")
                .HasColumnName("SHAREREPORTSFLAG");
            entity.Property(e => e.SkipFromMfCorporateAction)
                .HasColumnType("text")
                .HasColumnName("Skip_from_MF_corporate_action");
            entity.Property(e => e.State)
                .HasColumnType("text")
                .HasColumnName("STATE");
            entity.Property(e => e.Status)
                .HasColumnType("text")
                .HasColumnName("STATUS");
            entity.Property(e => e.StttakenAs)
                .HasColumnType("text")
                .HasColumnName("STTTaken_As");
            entity.Property(e => e.Tannumber)
                .HasColumnType("text")
                .HasColumnName("TANNUMBER");
            entity.Property(e => e.Tdsonfees)
                .HasColumnType("text")
                .HasColumnName("TDSONFEES");
            entity.Property(e => e.ThirdHolderAadhar)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_AADHAR");
            entity.Property(e => e.ThirdHolderBankAccType)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_AccType");
            entity.Property(e => e.ThirdHolderBankAccountNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Account_No");
            entity.Property(e => e.ThirdHolderBankName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Bank_Name");
            entity.Property(e => e.ThirdHolderBranchName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Branch_Name");
            entity.Property(e => e.ThirdHolderDepository)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Depository");
            entity.Property(e => e.ThirdHolderDob)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DOB");
            entity.Property(e => e.ThirdHolderDpClientId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Client_Id");
            entity.Property(e => e.ThirdHolderDpId)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Id");
            entity.Property(e => e.ThirdHolderDpName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_DP_Name");
            entity.Property(e => e.ThirdHolderFatca)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_FATCA");
            entity.Property(e => e.ThirdHolderFatherHusband)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Father_Husband");
            entity.Property(e => e.ThirdHolderGender)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Gender");
            entity.Property(e => e.ThirdHolderKyc)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_KYC");
            entity.Property(e => e.ThirdHolderMicrNumber)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Micr_Number_");
            entity.Property(e => e.ThirdHolderName)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Name");
            entity.Property(e => e.ThirdHolderNeftCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_NEFT_Code");
            entity.Property(e => e.ThirdHolderOccupation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Occupation");
            entity.Property(e => e.ThirdHolderPanNo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Pan_No");
            entity.Property(e => e.ThirdHolderRelation)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Relation");
            entity.Property(e => e.ThirdHolderRtgsCode)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_RTGS_Code");
            entity.Property(e => e.ThirdHolderStatus)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_Status");
            entity.Property(e => e.ThirdHolderUbo)
                .HasColumnType("text")
                .HasColumnName("Third_Holder_UBO");
            entity.Property(e => e.TradingBankAccount)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Account");
            entity.Property(e => e.TradingBankCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Bank_Code");
            entity.Property(e => e.TradingCustodyAccountId)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_AccountId");
            entity.Property(e => e.TradingCustodyCode)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_Code");
            entity.Property(e => e.TradingCustodyDp)
                .HasColumnType("text")
                .HasColumnName("Trading_Custody_DP");
            entity.Property(e => e.TrxnTakenAs)
                .HasColumnType("text")
                .HasColumnName("TrxnTaken_As");
            entity.Property(e => e.Username)
                .HasColumnType("text")
                .HasColumnName("USERNAME");
            entity.Property(e => e.Ward)
                .HasColumnType("text")
                .HasColumnName("WARD");
            entity.Property(e => e.WealthAdvisorName)
                .HasColumnType("text")
                .HasColumnName("WealthAdvisor_Name");
        });

        modelBuilder.Entity<Wspjclientportfoliodatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wspjclientportfoliodata");

            entity.Property(e => e.AccruedInt).HasColumnName("accruedInt");
            entity.Property(e => e.AsOnDate)
                .HasColumnType("text")
                .HasColumnName("asOnDate");
            entity.Property(e => e.AssetsPerc).HasColumnName("assetsPerc");
            entity.Property(e => e.Astcls)
                .HasColumnType("text")
                .HasColumnName("astcls");
            entity.Property(e => e.AstclsName)
                .HasColumnType("text")
                .HasColumnName("astclsName");
            entity.Property(e => e.Category)
                .HasColumnType("text")
                .HasColumnName("category");
            entity.Property(e => e.CategoryName)
                .HasColumnType("text")
                .HasColumnName("categoryName");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.FilterBy)
                .HasColumnType("text")
                .HasColumnName("filterBy");
            entity.Property(e => e.FilterValue)
                .HasColumnType("text")
                .HasColumnName("filterValue");
            entity.Property(e => e.GainPerc).HasColumnName("gainPerc");
            entity.Property(e => e.Income).HasColumnName("income");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.MinTranDate)
                .HasColumnType("text")
                .HasColumnName("minTranDate");
            entity.Property(e => e.MktVal).HasColumnName("mktVal");
            entity.Property(e => e.Nav).HasColumnName("nav");
            entity.Property(e => e.SymbolCode)
                .HasColumnType("text")
                .HasColumnName("symbolCode");
            entity.Property(e => e.SymbolName)
                .HasColumnType("text")
                .HasColumnName("symbolName");
            entity.Property(e => e.ThirdPartyFlag)
                .HasColumnType("text")
                .HasColumnName("thirdPartyFlag");
            entity.Property(e => e.TotalCost).HasColumnName("totalCost");
            entity.Property(e => e.TotalGain).HasColumnName("totalGain");
            entity.Property(e => e.Units).HasColumnName("units");
            entity.Property(e => e.WtdAvgDay).HasColumnName("wtdAvgDay");
            entity.Property(e => e.XirrYield).HasColumnName("xirrYield");
        });

        modelBuilder.Entity<Wspjclientportfoliosecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wspjclientportfoliosecurity");

            entity.Property(e => e.AccruedIncome).HasColumnName("accruedIncome");
            entity.Property(e => e.AstCls)
                .HasColumnType("text")
                .HasColumnName("astCls");
            entity.Property(e => e.AstClsName)
                .HasColumnType("text")
                .HasColumnName("astClsName");
            entity.Property(e => e.AstClsSeq).HasColumnName("astClsSeq");
            entity.Property(e => e.BalQty).HasColumnName("balQty");
            entity.Property(e => e.BeginMktVal).HasColumnName("beginMktVal");
            entity.Property(e => e.BeginMktValStr)
                .HasColumnType("text")
                .HasColumnName("beginMktValStr");
            entity.Property(e => e.BenchMarkCode)
                .HasColumnType("text")
                .HasColumnName("benchMarkCode");
            entity.Property(e => e.BenchMarkName)
                .HasColumnType("text")
                .HasColumnName("benchMarkName");
            entity.Property(e => e.Bm1Gain).HasColumnName("bm1Gain");
            entity.Property(e => e.BmXirr).HasColumnName("bmXirr");
            entity.Property(e => e.BmXirrAbs).HasColumnName("bmXirrAbs");
            entity.Property(e => e.BmXirrAbsStr)
                .HasColumnType("text")
                .HasColumnName("bmXirrAbsStr");
            entity.Property(e => e.BmXirrStr)
                .HasColumnType("text")
                .HasColumnName("bmXirrStr");
            entity.Property(e => e.CategoryCode)
                .HasColumnType("text")
                .HasColumnName("categoryCode");
            entity.Property(e => e.CategoryName)
                .HasColumnType("text")
                .HasColumnName("categoryName");
            entity.Property(e => e.Change).HasColumnName("change_");
            entity.Property(e => e.ChangeStr)
                .HasColumnType("text")
                .HasColumnName("changeStr");
            entity.Property(e => e.DataLevel)
                .HasColumnType("text")
                .HasColumnName("dataLevel");
            entity.Property(e => e.EndDate)
                .HasColumnType("text")
                .HasColumnName("endDate");
            entity.Property(e => e.EndMktVal).HasColumnName("endMktVal");
            entity.Property(e => e.EndMktValStr)
                .HasColumnType("text")
                .HasColumnName("endMktValStr");
            entity.Property(e => e.FactSheetAval)
                .HasColumnType("text")
                .HasColumnName("factSheetAval");
            entity.Property(e => e.FinalBmXirr).HasColumnName("finalBmXirr");
            entity.Property(e => e.FinalBmXirrStr)
                .HasColumnType("text")
                .HasColumnName("finalBmXirrStr");
            entity.Property(e => e.FinalXirr).HasColumnName("finalXirr");
            entity.Property(e => e.FinalXirrStr)
                .HasColumnType("text")
                .HasColumnName("finalXirrStr");
            entity.Property(e => e.FlagAif)
                .HasColumnType("text")
                .HasColumnName("flagAIF");
            entity.Property(e => e.FromDate)
                .HasColumnType("text")
                .HasColumnName("fromDate");
            entity.Property(e => e.Gain).HasColumnName("gain");
            entity.Property(e => e.GainLossPer).HasColumnName("gainLossPer");
            entity.Property(e => e.GainStr)
                .HasColumnType("text")
                .HasColumnName("gainStr");
            entity.Property(e => e.Growth).HasColumnName("growth");
            entity.Property(e => e.Income).HasColumnName("income");
            entity.Property(e => e.IndexCol).HasColumnName("indexCol");
            entity.Property(e => e.Inflow).HasColumnName("inflow");
            entity.Property(e => e.NetFlow).HasColumnName("netFlow");
            entity.Property(e => e.NetFlowStr)
                .HasColumnType("text")
                .HasColumnName("netFlowStr");
            entity.Property(e => e.NetInflow).HasColumnName("netInflow");
            entity.Property(e => e.Outflow).HasColumnName("outflow");
            entity.Property(e => e.PeriodOpt)
                .HasColumnType("text")
                .HasColumnName("periodOpt");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.PriceOn)
                .HasColumnType("text")
                .HasColumnName("priceOn");
            entity.Property(e => e.PriorGain).HasColumnName("priorGain");
            entity.Property(e => e.RealGain).HasColumnName("realGain");
            entity.Property(e => e.RecordFor)
                .HasColumnType("text")
                .HasColumnName("recordFor");
            entity.Property(e => e.Scope)
                .HasColumnType("text")
                .HasColumnName("scope");
            entity.Property(e => e.ScopeId).HasColumnName("scopeId");
            entity.Property(e => e.ScopeStr)
                .HasColumnType("text")
                .HasColumnName("scopeStr");
            entity.Property(e => e.SecData)
                .HasColumnType("text")
                .HasColumnName("secData");
            entity.Property(e => e.StartDate)
                .HasColumnType("text")
                .HasColumnName("startDate");
            entity.Property(e => e.Symtype)
                .HasColumnType("text")
                .HasColumnName("symtype");
            entity.Property(e => e.SymtypeOri)
                .HasColumnType("text")
                .HasColumnName("symtypeOri");
            entity.Property(e => e.ThirdPartyFlag)
                .HasColumnType("text")
                .HasColumnName("thirdPartyFlag");
            entity.Property(e => e.ToDate)
                .HasColumnType("text")
                .HasColumnName("toDate");
            entity.Property(e => e.TotalCost).HasColumnName("totalCost");
            entity.Property(e => e.UnrealGain).HasColumnName("unrealGain");
            entity.Property(e => e.Xirr).HasColumnName("xirr");
            entity.Property(e => e.XirrAbs).HasColumnName("xirrAbs");
            entity.Property(e => e.XirrAbsStr)
                .HasColumnType("text")
                .HasColumnName("xirrAbsStr");
            entity.Property(e => e.XirrStr)
                .HasColumnType("text")
                .HasColumnName("xirrStr");
        });

        modelBuilder.Entity<Wspjperformancesummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wspjperformancesummary");

            entity.Property(e => e.AccInt).HasColumnName("accInt");
            entity.Property(e => e.BeginMktVal).HasColumnName("beginMktVal");
            entity.Property(e => e.ClientId).HasColumnName("clientId");
            entity.Property(e => e.CommitAmt).HasColumnName("commitAmt");
            entity.Property(e => e.Distribution).HasColumnName("distribution");
            entity.Property(e => e.EndMktVal).HasColumnName("endMktVal");
            entity.Property(e => e.Expenses).HasColumnName("expenses");
            entity.Property(e => e.FromDate)
                .HasColumnType("text")
                .HasColumnName("fromDate");
            entity.Property(e => e.FundInvClient).HasColumnName("fundInvClient");
            entity.Property(e => e.Income).HasColumnName("income");
            entity.Property(e => e.Inflow).HasColumnName("inflow");
            entity.Property(e => e.Mode)
                .HasColumnType("text")
                .HasColumnName("mode");
            entity.Property(e => e.ModeStr)
                .HasColumnType("text")
                .HasColumnName("modeStr");
            entity.Property(e => e.Nav).HasColumnName("nav");
            entity.Property(e => e.Outflow).HasColumnName("outflow");
            entity.Property(e => e.PriorGainLoss).HasColumnName("priorGainLoss");
            entity.Property(e => e.Profit).HasColumnName("profit");
            entity.Property(e => e.RealGain).HasColumnName("realGain");
            entity.Property(e => e.Ror).HasColumnName("ror");
            entity.Property(e => e.RorAbs).HasColumnName("rorAbs");
            entity.Property(e => e.SchemeId).HasColumnName("schemeId");
            entity.Property(e => e.SchemeName)
                .HasColumnType("text")
                .HasColumnName("schemeName");
            entity.Property(e => e.ToDate)
                .HasColumnType("text")
                .HasColumnName("toDate");
            entity.Property(e => e.TotalDrawdown).HasColumnName("totalDrawdown");
            entity.Property(e => e.Units).HasColumnName("units");
            entity.Property(e => e.UnrealGain).HasColumnName("unrealGain");
        });

        modelBuilder.Entity<WspjperformancesummaryBenchmark>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wspjperformancesummary_benchmark");

            entity.Property(e => e.BmName)
                .HasMaxLength(255)
                .HasColumnName("bmName");
            entity.Property(e => e.BmRor).HasColumnName("bmROR");
            entity.Property(e => e.BmRorabs).HasColumnName("bmRORAbs");
            entity.Property(e => e.BmSeq).HasColumnName("bmSeq");
        });

        modelBuilder.Entity<Wsportfolioholding>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsportfolioholding");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accruedint)
                .HasPrecision(18, 2)
                .HasColumnName("accruedint");
            entity.Property(e => e.Assetsperc)
                .HasPrecision(18, 2)
                .HasColumnName("assetsperc");
            entity.Property(e => e.Astcls)
                .HasMaxLength(255)
                .HasColumnName("astcls");
            entity.Property(e => e.Astclsname)
                .HasMaxLength(255)
                .HasColumnName("astclsname");
            entity.Property(e => e.Category)
                .HasMaxLength(255)
                .HasColumnName("category");
            entity.Property(e => e.Categoryname)
                .HasMaxLength(255)
                .HasColumnName("categoryname");
            entity.Property(e => e.Code).HasColumnName("code");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Filterby)
                .HasMaxLength(255)
                .HasColumnName("filterby");
            entity.Property(e => e.Filtervalue)
                .HasMaxLength(255)
                .HasColumnName("filtervalue");
            entity.Property(e => e.Gainperc)
                .HasPrecision(18, 2)
                .HasColumnName("gainperc");
            entity.Property(e => e.Income)
                .HasPrecision(18, 2)
                .HasColumnName("income");
            entity.Property(e => e.Level).HasColumnName("level");
            entity.Property(e => e.Mintrandate)
                .HasMaxLength(255)
                .HasColumnName("mintrandate");
            entity.Property(e => e.Mktval)
                .HasPrecision(18, 2)
                .HasColumnName("mktval");
            entity.Property(e => e.Nav)
                .HasPrecision(18, 2)
                .HasColumnName("nav");
            entity.Property(e => e.Ondate)
                .HasColumnType("datetime")
                .HasColumnName("ondate");
            entity.Property(e => e.Symbolcode)
                .HasMaxLength(255)
                .HasColumnName("symbolcode");
            entity.Property(e => e.Symbolname)
                .HasMaxLength(255)
                .HasColumnName("symbolname");
            entity.Property(e => e.Thirdpartyflag)
                .HasMaxLength(255)
                .HasColumnName("thirdpartyflag");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Totalcost)
                .HasPrecision(18, 2)
                .HasColumnName("totalcost");
            entity.Property(e => e.Totalgain)
                .HasPrecision(18, 2)
                .HasColumnName("totalgain");
            entity.Property(e => e.Units)
                .HasPrecision(18, 2)
                .HasColumnName("units");
            entity.Property(e => e.Wtdavgday)
                .HasPrecision(18, 2)
                .HasColumnName("wtdavgday");
            entity.Property(e => e.Xirryield)
                .HasPrecision(18, 2)
                .HasColumnName("xirryield");
        });

        modelBuilder.Entity<Wsportfolioperformance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsportfolioperformance");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Accint)
                .HasPrecision(18, 2)
                .HasColumnName("accint");
            entity.Property(e => e.Beginmktval)
                .HasPrecision(18, 2)
                .HasColumnName("beginmktval");
            entity.Property(e => e.BmName)
                .HasMaxLength(255)
                .HasColumnName("bmName");
            entity.Property(e => e.Bmror)
                .HasPrecision(18, 2)
                .HasColumnName("bmror");
            entity.Property(e => e.Bmrorabs)
                .HasPrecision(18, 2)
                .HasColumnName("bmrorabs");
            entity.Property(e => e.Bmseq).HasColumnName("bmseq");
            entity.Property(e => e.Clientid).HasColumnName("clientid");
            entity.Property(e => e.Commitamt)
                .HasPrecision(18, 2)
                .HasColumnName("commitamt");
            entity.Property(e => e.Distribution)
                .HasPrecision(18, 2)
                .HasColumnName("distribution");
            entity.Property(e => e.Endmktval)
                .HasPrecision(18, 2)
                .HasColumnName("endmktval");
            entity.Property(e => e.Expenses)
                .HasPrecision(18, 2)
                .HasColumnName("expenses");
            entity.Property(e => e.Fromdate).HasColumnName("fromdate");
            entity.Property(e => e.Fundinvclient).HasColumnName("fundinvclient");
            entity.Property(e => e.Income)
                .HasPrecision(18, 2)
                .HasColumnName("income");
            entity.Property(e => e.Inflow)
                .HasPrecision(18, 2)
                .HasColumnName("inflow");
            entity.Property(e => e.Mode)
                .HasMaxLength(50)
                .HasColumnName("mode");
            entity.Property(e => e.Modestr)
                .HasMaxLength(50)
                .HasColumnName("modestr");
            entity.Property(e => e.Nav)
                .HasPrecision(18, 2)
                .HasColumnName("nav");
            entity.Property(e => e.Outflow)
                .HasPrecision(18, 2)
                .HasColumnName("outflow");
            entity.Property(e => e.Priorgainloss)
                .HasPrecision(18, 2)
                .HasColumnName("priorgainloss");
            entity.Property(e => e.Profit)
                .HasPrecision(18, 2)
                .HasColumnName("profit");
            entity.Property(e => e.Realgain)
                .HasPrecision(18, 2)
                .HasColumnName("realgain");
            entity.Property(e => e.Ror)
                .HasPrecision(18, 2)
                .HasColumnName("ror");
            entity.Property(e => e.Rorabs)
                .HasPrecision(18, 2)
                .HasColumnName("rorabs");
            entity.Property(e => e.Rortype)
                .HasMaxLength(255)
                .HasColumnName("rortype");
            entity.Property(e => e.Schemeid).HasColumnName("schemeid");
            entity.Property(e => e.Schemename)
                .HasMaxLength(255)
                .HasColumnName("schemename");
            entity.Property(e => e.Scope)
                .HasMaxLength(255)
                .HasColumnName("scope");
            entity.Property(e => e.Scopeid).HasColumnName("scopeid");
            entity.Property(e => e.Timestamp)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
            entity.Property(e => e.Todate).HasColumnName("todate");
            entity.Property(e => e.Totaldrawdown)
                .HasPrecision(18, 2)
                .HasColumnName("totaldrawdown");
            entity.Property(e => e.Units)
                .HasPrecision(18, 2)
                .HasColumnName("units");
            entity.Property(e => e.Unrealgain)
                .HasPrecision(18, 2)
                .HasColumnName("unrealgain");
        });

        modelBuilder.Entity<Wsqueryfile>(entity =>
        {
            entity.HasKey(e => e.Srno).HasName("PRIMARY");

            entity.ToTable("wsqueryfiles");

            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Queryfile)
                .HasMaxLength(500)
                .HasColumnName("queryfile");
            entity.Property(e => e.Queryname)
                .HasMaxLength(500)
                .HasColumnName("queryname");
        });

        modelBuilder.Entity<Wsstagingbseuccstarformatdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("wsstagingbseuccstarformatdata");

            entity.Property(e => e.BseUccCode).HasMaxLength(255);
            entity.Property(e => e.ClientAccno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO1");
            entity.Property(e => e.ClientAccno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO2");
            entity.Property(e => e.ClientAccno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO3");
            entity.Property(e => e.ClientAccno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO4");
            entity.Property(e => e.ClientAccno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCNO5");
            entity.Property(e => e.ClientAcctype1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE1");
            entity.Property(e => e.ClientAcctype2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE2");
            entity.Property(e => e.ClientAcctype3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE3");
            entity.Property(e => e.ClientAcctype5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ACCTYPE5");
            entity.Property(e => e.ClientAdd2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD2");
            entity.Property(e => e.ClientAdd3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_ADD3");
            entity.Property(e => e.ClientCdslcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLCLTID");
            entity.Property(e => e.ClientCdsldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CDSLDPID");
            entity.Property(e => e.ClientChequename5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CHEQUENAME5");
            entity.Property(e => e.ClientCity)
                .HasColumnType("text")
                .HasColumnName("CLIENT_CITY");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(20)
                .HasColumnName("CLIENT_CODE");
            entity.Property(e => e.ClientCommmode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COMMMODE");
            entity.Property(e => e.ClientCountry)
                .HasColumnType("text")
                .HasColumnName("CLIENT_COUNTRY");
            entity.Property(e => e.ClientDefaultDp)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DEFAULT_DP");
            entity.Property(e => e.ClientDivpaymode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_DIVPAYMODE_");
            entity.Property(e => e.ClientEmail)
                .HasColumnType("text")
                .HasColumnName("CLIENT_EMAIL");
            entity.Property(e => e.ClientFatherHusbGuard)
                .HasColumnType("text")
                .HasColumnName("CLIENT_FATHER_HUSB_GUARD");
            entity.Property(e => e.ClientGuardianPan)
                .HasColumnType("text")
                .HasColumnName("CLIENT_GUARDIAN_PAN");
            entity.Property(e => e.ClientHolding)
                .HasColumnType("text")
                .HasColumnName("CLIENT_HOLDING");
            entity.Property(e => e.ClientMicrno1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO1");
            entity.Property(e => e.ClientMicrno2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO2");
            entity.Property(e => e.ClientMicrno3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO3");
            entity.Property(e => e.ClientMicrno4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO4");
            entity.Property(e => e.ClientMicrno5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_MICRNO5");
            entity.Property(e => e.ClientNeftifsccode1)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE1");
            entity.Property(e => e.ClientNeftifsccode2)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE2");
            entity.Property(e => e.ClientNeftifsccode3)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE3");
            entity.Property(e => e.ClientNeftifsccode4)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE4");
            entity.Property(e => e.ClientNeftifsccode5)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NEFTIFSCCODE5");
            entity.Property(e => e.ClientNominee)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE");
            entity.Property(e => e.ClientNomineeRelation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NOMINEE_RELATION");
            entity.Property(e => e.ClientNsdlcltid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLCLTID");
            entity.Property(e => e.ClientNsdldpid)
                .HasColumnType("text")
                .HasColumnName("CLIENT_NSDLDPID");
            entity.Property(e => e.ClientOccupation)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OCCUPATION");
            entity.Property(e => e.ClientOfficefax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEFAX");
            entity.Property(e => e.ClientOfficephone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_OFFICEPHONE");
            entity.Property(e => e.ClientPincode)
                .HasColumnType("text")
                .HasColumnName("CLIENT_PINCODE");
            entity.Property(e => e.ClientResifax)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIFAX");
            entity.Property(e => e.ClientResiphone)
                .HasColumnType("text")
                .HasColumnName("CLIENT_RESIPHONE");
            entity.Property(e => e.ClientState)
                .HasColumnType("text")
                .HasColumnName("CLIENT_STATE");
            entity.Property(e => e.ClientTaxstatus)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TAXSTATUS");
            entity.Property(e => e.ClientType)
                .HasColumnType("text")
                .HasColumnName("CLIENT_TYPE");
            entity.Property(e => e.CmForadd1)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD1");
            entity.Property(e => e.CmForadd2)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD2");
            entity.Property(e => e.CmForadd3)
                .HasColumnType("text")
                .HasColumnName("CM_FORADD3");
            entity.Property(e => e.CmForcity)
                .HasColumnType("text")
                .HasColumnName("CM_FORCITY");
            entity.Property(e => e.CmForcountry)
                .HasColumnType("text")
                .HasColumnName("CM_FORCOUNTRY");
            entity.Property(e => e.CmForofffax)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFFAX");
            entity.Property(e => e.CmForoffphone)
                .HasColumnType("text")
                .HasColumnName("CM_FOROFFPHONE");
            entity.Property(e => e.CmForpincode)
                .HasColumnType("text")
                .HasColumnName("CM_FORPINCODE");
            entity.Property(e => e.CmForresifax)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIFAX");
            entity.Property(e => e.CmForresiphone)
                .HasColumnType("text")
                .HasColumnName("CM_FORRESIPHONE");
            entity.Property(e => e.CmForstate)
                .HasColumnType("text")
                .HasColumnName("CM_FORSTATE");
            entity.Property(e => e.CmMobile)
                .HasColumnType("text")
                .HasColumnName("CM_MOBILE");
            entity.Property(e => e.DefaultBankFlag)
                .HasColumnType("text")
                .HasColumnName("Default_bank_flag");
            entity.Property(e => e.FirstApllicantDob)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_DOB");
            entity.Property(e => e.FirstApllicantPan)
                .HasColumnType("text")
                .HasColumnName("FIRST_APLLICANT_PAN");
            entity.Property(e => e.FirstApplicantGender)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_GENDER");
            entity.Property(e => e.FirstApplicantName)
                .HasColumnType("text")
                .HasColumnName("FIRST_APPLICANT_NAME");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.MapinNo)
                .HasColumnType("text")
                .HasColumnName("MAPIN_NO");
            entity.Property(e => e.SecondApplicantName)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_NAME");
            entity.Property(e => e.SecondApplicantPan)
                .HasColumnType("text")
                .HasColumnName("SECOND_APPLICANT_PAN");
            entity.Property(e => e.ThirdApllicantName)
                .HasColumnType("text")
                .HasColumnName("THIRD_APLLICANT_NAME");
            entity.Property(e => e.ThirdApplicantPan)
                .HasColumnType("text")
                .HasColumnName("THIRD_APPLICANT_PAN");
            entity.Property(e => e.Timestamp)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<Wstoken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wstokens");

            entity.HasIndex(e => e.ApiKey, "api_key").IsUnique();

            entity.HasIndex(e => e.Username, "username");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ApiKey).HasColumnName("api_key");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("createdon");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.Revokedon)
                .HasColumnType("timestamp")
                .HasColumnName("revokedon");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.Username).HasColumnName("username");

            entity.HasOne(d => d.UsernameNavigation).WithMany(p => p.Wstokens)
                .HasPrincipalKey(p => p.Username)
                .HasForeignKey(d => d.Username)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("wstokens_ibfk_1");
        });

        modelBuilder.Entity<Wsusermaster>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("wsusermaster");

            entity.HasIndex(e => e.Username, "username").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Createdby)
                .HasMaxLength(255)
                .HasColumnName("createdby");
            entity.Property(e => e.Createdon)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime")
                .HasColumnName("createdon");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.Isdeleted).HasColumnName("isdeleted");
            entity.Property(e => e.Updatedby)
                .HasMaxLength(255)
                .HasColumnName("updatedby");
            entity.Property(e => e.Updatedon)
                .HasColumnType("datetime")
                .HasColumnName("updatedon");
            entity.Property(e => e.Username).HasColumnName("username");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
